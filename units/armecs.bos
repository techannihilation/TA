#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, beam, plate, arm, nano, door1, door2, wake1,
       wake2, wake3, turret, body, domer;

static-var  Static_Var_1, Static_Var_2, Static_Var_3;


activatescr()
{
	if( TRUE )
	{
		move plate to z-axis [0.] now;
		move arm to y-axis [0.] now;
		move nano to y-axis [0.] now;
		move beam to x-axis [0.] now;
		move beam to z-axis [0.] now;
		turn door1 to z-axis <0.> now;
		turn door1 to z-axis <-71.> speed <182.>;
		turn door2 to z-axis <0.> now;
		turn door2 to z-axis <72.> speed <184.>;
		sleep 388;
	}
	if( TRUE )
	{
		move door1 to y-axis [-4.] speed [9.];
		move door2 to y-axis [-4.] speed [9.];
		sleep 389;
	}
	if( TRUE )
	{
		move plate to y-axis [4.] speed [10.];
		sleep 389;
	}
	if( TRUE )
	{
		turn arm to x-axis <90.> speed <230.>;
		turn nano to x-axis <-70.> speed <179.>;
		sleep 390;
	}
	sleep 20;
}

deactivatescr()
{
	if( TRUE )
	{
		move plate to y-axis [4.] now;
		move plate to z-axis [0.] now;
		move door1 to y-axis [-4.] now;
		move door2 to y-axis [-4.] now;
		move arm to y-axis [0.] now;
		move nano to y-axis [0.] now;
		move beam to x-axis [0.] now;
		move beam to z-axis [0.] now;
		turn door1 to z-axis <-71.> now;
		turn door2 to z-axis <72.> now;
		turn arm to x-axis <90.> now;
		turn arm to x-axis <0.> speed <231.>;
		turn nano to x-axis <-70.> now;
		turn nano to x-axis <0.> speed <180.>;
		sleep 388;
	}
	if( TRUE )
	{
		move plate to y-axis [0.] speed [10.];
		sleep 389;
	}
	if( TRUE )
	{
		move door1 to y-axis [0.] speed [9.];
		move door2 to y-axis [0.] speed [9.];
		sleep 389;
	}
	if( TRUE )
	{
		turn door1 to z-axis <0.> speed <181.>;
		turn door2 to z-axis <0.> speed <184.>;
		sleep 390;
	}
	sleep 20;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

StartMoving()
{
	signal 2;
	set-signal-mask 2;
	while( TRUE )
	{
		emit-sfx 2 from wake1;
		emit-sfx 4 from wake2;
		sleep 150;
	}
}

StopMoving()
{
	signal 2;
}

Go()
{
	set INBUILDSTANCE to 1;
	call-script activatescr();
	turn turret to y-axis Static_Var_1 speed <160.>;
	wait-for-turn turret around y-axis;
}

Stop()
{
	set INBUILDSTANCE to 0;
	turn turret to y-axis <0.> speed <160.>;
	wait-for-turn turret around y-axis;
	call-script deactivatescr();
}

InitState()
{
	Static_Var_2 = 1;
	Static_Var_3 = 0;
}

RequestState(requestedstate, currentstate)
{
	if( Static_Var_3 )
	{
		Static_Var_2 = requestedstate;
	}
	Static_Var_3 = 1;
	currentstate = Static_Var_2;
	Static_Var_2 = requestedstate;
	while( Static_Var_2 != currentstate )
	{
		if( Static_Var_2 == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( Static_Var_2 == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	Static_Var_3 = 0;
}

Create()
{
	Static_Var_1 = 0;
	call-script InitState();
	start-script SmokeUnit();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

StartBuilding(Func_Var_1)
{
	Static_Var_1 = Func_Var_1;
	sleep Rand( 25, 250 );
	start-script RequestState(0);
}

StopBuilding()
{
	start-script RequestState(1);
}

QueryNanoPiece(piecenum)
{
	piecenum = beam;
}

TargetHeading(Func_Var_1)
{
	Static_Var_1 = 0 - Func_Var_1;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode arm type NOHEATCLOUD;
		explode base type NOHEATCLOUD;
		explode beam type NOHEATCLOUD;
		explode door1 type NOHEATCLOUD;
		explode door2 type NOHEATCLOUD;
		explode nano type NOHEATCLOUD;
		explode plate type NOHEATCLOUD;
		explode turret type NOHEATCLOUD;
		explode wake1 type NOHEATCLOUD;
		explode wake2 type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode arm type FALL | EXPLODE_ON_HIT | NOHEATCLOUD;
		explode base type NOHEATCLOUD;
		explode beam type FALL | EXPLODE_ON_HIT | NOHEATCLOUD;
		explode door1 type SHATTER | EXPLODE_ON_HIT | NOHEATCLOUD;
		explode door2 type SHATTER | EXPLODE_ON_HIT | NOHEATCLOUD;
		explode nano type FALL | EXPLODE_ON_HIT | NOHEATCLOUD;
		explode plate type NOHEATCLOUD;
		explode turret type FALL | EXPLODE_ON_HIT | NOHEATCLOUD;
		explode wake1 type FALL | EXPLODE_ON_HIT | NOHEATCLOUD;
		explode wake2 type FALL | EXPLODE_ON_HIT | NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode arm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
		explode base type NOHEATCLOUD;
		explode beam type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
		explode door1 type SHATTER | EXPLODE_ON_HIT | NOHEATCLOUD;
		explode door2 type SHATTER | EXPLODE_ON_HIT | NOHEATCLOUD;
		explode nano type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
		explode plate type NOHEATCLOUD;
		explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
		explode wake1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
		explode wake2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
		return (corpsetype);
	}
	corpsetype = 3;
	explode arm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode base type NOHEATCLOUD;
	explode beam type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode door1 type SHATTER | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode door2 type SHATTER | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode nano type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode plate type NOHEATCLOUD;
	explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode wake1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode wake2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	return (corpsetype);
}
