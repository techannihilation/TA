#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  pelvis, leftupperleg, leftlowerleg, leftfoot, lefttoea, lefttoeb, lefttoec, rightupperleg,
       rightlowerleg, rightfoot, righttoea, righttoeb, righttoec, maintorso, leftcannon, rightcannon,
       secfirea, secfireb, terfirea, terfireb, leftflare, rightflare;

static-var  Static_Var_1, gun_1, gun_2, gun_3, bMoving;

// Signal definitions
#define SIG_MOVE			2
#define SIG_AIM_1			8
#define SIG_AIM_2			16
#define SIG_AIM_3			32


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from pelvis;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

walk()
{
	if( TRUE )
	{
		turn leftupperleg to x-axis <40.005495> speed <35.000000>;
		turn rightupperleg to x-axis <-40.005495> speed <35.000000>;
		turn leftfoot to x-axis <-30.005495> speed <55.000000>;
		turn rightfoot to x-axis <10.000000> speed <35.000000>;
		turn rightlowerleg to x-axis <-20.000000> speed <55.000000>;
		turn maintorso to x-axis <6.000000> speed <5.000000>;
		sleep 505;
		turn leftfoot to x-axis <40.005495> speed <85.000000>;
		turn rightfoot to x-axis <20.000000> speed <35.000000>;
		turn rightlowerleg to x-axis <40.005495> speed <85.000000>;
		turn lefttoea to x-axis <45.010989> speed <85.000000>;
		turn lefttoeb to x-axis <45.010989> speed <85.000000>;
		turn lefttoec to x-axis <-45.010989> speed <85.000000>;
		turn righttoea to x-axis <0.000000> speed <85.000000>;
		turn righttoeb to x-axis <0.000000> speed <85.000000>;
		sleep 600;
		turn righttoec to x-axis <0.000000> speed <85.000000>;
		move pelvis to y-axis [2.000000] speed [2.000000];
		turn pelvis to z-axis <7.000000> speed <3.000000>;
	}
	if( TRUE )
	{
		turn leftupperleg to x-axis <-40.005495> speed <35.000000>;
		turn rightupperleg to x-axis <40.005495> speed <35.000000>;
		turn rightfoot to x-axis <-40.005495> speed <110.000000>;
		turn leftlowerleg to x-axis <-40.005495> speed <85.000000>;
		sleep 1050;
		turn rightfoot to x-axis <40.005495> speed <85.000000>;
		turn leftlowerleg to x-axis <40.005495> speed <85.000000>;
		move pelvis to y-axis [0.000000] speed [2.000000];
		turn lefttoea to x-axis <0.000000> speed <85.000000>;
		turn lefttoeb to x-axis <0.000000> speed <85.000000>;
		turn righttoea to x-axis <45.010989> speed <85.000000>;
		turn righttoeb to x-axis <45.010989> speed <85.000000>;
		turn righttoec to x-axis <-45.010989> speed <85.000000>;
		sleep 600;
		turn lefttoec to x-axis <0.000000> speed <85.000000>;
		move pelvis to y-axis [2.000000] speed [2.000000];
		turn pelvis to z-axis <-7.000000> speed <8.000000>;
	}
	while( TRUE )
	{
		if( TRUE )
		{
			turn maintorso to y-axis <-10.000000> speed <12.000000>;
			turn maintorso to x-axis <-5.000000> speed <6.000000>;
			turn leftupperleg to x-axis <40.005495> speed <35.000000>;
			turn rightupperleg to x-axis <-40.005495> speed <35.000000>;
			turn leftfoot to x-axis <-40.005495> speed <100.000000>;
			turn rightlowerleg to x-axis <-40.005495> speed <85.000000>;
			sleep 1050;
			turn leftfoot to x-axis <40.005495> speed <85.000000>;
			turn rightfoot to x-axis <40.005495> speed <55.000000>;
			turn rightlowerleg to x-axis <40.005495> speed <85.000000>;
			move pelvis to y-axis [0.000000] speed [2.000000];
			turn lefttoea to x-axis <45.010989> speed <85.000000>;
			turn lefttoeb to x-axis <45.010989> speed <85.000000>;
			turn lefttoec to x-axis <-45.010989> speed <85.000000>;
			turn righttoea to x-axis <0.000000> speed <85.000000>;
			turn righttoeb to x-axis <0.000000> speed <85.000000>;
			sleep 600;
			turn righttoec to x-axis <0.000000> speed <85.000000>;
			move pelvis to y-axis [2.000000] speed [2.000000];
			turn pelvis to z-axis <7.000000> speed <8.000000>;
		}
		if( TRUE )
		{
			turn maintorso to y-axis <10.000000> speed <12.000000>;
			turn maintorso to x-axis <6.000000> speed <6.000000>;
			turn leftupperleg to x-axis <-40.005495> speed <35.000000>;
			turn rightupperleg to x-axis <40.005495> speed <35.000000>;
			turn rightfoot to x-axis <-40.005495> speed <100.000000>;
			turn leftlowerleg to x-axis <-40.005495> speed <85.000000>;
			sleep 1050;
			turn rightfoot to x-axis <40.005495> speed <85.000000>;
			turn leftlowerleg to x-axis <40.005495> speed <85.000000>;
			move pelvis to y-axis [0.000000] speed [2.000000];
			turn lefttoea to x-axis <0.000000> speed <85.000000>;
			turn lefttoeb to x-axis <0.000000> speed <85.000000>;
			turn righttoea to x-axis <45.010989> speed <85.000000>;
			turn righttoeb to x-axis <45.010989> speed <85.000000>;
			turn righttoec to x-axis <-45.010989> speed <85.000000>;
			sleep 600;
			turn lefttoec to x-axis <0.000000> speed <85.000000>;
			move pelvis to y-axis [2.000000] speed [2.000000];
			turn pelvis to z-axis <-7.000000> speed <8.000000>;
		}
	}
}

stop()
{
	turn leftupperleg to x-axis <0.000000> speed <35.000000>;
	turn rightupperleg to x-axis <0.000000> speed <35.000000>;
	turn leftlowerleg to x-axis <0.000000> speed <85.000000>;
	turn rightlowerleg to x-axis <0.000000> speed <85.000000>;
	turn maintorso to y-axis <0.000000> speed <85.000000>;
	turn maintorso to x-axis <0.000000> speed <20.000000>;
	move pelvis to y-axis [0.000000] speed [20.000000];
	turn pelvis to z-axis <0.000000> speed <20.000000>;
	turn righttoea to x-axis <0.000000> speed <85.000000>;
	turn righttoeb to x-axis <0.000000> speed <85.000000>;
	turn righttoec to x-axis <0.000000> speed <85.000000>;
	turn lefttoea to x-axis <0.000000> speed <85.000000>;
	turn lefttoeb to x-axis <0.000000> speed <85.000000>;
	turn lefttoec to x-axis <0.000000> speed <85.000000>;
	turn rightfoot to x-axis <0.000000> speed <85.000000>;
	turn leftfoot to x-axis <0.000000> speed <85.000000>;
	wait-for-turn maintorso around x-axis;
	bMoving = TRUE;
	sleep 20;
}

Create()
{
	cache leftcannon;
	cache leftlowerleg;
	cache leftfoot;
	cache lefttoea;
	cache lefttoeb;
	cache lefttoec;
	cache rightcannon;
	cache rightlowerleg;
	cache rightfoot;
	cache righttoea;
	cache righttoeb;
	cache righttoec;
	cache maintorso;
	dont-shade leftflare;
	dont-shade rightflare;
	hide leftflare;
	hide rightflare;
	gun_2 = pelvis;
	gun_3 = pelvis;
	bMoving = TRUE;
	Static_Var_1 = 4000;
	start-script SmokeUnit();
}

StartMoving()
{
	bMoving = TRUE;
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	start-script walk();
}

StopMoving()
{
	bMoving = TRUE;
	signal SIG_MOVE;
	start-script stop();
}

SweetSpot(piecenum)
{
	piecenum = pelvis;
}

RestoreAfterDelay()
{
	sleep Static_Var_1;
	turn maintorso to y-axis <0.000000> speed <100.000000>;
	turn leftcannon to x-axis <0.000000> speed <20.000000>;
	turn rightcannon to x-axis <0.000000> speed <20.000000>;
	wait-for-turn maintorso around y-axis;
	wait-for-turn leftcannon around x-axis;
	wait-for-turn rightcannon around x-axis;
	bMoving = TRUE;
}

AimWeapon1(heading, pitch)
{
    signal SIG_AIM_1;
	set-signal-mask SIG_AIM_1;
	//Static_Var_2 = 1;
	turn maintorso to y-axis heading speed <150.0>;
	//turn sleeve1 to x-axis <0.0> - pitch speed <100.0>;
	wait-for-turn maintorso around y-axis;
	//wait-for-turn sleeve1 around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireWeapon1()
{
	if( gun_1 == 0 )
	{
		emit-sfx 1024 + 0 from leftflare;
	}
	if( gun_1 == 1 )
	{
		emit-sfx 1024 + 0 from rightflare;
	}
    gun_1= gun_1 + 1;
	if( gun_1 >= 2 )
	{
	gun_1=0;	
    }
}

AimFromWeapon1(piecenum)
{
	piecenum = maintorso;
}

QueryWeapon1(piecenum)
{
	if( gun_1 == 0 )
	{
		piecenum = leftflare;
	}
        if( gun_1 == 1 )
	{
		piecenum = rightflare;
	}
}

AimSecondary(heading, pitch)
{
	bMoving = FALSE;
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	turn maintorso to y-axis heading speed <150.000000>;
	turn leftcannon to x-axis <0.000000> - pitch speed <40.000000>;
	turn rightcannon to x-axis <0.000000> - pitch speed <40.000000>;
	wait-for-turn maintorso around y-axis;
	wait-for-turn leftcannon around x-axis;
	wait-for-turn rightcannon around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireSecondary()
{
	if( gun_2 == 0 )
	{
		show leftflare;
		sleep 150;
		hide leftflare;
	}
	if( gun_2 == 1 )
	{
		show rightflare;
		sleep 150;
		hide rightflare;
	}
	gun_2 = !gun_2;
	bMoving = TRUE;
}

QuerySecondary(piecenum)
{
	if( gun_2 == 0 )
	{
		piecenum = secfirea;
	}
	if( gun_2 == 1 )
	{
		piecenum = secfireb;
	}
}

AimFromSecondary(piecenum)
{
	if( gun_2 == 0 )
	{
		piecenum = maintorso;
	}
	if( gun_2 == 1 )
	{
		piecenum = maintorso;
	}
}

AimTertiary(heading, pitch)
{
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;
	//bMoving = TRUE;
	while( !bMoving )
	{
		sleep 300;
	}
	turn maintorso to y-axis heading speed <150.000000>;
	wait-for-turn maintorso around y-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireTertiary()
{
	if( gun_3 == 0 )
	{
		sleep 150;
		gun_3 = leftupperleg;
		return (0);
	}
	if( gun_3 == 1 )
	{
		sleep 150;
		gun_3 = pelvis;
		return (0);
	}
}

QueryTertiary(piecenum)
{
	if( gun_3 == 0 )
	{
		piecenum = terfirea;
	}
	if( gun_3 == 1 )
	{
		piecenum = terfireb;
	}
}

AimFromTertiary(piecenum)
{
	piecenum = maintorso;
}

Killed(severity, corpsetype)
{
	hide leftflare;
	hide rightflare;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode pelvis type NOHEATCLOUD | BITMAPONLY | BITMAP1;
		explode leftupperleg type NOHEATCLOUD | BITMAPONLY | BITMAP2;
		explode leftlowerleg type NOHEATCLOUD | BITMAPONLY | BITMAP3;
		explode leftfoot type NOHEATCLOUD | BITMAPONLY | BITMAP4;
		explode lefttoea type NOHEATCLOUD | BITMAPONLY | BITMAP5;
		explode lefttoeb type NOHEATCLOUD | BITMAPONLY | BITMAP1;
		explode lefttoec type NOHEATCLOUD | BITMAPONLY | BITMAP2;
		explode rightupperleg type NOHEATCLOUD | BITMAPONLY | BITMAP3;
		explode rightlowerleg type NOHEATCLOUD | BITMAPONLY | BITMAP4;
		explode rightfoot type NOHEATCLOUD | BITMAPONLY | BITMAP5;
		explode righttoea type NOHEATCLOUD | BITMAPONLY | BITMAP1;
		explode righttoeb type NOHEATCLOUD | BITMAPONLY | BITMAP2;
		explode righttoec type NOHEATCLOUD | BITMAPONLY | BITMAP3;
		explode maintorso type NOHEATCLOUD | BITMAPONLY | BITMAP4;
		explode leftcannon type NOHEATCLOUD | BITMAPONLY | BITMAP5;
		explode leftflare type NOHEATCLOUD | BITMAPONLY | BITMAP1;
		explode rightcannon type NOHEATCLOUD | BITMAPONLY | BITMAP2;
		explode rightflare type NOHEATCLOUD | BITMAPONLY | BITMAP3;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode pelvis type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode leftupperleg type NOHEATCLOUD | FALL | BITMAP2;
		explode leftlowerleg type NOHEATCLOUD | FALL | BITMAP3;
		explode leftfoot type NOHEATCLOUD | FALL | BITMAP4;
		explode lefttoea type NOHEATCLOUD | FALL | BITMAP5;
		explode lefttoeb type NOHEATCLOUD | FALL | BITMAP1;
		explode lefttoec type NOHEATCLOUD | FALL | BITMAP2;
		explode rightupperleg type NOHEATCLOUD | FALL | BITMAP3;
		explode rightlowerleg type NOHEATCLOUD | FALL | BITMAP4;
		explode rightfoot type NOHEATCLOUD | FALL | BITMAP5;
		explode righttoea type NOHEATCLOUD | FALL | BITMAP1;
		explode righttoeb type NOHEATCLOUD | FALL | BITMAP2;
		explode righttoec type NOHEATCLOUD | FALL | BITMAP3;
		explode maintorso type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode leftcannon type NOHEATCLOUD | FALL | BITMAP5;
		explode leftflare type NOHEATCLOUD | FALL | BITMAP1;
		explode rightcannon type NOHEATCLOUD | FALL | BITMAP2;
		explode rightflare type NOHEATCLOUD | FALL | BITMAP3;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode pelvis type NOHEATCLOUD | SHATTER | BITMAP1;
		explode leftupperleg type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode leftlowerleg type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode leftfoot type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode lefttoea type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode lefttoeb type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode lefttoec type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode rightupperleg type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode rightlowerleg type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode rightfoot type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode righttoea type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode righttoeb type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode righttoec type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode maintorso type NOHEATCLOUD | SHATTER | BITMAP4;
		explode leftcannon type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode leftflare type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode rightcannon type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode rightflare type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		return (corpsetype);
	}
	corpsetype = 3;
	explode pelvis type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode leftupperleg type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode leftlowerleg type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode leftfoot type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode lefttoea type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode lefttoeb type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode lefttoec type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode rightupperleg type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode rightlowerleg type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode rightfoot type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode righttoea type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode righttoeb type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode righttoec type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode maintorso type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT | BITMAP4;
	explode leftcannon type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode leftflare type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode rightcannon type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode rightflare type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	return (corpsetype);
}
