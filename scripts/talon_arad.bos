#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, beam, blocker, top, t1, t2, t3,
       t4, t5, t6, peddle1, peddle2, peddle3, topclosed, peddle4,
       peddle5, peddle6;

static-var  Static_Var_1, Static_Var_2;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Go()
{
	set ARMORED to 0;
	dont-cache topclosed;
	move beam to y-axis [14.] speed [5.];
	wait-for-move beam along y-axis;
	show peddle1;
	show peddle2;
	show peddle3;
	show peddle4;
	show peddle5;
	show peddle6;
	show top;
	hide topclosed;
	turn peddle1 to x-axis <-120.> speed <50.>;
	turn peddle2 to x-axis <120.> speed <50.>;
	turn peddle3 to x-axis <120.> speed <50.>;
	turn peddle4 to x-axis <120.> speed <50.>;
	turn peddle5 to x-axis <-120.> speed <50.>;
	turn peddle6 to x-axis <-120.> speed <50.>;
	wait-for-turn peddle6 around x-axis;
	spin top around y-axis speed <25.>;
}

Stop()
{
	stop-spin top around y-axis;
	turn top to y-axis <0.> speed <75.>;
	turn peddle1 to x-axis <0.> speed <33.>;
	turn peddle2 to x-axis <0.> speed <33.>;
	turn peddle3 to x-axis <0.> speed <33.>;
	turn peddle4 to x-axis <0.> speed <33.>;
	turn peddle5 to x-axis <0.> speed <33.>;
	turn peddle6 to x-axis <0.> speed <33.>;
	wait-for-turn peddle6 around x-axis;
	hide peddle1;
	hide peddle2;
	hide peddle3;
	hide peddle4;
	hide peddle5;
	hide peddle6;
	hide top;
	show topclosed;
	wait-for-turn top around y-axis;
	move beam to y-axis [0.] speed [5.];
	wait-for-move beam along y-axis;
	cache topclosed;
	set ARMORED to 1;
}

InitState()
{
	Static_Var_1 = 1;
	Static_Var_2 = 0;
}

RequestState(requestedstate, currentstate)
{
	if( Static_Var_2 )
	{
		Static_Var_1 = requestedstate;
		return (0);
	}
	Static_Var_2 = 1;
	currentstate = Static_Var_1;
	Static_Var_1 = requestedstate;
	while( Static_Var_1 != currentstate )
	{
		if( Static_Var_1 == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( Static_Var_1 == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	Static_Var_2 = 0;
}

Create()
{
	dont-shade body;
	dont-shade peddle1;
	dont-shade peddle2;
	dont-shade peddle3;
	dont-shade peddle4;
	dont-shade peddle5;
	dont-shade peddle6;
	dont-shade topclosed;
	dont-cache beam;
	dont-cache peddle1;
	dont-cache peddle2;
	dont-cache peddle3;
	dont-cache peddle4;
	dont-cache peddle5;
	dont-cache peddle6;
	dont-cache top;
	hide peddle1;
	hide peddle2;
	hide peddle3;
	hide peddle4;
	hide peddle5;
	hide peddle6;
	hide top;
	dont-shade beam;
	dont-shade top;
	dont-cache blocker;
	dont-shade blocker;
	hide beam;
	hide blocker;
	turn t1 to y-axis <-60.> now;
	turn t2 to y-axis <60.> now;
	turn t5 to y-axis <60.> now;
	turn t4 to y-axis <-60.> now;
	call-script InitState();
	start-script SmokeUnit();
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 1000;
	}
	show beam;
	show blocker;
}

HitByWeapon(anglex, anglez)
{
	signal 2;
	set-signal-mask 2;
	if( !get BUILD_PERCENT_LEFT )
	{
		set ACTIVATION to 0;
		sleep 8000;
		set ACTIVATION to 1;
	}
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode body type BITMAPONLY | BITMAP1;
		explode top type BITMAPONLY | BITMAP1;
		explode beam type BITMAPONLY | BITMAP2;
		explode peddle1 type BITMAPONLY | BITMAP3;
		explode peddle2 type BITMAPONLY | BITMAP2;
		explode peddle3 type BITMAPONLY | BITMAP3;
		explode peddle4 type BITMAPONLY | BITMAP4;
		explode peddle5 type BITMAPONLY | BITMAP3;
		explode peddle6 type SHATTER | BITMAP2;
		explode t1 type BITMAPONLY | BITMAP3;
		explode t2 type BITMAPONLY | BITMAP2;
		explode t3 type BITMAPONLY | BITMAP3;
		explode t4 type BITMAPONLY | BITMAP4;
		explode t5 type BITMAPONLY | BITMAP3;
		explode t6 type FALL | FIRE | SMOKE | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type NOHEATCLOUD;
		explode body type SHATTER;
		explode top type SHATTER;
		explode beam type NOHEATCLOUD;
		explode peddle1 type NOHEATCLOUD;
		explode peddle2 type SHATTER;
		explode peddle3 type SHATTER;
		explode peddle4 type NOHEATCLOUD;
		explode peddle5 type NOHEATCLOUD;
		explode peddle6 type SHATTER;
		explode t1 type NOHEATCLOUD;
		explode t2 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
		explode t3 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
		explode t4 type NOHEATCLOUD;
		explode t5 type NOHEATCLOUD;
		explode t6 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type NOHEATCLOUD;
		explode body type SHATTER;
		explode top type SHATTER;
		explode beam type NOHEATCLOUD;
		explode peddle1 type NOHEATCLOUD;
		explode peddle2 type SHATTER;
		explode peddle3 type SHATTER;
		explode peddle4 type NOHEATCLOUD;
		explode peddle5 type NOHEATCLOUD;
		explode peddle6 type SHATTER;
		explode t1 type NOHEATCLOUD;
		explode t2 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
		explode t3 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
		explode t4 type NOHEATCLOUD;
		explode t5 type NOHEATCLOUD;
		explode t6 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
		return (corpsetype);
	}
	corpsetype = 3;
		explode base type NOHEATCLOUD;
		explode body type SHATTER;
		explode top type SHATTER;
		explode beam type NOHEATCLOUD;
		explode peddle1 type NOHEATCLOUD;
		explode peddle2 type SHATTER;
		explode peddle3 type SHATTER;
		explode peddle4 type NOHEATCLOUD;
		explode peddle5 type NOHEATCLOUD;
		explode peddle6 type SHATTER;
		explode t1 type NOHEATCLOUD;
		explode t2 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
		explode t3 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
		explode t4 type NOHEATCLOUD;
		explode t5 type NOHEATCLOUD;
		explode t6 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
		return (corpsetype);
}
