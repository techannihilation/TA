#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, stand, anti, tracks_animated, door, spinner, tracks_reverse, tracks_move;

static-var  Static_Var_1, Static_Var_2;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

HitByWeapon(anglex, anglez)
{
	signal 8;
	set-signal-mask 8;
	turn base to z-axis anglez speed <105.>;
	turn base to x-axis anglex speed <105.>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.> speed <30.>;
	turn base to x-axis <0.> speed <30.>;
}

Create()
{
	Static_Var_1 = 0;
	Static_Var_2 = 10000;

	while( get BUILD_PERCENT_LEFT )
	{
		sleep 1;
	}
	start-script SmokeUnit();
}

RestoreAfterDelay()
{
	sleep Static_Var_2;
	set-signal-mask 0;
	turn stand to x-axis <0.000000> speed <100.000000>;
	wait-for-turn stand around x-axis;
	move door to x-axis [0.000000] speed [10.000000];
	wait-for-move door along x-axis;
	//show missile;
}

AimPrimary(heading, pitch)
{
	signal 2;
	set-signal-mask 2;
	
	move door to x-axis [-3.500000] speed [20.000000];
	wait-for-move door along x-axis;
	
	turn stand to x-axis <-90.000000> speed <120.000000>;
	wait-for-turn stand around x-axis;
	
	sleep 250;
	
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	sleep 250;
}

QueryPrimary(piecenum)
{
	piecenum = anti;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type NOHEATCLOUD;
		explode stand type NOHEATCLOUD;
		explode tracks_animated type NOHEATCLOUD;
		explode body type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type NOHEATCLOUD;
		explode stand type SHATTER | NOHEATCLOUD;
			explode tracks_animated type NOHEATCLOUD;
		explode body type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type NOHEATCLOUD;
		explode stand type SHATTER | EXPLODE_ON_HIT | NOHEATCLOUD;
		explode tracks_animated type NOHEATCLOUD;
		explode body type NOHEATCLOUD;
		return (corpsetype);
	}
	corpsetype = 3;
	explode base type NOHEATCLOUD;
	explode stand type SHATTER | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode tracks_animated type NOHEATCLOUD;
	explode body type NOHEATCLOUD;
	return (corpsetype);
}
