#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, turret, post, nano, lathe, beam, leg1, leg2,
       leg3, leg4, leg5, leg6;

static-var  bMoving, Static_Var_2, Static_Var_3, Static_Var_4, Static_Var_5;

// Signal definitions
#define SIG_MOVE			8


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

RequestState(requestedstate, currentstate)
{
	while( !Static_Var_4 AND Static_Var_3 != Static_Var_5 )
	{
		Static_Var_4 = 1;
		if( Static_Var_3 AND !Static_Var_5 )
		{
			move post to y-axis [3.100000] speed [6.200000];
			sleep 250;
			turn nano to x-axis <120.000000> speed <270.000000>;
			sleep 450;
			move lathe to z-axis [-3.200000] speed [8.000000];
			turn nano to x-axis <179.895604> speed <120.000000>;
			sleep 500;
			turn turret to y-axis Static_Var_2 speed <160.000000>;
			wait-for-turn turret around y-axis;
			set INBUILDSTANCE to 1;
			Static_Var_5 = 1;
		}
		if( !Static_Var_3 AND Static_Var_5 )
		{
			Static_Var_5 = 0;
			set INBUILDSTANCE to 0;
			turn turret to y-axis <0.000000> speed <160.000000>;
			move lathe to z-axis [0.000000] speed [8.000000];
			sleep 500;
			turn nano to x-axis <60.000000> speed <270.000000>;
			sleep 450;
			turn nano to x-axis <0.000000> speed <120.000000>;
			move post to y-axis [0.000000] speed [6.200000];
			sleep 500;
		}
	}
	Static_Var_4 = 0;
}

Create()
{
	bMoving = FALSE;
	Static_Var_2 = 0;
	Static_Var_3 = 1;
	Static_Var_4 = 0;
	Static_Var_5 = 0;
	start-script SmokeUnit();
}

StartBuilding(Func_Var_1)
{
	Static_Var_2 = Func_Var_1;
	Static_Var_3 = 1;
	start-script RequestState();
}

StopBuilding()
{
	Static_Var_3 = 0;
	sleep 3000;
	if( !Static_Var_3 )
	{
		start-script RequestState();
	}
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	bMoving = TRUE;
	while( bMoving )
	{
		if( bMoving )
		{
			turn leg1 to y-axis <43.000000> now;
			turn leg1 to y-axis <0.000000> speed <218.000000>;
			turn leg1 to z-axis <0.000000> now;
			turn leg1 to z-axis <0.000000> speed <3.000000>;
			turn leg2 to z-axis <0.000000> now;
			turn leg2 to z-axis <29.005495> speed <155.000000>;
			turn leg3 to y-axis <21.000000> now;
			turn leg3 to y-axis <12.000000> speed <12.000000>;
			turn leg3 to x-axis <-25.005495> now;
			turn leg3 to x-axis <0.000000> speed <185.000000>;
			turn leg4 to y-axis <-40.000000> now;
			turn leg4 to y-axis <-39.000000> speed <1.000000>;
			turn leg4 to z-axis <-30.005495> now;
			turn leg4 to z-axis <0.000000> speed <152.000000>;
			turn leg5 to y-axis <-39.000000> now;
			turn leg5 to y-axis <5.000000> speed <185.000000>;
			turn leg5 to z-axis <0.000000> now;
			turn leg5 to z-axis <0.000000> speed <1.000000>;
			turn leg6 to y-axis <0.000000> now;
			turn leg6 to y-axis <-52.005495> speed <80.000000>;
			turn leg6 to x-axis <-30.005495> now;
			sleep 200;
		}
		if( bMoving )
		{
			turn leg1 to z-axis <31.005495> speed <158.000000>;
			turn leg2 to y-axis <13.000000> speed <198.000000>;
			turn leg2 to z-axis <31.005495> speed <1.000000>;
			turn leg3 to y-axis <0.000000> speed <246.000000>;
			turn leg3 to x-axis <0.000000> speed <3.000000>;
			turn leg4 to y-axis <0.000000> speed <200.000000>;
			turn leg5 to z-axis <-31.005495> speed <155.000000>;
			turn leg6 to x-axis <4.000000> speed <140.000000>;
			sleep 200;
		}
		if( bMoving )
		{
			turn leg1 to y-axis <55.005495> speed <279.000000>;
			turn leg1 to z-axis <31.005495> speed <3.000000>;
			turn leg2 to y-axis <14.000000> speed <1.000000>;
			turn leg2 to z-axis <0.000000> speed <152.000000>;
			turn leg3 to x-axis <-25.005495> speed <185.000000>;
			turn leg4 to y-axis <0.000000> speed <3.000000>;
			turn leg4 to z-axis <-31.005495> speed <152.000000>;
			turn leg5 to y-axis <-34.000000> speed <158.000000>;
			turn leg5 to z-axis <-31.005495> speed <1.000000>;
			turn leg6 to y-axis <12.000000> speed <133.000000>;
			sleep 200;
		}
		if( bMoving )
		{
			turn leg1 to y-axis <43.000000> speed <60.000000>;
			turn leg1 to z-axis <0.000000> speed <152.000000>;
			turn leg2 to y-axis <0.000000> speed <200.000000>;
			turn leg2 to z-axis <0.000000> speed <3.000000>;
			turn leg3 to y-axis <21.000000> speed <244.000000>;
			turn leg3 to x-axis <-25.005495> speed <0.000000>;
			turn leg4 to y-axis <-40.000000> speed <197.000000>;
			turn leg4 to z-axis <-31.005495> speed <0.000000>;
			turn leg5 to y-axis <-39.000000> speed <27.000000>;
			turn leg5 to z-axis <0.000000> speed <155.000000>;
			turn leg6 to y-axis <0.000000> speed <7.000000>;
			turn leg6 to x-axis <-30.005495> speed <160.000000>;
			sleep 200;
		}
	}
}

StopMoving()
{
	bMoving = FALSE;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

QueryNanoPiece(piecenum)
{
	piecenum = beam;
}

TargetHeading(Func_Var_1)
{
	Static_Var_2 = 0 - Func_Var_1;
}

Killed(severity, corpsetype)
{
	hide nano;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type NOHEATCLOUD;
		explode nano type NOHEATCLOUD;
		explode lathe type NOHEATCLOUD;
		explode leg1 type NOHEATCLOUD;
		explode leg2 type NOHEATCLOUD;
		explode leg3 type NOHEATCLOUD;
		explode leg4 type NOHEATCLOUD;
		explode leg5 type NOHEATCLOUD;
		explode leg6 type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type NOHEATCLOUD;
		explode nano type NOHEATCLOUD | SHATTER;
		explode lathe type NOHEATCLOUD;
		explode leg1 type NOHEATCLOUD | FALL;
		explode leg2 type NOHEATCLOUD | FALL;
		explode leg3 type NOHEATCLOUD | FALL;
		explode leg4 type NOHEATCLOUD | FALL;
		explode leg5 type NOHEATCLOUD | FALL;
		explode leg6 type NOHEATCLOUD | FALL;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type NOHEATCLOUD;
		explode nano type NOHEATCLOUD | SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode lathe type NOHEATCLOUD;
		explode leg1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode leg2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode leg3 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode leg4 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode leg5 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode leg6 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		return (corpsetype);
	}
	corpsetype = 3;
	explode base type NOHEATCLOUD;
	explode nano type NOHEATCLOUD | SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode lathe type NOHEATCLOUD;
	explode leg1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode leg2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode leg3 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode leg4 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode leg5 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode leg6 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	return (corpsetype);
}
