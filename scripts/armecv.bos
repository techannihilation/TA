#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, beam1, arm2, beam2, door1, door2, plate, arm1, nano2, nano1, turret2, turret1, tracka1, tracka2, trackb1, trackb2;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, poo;


track_tracks()
{
	var pre;
	var now;
	pre = get XZ_ATAN(-419);
	var dif;
	while(1)
	{
		now = get XZ_ATAN(-419);
		dif = (pre - now)*4;

		turn tracka1 to y-axis dif speed <100>;
		turn tracka2 to y-axis dif speed <100>;
		turn trackb1 to y-axis 0 - dif speed <100>;
		turn trackb2 to y-axis 0 - dif speed <100>;
		sleep 100;
		pre = now;
	}
}

activatescr()
{
	turn door1 to z-axis <0.000000> now;
	turn door1 to z-axis <-65.714286> speed <154.258242>;
	turn door2 to z-axis <0.000000> now;
	turn door2 to z-axis <65.263736> speed <153.203297>;
	sleep 426;
	move door1 to x-axis [-0.5] speed [7.242987];
	move door2 to x-axis [00.5] speed [7.242987];
	move door1 to y-axis [-5.099994] speed [7.242987];
	move door2 to y-axis [-5.050000] speed [7.126172];
	sleep 428;
	move plate to y-axis [7.07504] speed [8.878510];
	sleep 428;
	turn arm1 to x-axis <85.967033> speed <200.395604>;
	turn nano1 to x-axis <-69.763736> speed <162.626374>;
	turn arm2 to x-axis <85.967033> speed <200.395604>;
	turn nano2 to x-axis <-69.763736> speed <162.626374>;
	sleep 430;
}

deactivatescr()
{
	set INBUILDSTANCE to 0;
	turn turret1 to y-axis <0.000000> speed <160.000000>;
	turn turret2 to y-axis <0.000000> speed <160.000000>;
	wait-for-turn turret1 around y-axis;
	turn arm1 to x-axis <0.000000> speed <221.571429>;
	turn nano1 to x-axis <-69.763736> now;
	turn nano1 to x-axis <0.000000> speed <179.807692>;
	turn arm2 to x-axis <85.967033> now;
	turn arm2 to x-axis <0.000000> speed <221.571429>;
	turn nano2 to x-axis <-69.763736> now;
	turn nano2 to x-axis <0.000000> speed <179.807692>;
	sleep 388;
	move plate to y-axis [0.000000] speed [9.768646];
	sleep 389;
	move door1 to y-axis [0.000000] speed [7.969147];
	move door2 to y-axis [0.000000] speed [7.840619];
	move door1 to x-axis [0] speed [3.242987];
	move door2 to x-axis [0] speed [3.242987];
	sleep 390;
	turn door1 to z-axis <0.000000> speed <160.000000>;
	turn door2 to z-axis <0.000000> speed <160.000000>;
	sleep 390;

}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	var Func_Var_4;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			Func_Var_4 = Rand( 1, 2 );
			if( Func_Var_4 == 1 )
			{
				emit-sfx smoketype from door1;
			}
			if( Func_Var_4 == 2 )
			{
				emit-sfx smoketype from door2;
			}
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

RequestState(requestedstate, currentstate)
{
	if( Static_Var_2  )
	{
		Static_Var_1 = requestedstate;
		return (0);
	}
	Static_Var_2 = 1;
	currentstate = Static_Var_1;
	Static_Var_1 = requestedstate;
	while( Static_Var_1 != currentstate )
	{
		if( Static_Var_1 )
		{
			call-script deactivatescr();
			currentstate = 1;
			Static_Var_3 = 1;
		}
		else
		{
			call-script activatescr();
			currentstate = 0;
			Static_Var_3 = 0;
		}
	}
	Static_Var_2 = 0;
}

Create()
{
	Static_Var_3 = 1;
	Static_Var_1 = 1;
	Static_Var_2 = 0;
	start-script SmokeUnit();
	poo = 0;
	start-script track_tracks();
}

Activate()
{
	start-script RequestState(0);
}

Desactivate()
{
	start-script RequestState(1);
}

StartBuilding(Func_Var_1, Func_Var_2)
{
	start-script RequestState(0);
	while( Static_Var_3 )
	{
		sleep 100;
	}
	signal 4;
	turn turret1 to y-axis Func_Var_1 speed <160.000000>;
	turn turret2 to y-axis Func_Var_1 speed <160.000000>;
	wait-for-turn turret1 around y-axis;
	wait-for-turn turret2 around y-axis;
	set INBUILDSTANCE to 1;
}

StopBuilding()
{
	signal 4;
	set-signal-mask 4;
	sleep 6000;
	set-signal-mask 0;
	signal 4;
	start-script RequestState(1);
}

QueryNanoPiece(piecenum)
{
	if( poo == 0 )
	{
		piecenum = beam1;
	}
	if( poo == 1 )
	{
		piecenum = beam2;
	}
	poo = !poo;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode arm1 type NOHEATCLOUD;
		explode base type NOHEATCLOUD;
		explode nano2 type NOHEATCLOUD;
		explode beam2 type NOHEATCLOUD;
		explode door1 type NOHEATCLOUD;
		explode door2 type NOHEATCLOUD;
		explode turret1 type NOHEATCLOUD;
		explode plate type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode arm1 type NOHEATCLOUD | FALL;
		explode base type NOHEATCLOUD | FALL;
		explode nano2 type NOHEATCLOUD | FALL;
		explode beam2 type NOHEATCLOUD | FALL;
		explode door1 type NOHEATCLOUD | FALL;
		explode door2 type NOHEATCLOUD | FALL;
		explode turret1 type NOHEATCLOUD | FALL;
		explode plate type NOHEATCLOUD | FALL;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode arm1 type NOHEATCLOUD | FALL| SMOKE | FIRE | EXPLODE_ON_HIT;
		explode base type NOHEATCLOUD | FALL| SMOKE | FIRE | EXPLODE_ON_HIT;
		explode nano2 type NOHEATCLOUD | FALL| SMOKE | FIRE | EXPLODE_ON_HIT;
		explode beam2 type NOHEATCLOUD | FALL| SMOKE | FIRE | EXPLODE_ON_HIT;
		explode door1 type NOHEATCLOUD | FALL| SMOKE | FIRE | EXPLODE_ON_HIT;
		explode door2 type NOHEATCLOUD | FALL| SMOKE | FIRE | EXPLODE_ON_HIT;
		explode turret1 type NOHEATCLOUD | FALL| SMOKE | FIRE | EXPLODE_ON_HIT;
		explode plate type NOHEATCLOUD | FALL| SMOKE | FIRE | EXPLODE_ON_HIT;
		return (corpsetype);
	}
	corpsetype = 3;
		explode arm1 type NOHEATCLOUD | FALL| SMOKE | FIRE | EXPLODE_ON_HIT;
		explode base type NOHEATCLOUD | FALL| SMOKE | FIRE | EXPLODE_ON_HIT;
		explode nano2 type NOHEATCLOUD | FALL| SMOKE | FIRE | EXPLODE_ON_HIT;
		explode beam2 type NOHEATCLOUD | FALL| SMOKE | FIRE | EXPLODE_ON_HIT;
		explode door1 type NOHEATCLOUD | FALL| SMOKE | FIRE | EXPLODE_ON_HIT;
		explode door2 type NOHEATCLOUD | FALL| SMOKE | FIRE | EXPLODE_ON_HIT;
		explode turret1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode plate type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		return (corpsetype);
}