#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, turret, sleeve, barrel1, barrel2, flare1, flare2, flame, flamer_sleeve, flamer_turret,
		wakes, wake1, wake2, wake3, wake4, wake5, wake6, wake7, wake8, engine, support;

static-var  Static_Var_1, restore_delay, gun, bAiming;

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_2			4


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

lua_FlameShot(Func_Var_1)
{

}

StartMoving()
{
	signal 16;
	set-signal-mask 16;
	var Func_Var_1, Func_Var_2;
	Func_Var_1 = 3;
	Func_Var_2 = 4;
	while( TRUE )
	{
		if( Static_Var_1 == 1 )
		{
			emit-sfx Func_Var_1 from wake1;
			emit-sfx Func_Var_1 from wake2;
			emit-sfx Func_Var_1 from wake3;
			emit-sfx Func_Var_1 from wake4;
			emit-sfx Func_Var_1 from wake5;
			emit-sfx Func_Var_1 from wake6;
			emit-sfx Func_Var_1 from wake7;
			emit-sfx Func_Var_1 from wake8;
			emit-sfx Func_Var_2 from wake1;
			emit-sfx Func_Var_2 from wake2;
			emit-sfx Func_Var_2 from wake3;
			emit-sfx Func_Var_2 from wake4;
			emit-sfx Func_Var_2 from wake5;
			emit-sfx Func_Var_2 from wake6;
			emit-sfx Func_Var_2 from wake7;
			emit-sfx Func_Var_2 from wake8;
		}
		if( Static_Var_1 == 2 )
		{
			emit-sfx Func_Var_1 from wake1;
			emit-sfx Func_Var_1 from wake2;
			emit-sfx Func_Var_1 from wake3;
			emit-sfx Func_Var_1 from wake4;
			emit-sfx Func_Var_1 from wake5;
			emit-sfx Func_Var_1 from wake6;
			emit-sfx Func_Var_1 from wake7;
			emit-sfx Func_Var_1 from wake8;
			emit-sfx Func_Var_2 from wake1;
			emit-sfx Func_Var_2 from wake2;
			emit-sfx Func_Var_2 from wake3;
			emit-sfx Func_Var_2 from wake4;
			emit-sfx Func_Var_2 from wake5;
			emit-sfx Func_Var_2 from wake6;
			emit-sfx Func_Var_2 from wake7;
			emit-sfx Func_Var_2 from wake8;
		}
		if( Static_Var_1 == 3 )
		{
			emit-sfx Func_Var_1 from wake1;
			emit-sfx Func_Var_1 from wake2;
			emit-sfx Func_Var_1 from wake3;
			emit-sfx Func_Var_1 from wake4;
			emit-sfx Func_Var_1 from wake5;
			emit-sfx Func_Var_1 from wake6;
			emit-sfx Func_Var_1 from wake7;
			emit-sfx Func_Var_1 from wake8;
			emit-sfx Func_Var_2 from wake1;
			emit-sfx Func_Var_2 from wake2;
			emit-sfx Func_Var_2 from wake3;
			emit-sfx Func_Var_2 from wake4;
			emit-sfx Func_Var_2 from wake5;
			emit-sfx Func_Var_2 from wake6;
			emit-sfx Func_Var_2 from wake7;
			emit-sfx Func_Var_2 from wake8;
		}
		sleep 300;
	}
}

StopMoving()
{
}

setSFXoccupy(state)
{
	Static_Var_1 = state;
}

RockUnit(anglex, anglez)
{
	turn base to x-axis anglex/3 speed <15.>;
	turn base to z-axis anglez/3 speed <15.>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.> speed <5.>;
	turn base to x-axis <0.> speed <5.>;
}

PilotLight(Func_Var_1)
{
	while( TRUE )
	{
		while( bAiming )
		{
			sleep 100;
		}
		emit-sfx 1025 + 0 from flame;
		sleep 155;
	}
}

Create()
{	
	restore_delay = 3000;
	gun = 0;
	start-script PilotLight();
	start-script SmokeUnit();
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

RestorePrimary()
{
	sleep restore_delay;
	turn turret to y-axis <0.000000> speed <40.000000>;
	turn sleeve to x-axis <0.000000> speed <20.000000>;
}

RestoreSecondary()
{
	sleep restore_delay;
	turn flamer_turret to y-axis <0.> speed <80.000000>;
	turn flamer_sleeve to x-axis <0.> speed <40.000000>;
	bAiming = FALSE;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <75.000000>;
	turn sleeve to x-axis <0.> - pitch speed <75.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeve around x-axis;
	start-script RestorePrimary();
	return (1);
}

FirePrimary()
{

	if(gun == 0)
	{
		emit-sfx 1024 + 0 from flare1;
		move barrel1 to z-axis [-2.000000] speed [500.000000];
		sleep 250;
		move barrel1 to z-axis [0.000000] speed [1.000000];
	}
	if(gun == 1)
	{
		emit-sfx 1024 + 0 from flare2;
		move barrel2 to z-axis [-2.000000] speed [500.000000];
		sleep 250;
		move barrel2 to z-axis [0.000000] speed [1.000000];
	}
	++gun;
	if(gun == 2)
	{
		gun = 0;
	}
	
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

QueryPrimary(piecenum)
{
	if (gun == 0) 
	{
		piecenum = flare1;
	}
	if (gun == 1) 
	{
		piecenum = flare2;
	}
}


AimSecondary(heading, pitch)
{	
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	bAiming = TRUE;
	turn flamer_turret to y-axis heading speed <125.000000>;
	turn flamer_sleeve to x-axis <0.> - pitch speed <75.000000>;
	wait-for-turn flamer_turret around y-axis;
	wait-for-turn flamer_sleeve around x-axis;
	start-script RestoreSecondary();
	return (1);	
}

AimFromSecondary(piecenum)
{
	piecenum = flamer_turret;
}

QuerySecondary(piecenum)
{
	piecenum = flame;
}

Shot2()
{
	call-script lua_FlameShot(2);
	return (1);
}

SweetSpot(piecenum)
{
	piecenum = body;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode body type NOHEATCLOUD;
		explode body type NOHEATCLOUD;
		explode turret type NOHEATCLOUD;
		explode flamer_turret type NOHEATCLOUD;
		explode sleeve type NOHEATCLOUD;
		explode barrel1 type NOHEATCLOUD;
		explode flamer_sleeve type NOHEATCLOUD;
		explode engine type NOHEATCLOUD;
		explode support type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode body type NOHEATCLOUD;
		explode turret type NOHEATCLOUD | FALL;
		explode flamer_turret type NOHEATCLOUD | FALL;
		explode sleeve type NOHEATCLOUD | FALL;
		explode barrel1 type NOHEATCLOUD | FALL;
		explode flamer_sleeve type NOHEATCLOUD | FALL;
		explode engine type NOHEATCLOUD | FALL;
		explode support type NOHEATCLOUD | FALL;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode body type NOHEATCLOUD;
		explode turret type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode flamer_turret type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode sleeve type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode barrel1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode flamer_sleeve type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode engine type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode support type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		return (corpsetype);
	}
	corpsetype = 3;
		explode body type NOHEATCLOUD;
		explode turret type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode flamer_turret type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode sleeve type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode barrel1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode flamer_sleeve type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode engine type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode support type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	return (corpsetype);
}
