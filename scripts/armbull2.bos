#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  flareA1, flareA2, turretA, base, canonA1, canonA2, pivot, turretB,
       barrelA1, barrelA2, flareB2, canonB2, barrelB2, flareB1, canonB1, barrelB1,
       ground;

static-var  restore_delay, gun_1, gun_2;

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_2			4


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

HitByWeapon(anglex, anglez)
{
	turn base to z-axis anglez speed <105.000000>;
	turn base to x-axis anglex speed <105.000000>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <30.000000>;
	turn base to x-axis <0.000000> speed <30.000000>;
}

RockUnit(anglex, anglez)
{
	turn base to x-axis anglex speed <50.000000>;
	turn base to z-axis anglez speed <50.000000>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <20.000000>;
	turn base to x-axis <0.000000> speed <20.000000>;
}

Create()
{
	hide flareA1;
	hide flareA2;
	gun_1 = flareA1;
	gun_2 = flareA1;
	restore_delay = 3000;
	start-script SmokeUnit();
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

RestoreAfterDelay1()
{
	sleep restore_delay;
	turn turretA to y-axis <0.000000> speed <35.000000>;
	turn canonA1 to x-axis <0.000000> speed <25.000000>;
	turn canonA2 to x-axis <0.000000> speed <25.000000>;
}

RestoreAfterDelay2()
{
	sleep restore_delay;
	turn pivot to y-axis <0.000000> speed <35.000000>;
	turn turretB to x-axis <0.000000> speed <25.000000>;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turretA to y-axis heading speed <75.000000>;
	turn canonA1 to x-axis <0.000000> - pitch speed <40.000000>;
	turn canonA2 to x-axis <0.000000> - pitch speed <40.000000>;
	wait-for-turn turretA around y-axis;
	wait-for-turn canonA1 around x-axis;
	wait-for-turn canonA2 around x-axis;
	start-script RestoreAfterDelay1();
	return (1);
}

AimSecondary(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	turn pivot to y-axis heading speed <125.000000>;
	turn turretB to x-axis <0.000000> - pitch speed <75.000000>;
	wait-for-turn pivot around y-axis;
	wait-for-turn turretB around x-axis;
	start-script RestoreAfterDelay2();
	return (1);
}

FirePrimary()
{
	if( gun_1 == 0 )
	{
		emit-sfx 1024 from flareA1;
		move barrelA1 to z-axis [-2.000000] speed [500.000000];
		sleep 150;
		wait-for-move barrelA1 along z-axis;
		move barrelA1 to z-axis [0.000000] speed [3.000000];
	}
	if( gun_1 == 1 )
	{
		emit-sfx 1024 from flareA2;
		move barrelA2 to z-axis [-2.000000] speed [500.000000];
		sleep 150;
		wait-for-move barrelA2 along z-axis;
		move barrelA2 to z-axis [0.000000] speed [3.000000];
	}
	gun_1 = !gun_1;
}

FireSecondary()
{
	if( gun_2 == 0 )
	{
		emit-sfx 1025 from flareB2;
		move canonB2 to z-axis [-1.000000] speed [200.000000];
		wait-for-move canonB2 along z-axis;
		move barrelB2 to z-axis [-2.000000] speed [100.000000];
		wait-for-move barrelB2 along z-axis;
		move canonB2 to z-axis [0.000000] speed [10.000000];
		move barrelB2 to z-axis [0.000000] speed [10.000000];
	}
	if( gun_2 == 1 )
	{
		emit-sfx 1025 from flareB1;
		move canonB1 to z-axis [-1.000000] speed [200.000000];
		wait-for-move canonB1 along z-axis;
		move barrelB1 to z-axis [-2.000000] speed [100.000000];
		wait-for-move barrelB1 along z-axis;
		move canonB1 to z-axis [0.000000] speed [10.000000];
		move barrelB1 to z-axis [0.000000] speed [10.000000];
	}
	gun_2 = !gun_2;
}

QueryPrimary(piecenum)
{
	piecenum = gun_1;
}

QuerySecondary(piecenum)
{
	if( gun_2 == 0 )
	{
		piecenum = flareB2;
	}
	if( gun_2 == 1 )
	{
		piecenum = flareB1;
	}
}

AimFromPrimary(piecenum)
{
	piecenum = turretA;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide flareA1;
	hide flareA2;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type NOHEATCLOUD;
		explode ground type NOHEATCLOUD;
		explode turretA type NOHEATCLOUD;
		explode turretB type NOHEATCLOUD;
		explode pivot type NOHEATCLOUD;
		explode canonA1 type NOHEATCLOUD;
		explode canonA2 type NOHEATCLOUD;
		explode canonB1 type NOHEATCLOUD;
		explode canonB2 type NOHEATCLOUD;
		explode barrelA1 type NOHEATCLOUD;
		explode barrelA2 type NOHEATCLOUD;
		explode barrelB1 type NOHEATCLOUD;
		explode barrelB2 type NOHEATCLOUD;
		explode flareA1 type NOHEATCLOUD | SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode flareA2 type NOHEATCLOUD | SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode flareB1 type NOHEATCLOUD;
		explode flareB2 type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type NOHEATCLOUD | FALL;
		explode ground type NOHEATCLOUD | SHATTER;
		explode turretA type NOHEATCLOUD | FALL;
		explode turretB type NOHEATCLOUD | FALL;
		explode pivot type NOHEATCLOUD | FALL;
		explode canonA1 type NOHEATCLOUD | FALL;
		explode canonA2 type NOHEATCLOUD | FALL;
		explode canonB1 type NOHEATCLOUD | FALL;
		explode canonB2 type NOHEATCLOUD | FALL;
		explode barrelA1 type NOHEATCLOUD | FALL;
		explode barrelA2 type NOHEATCLOUD | FALL;
		explode barrelB1 type NOHEATCLOUD | FALL;
		explode barrelB2 type NOHEATCLOUD | FALL;
		explode flareA1 type NOHEATCLOUD | SHATTER | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode flareA2 type NOHEATCLOUD | SHATTER | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode flareB1 type NOHEATCLOUD;
		explode flareB2 type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode ground type NOHEATCLOUD | SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode turretA type NOHEATCLOUD | SHATTER;
		explode turretB type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode pivot type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode canonA1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode canonA2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode canonB1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode canonB2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode barrelA1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode barrelA2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode barrelB1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode barrelB2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode flareA1 type NOHEATCLOUD | SHATTER | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode flareA2 type NOHEATCLOUD | SHATTER | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode flareB1 type NOHEATCLOUD;
		explode flareB2 type NOHEATCLOUD;
		return (corpsetype);
	}
	corpsetype = 3;
	explode base type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode ground type NOHEATCLOUD | SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode turretA type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	explode turretB type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode pivot type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode canonA1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode canonA2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode canonB1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode canonB2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode barrelA1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode barrelA2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode barrelB1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode barrelB2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode flareA1 type NOHEATCLOUD | SHATTER | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode flareA2 type NOHEATCLOUD | SHATTER | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode flareB1 type NOHEATCLOUD;
	explode flareB2 type NOHEATCLOUD;
	return (corpsetype);
}
