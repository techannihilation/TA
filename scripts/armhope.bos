#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, sleeve1, sleeve2, flare1, flare2, turret1, turret2,
		r1, r2, r3, r4, r5, r6, launch1, launch2, launch3, rA, rB, rC,
		m1, m2, m3, m4, m5, m6, m7, m8, missiles, starburst, electro1, electro2, wings;

static-var  gun_1, gun_2, gun_3, gun_4, RestoreDelay;

// Signal definitions
#define SIG_MOVE				2
#define SIG_AIM_1				4
#define SIG_AIM_2				8
#define SIG_AIM_3				16
#define SIG_AIM_4				32
#define SIG_AIM_5				64


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	gun_1 = 0;
	gun_2 = 0;
	gun_3 = 0;
	start-script SmokeUnit();
}

Restore1()
{
	sleep 5000;
	turn turret1 to y-axis <0.000000> speed <50.500000>;
	turn sleeve1 to x-axis <0.000000> speed <25.000000> ;
}

Restore2()
{
	sleep 5000;
	turn turret2 to y-axis <0.000000> speed <50.500000>;
	turn sleeve2 to x-axis <0.000000> speed <25.000000> ;
}


AimWeapon1(heading, pitch)
{
	signal SIG_AIM_1;
	set-signal-mask SIG_AIM_1;
	return(1);
}	

FireWeapon1()
{
		gun_1 = 0;
		sleep 100;
		gun_1 = 4;
		sleep 100;
		gun_1 = 1;
		sleep 100;
		gun_1 = 5;
		sleep 100;
		gun_1 = 2;
		sleep 100;
		gun_1 = 6;
		sleep 100;
		gun_1 = 3;
		sleep 100;
		gun_1 = 7;
		sleep 100;
}

AimFromWeapon1(piecenum)
{
	piecenum = missiles;
}

QueryWeapon1(piecenum)
{
	if( gun_1 == 0 )
	{
		piecenum = m1;
	}
	if( gun_1 == 1 )
	{
		piecenum = m2;
	}	
	if( gun_1 == 2 )
	{
		piecenum = m3;
	}	
	if( gun_1 == 3 )
	{
		piecenum = m4;
	}
	if( gun_1 == 4 )
	{
		piecenum = m5;
	}
	if( gun_1 == 5 )
	{
		piecenum = m6;
	}
	if( gun_1 == 6 )
	{
		piecenum = m7;
	}
	if( gun_1 == 7 )
	{
		piecenum = m8;
	}
}

AimWeapon2(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	turn turret1 to y-axis heading speed <65.000000>;
	turn sleeve1 to x-axis <0.000000> - pitch speed <35.000000> ;
	wait-for-turn turret1 around y-axis;
	wait-for-turn sleeve1 around x-axis;
	start-script Restore1();
	return(1);
}	

FireWeapon2()
{
}

AimFromWeapon2(piecenum)
{
	piecenum = turret1;
}

QueryWeapon2(piecenum)
{
	piecenum = flare1;
}

AimWeapon3(heading, pitch)
{
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;
	turn turret2 to y-axis heading speed <65.000000>;
	turn sleeve2 to x-axis <0.000000> - pitch speed <35.000000> ;
	wait-for-turn turret2 around y-axis;
	wait-for-turn sleeve2 around x-axis;
	start-script Restore2();
	return(1);
}	

FireWeapon3()
{
}

AimFromWeapon3(piecenum)
{
	piecenum = turret2;
}

QueryWeapon3(piecenum)
{
	piecenum = flare2;

}

AimWeapon4(heading, pitch)
{
	signal SIG_AIM_4;
	set-signal-mask SIG_AIM_4;
	return(1);
}	

FireWeapon4()
{
	++gun_2;
	if (gun_2 == 3) 
	{
		gun_2 = 0;
	}
}

AimFromWeapon4(piecenum)
{
	piecenum = starburst;
}

QueryWeapon4(piecenum)
{
	if (gun_2 == 0) 
	{
		piecenum = r1;
	}
	if (gun_2 == 1) 
	{
		piecenum = r2;
	}
	if (gun_2 == 2) 
	{
		piecenum = r3;
	}
}

AimWeapon5(heading, pitch)
{
	signal SIG_AIM_5;
	set-signal-mask SIG_AIM_5;
	return(1);
}	

FireWeapon5()
{
	++gun_3;
	if (gun_3 == 3) 
	{
		gun_3 = 0;
	}
}

AimFromWeapon5(piecenum)
{
	piecenum = starburst;
}

QueryWeapon5(piecenum)
{
	if (gun_3 == 0) 
	{
		piecenum = r4;
	}
	if (gun_3 == 1) 
	{
		piecenum = r5;
	}
	if (gun_3 == 2) 
	{
		piecenum = r6;
	}
}


SweetSpot(piecenum)
{
	piecenum = body;
}

Killed(severity, corpsetype)
{
	corpsetype = 3;
	explode body type FALL | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode turret1 type FALL | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode turret2 type FALL | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode sleeve1 type FALL | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode sleeve2 type FALL | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode wings type FALL | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode electro1 type FALL | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode electro2 type FALL | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode wings type FALL | EXPLODE_ON_HIT | NOHEATCLOUD;
	return (corpsetype);	
}
