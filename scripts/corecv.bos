#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, box, canopy, tread1, tread2, armbase1, armbase2, arm1,
       arm2, nano1, nano2, emit1, emit2, door1, door2, armtur1,
       armtur2;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4, poo;
	
SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);

}

activatescr()
{
	turn door1 to z-axis <-89.000000> speed <100.000000>;
	turn door2 to z-axis <89.000000> speed <100.000000>;
	wait-for-turn door1 around z-axis;
	wait-for-turn door2 around z-axis;
	move armbase1 to y-axis [1.000000] speed [3.000000];
	move armbase1 to x-axis [3.000000] speed [10.000000];
	move armbase2 to y-axis [1.000000] speed [3.000000];
	move armbase2 to x-axis [-3.000000] speed [10.000000];
	wait-for-move armbase1 along y-axis;
	wait-for-move armbase1 along x-axis;
	wait-for-move armbase2 along y-axis;
	wait-for-move armbase2 along x-axis;
	turn arm1 to x-axis <110.000000> speed <90.000000>;
	turn nano1 to x-axis <-90.000000> speed <90.000000>;
	turn arm2 to x-axis <110.000000> speed <90.000000>;
	turn nano2 to x-axis <-90.000000> speed <90.000000>;
	wait-for-turn arm1 around x-axis;
	wait-for-turn nano1 around x-axis;
	wait-for-turn arm2 around x-axis;
	wait-for-turn nano2 around x-axis;
	
}

deactivatescr()
{
	set INBUILDSTANCE to 0;
	turn armtur1 to y-axis <0.000000> speed <90.000000>;
	turn armtur2 to y-axis <0.000000> speed <90.000000>;
	wait-for-turn armtur1 around y-axis;
	wait-for-turn armtur2 around y-axis;
	turn nano1 to x-axis <0.000000> speed <90.000000>;
	turn arm1 to x-axis <0.000000> speed <90.000000>;
	turn nano2 to x-axis <0.000000> speed <90.000000>;
	turn arm2 to x-axis <0.000000> speed <90.000000>;
	wait-for-turn nano1 around x-axis;
	wait-for-turn arm1 around x-axis;
	wait-for-turn nano2 around x-axis;
	wait-for-turn arm2 around x-axis;
	move armbase1 to y-axis [0.000000] speed [3.000000];
	move armbase1 to x-axis [0.000000] speed [10.000000];
	move armbase2 to y-axis [0.000000] speed [3.000000];
	move armbase2 to x-axis [0.000000] speed [10.000000];
	wait-for-move armbase1 along y-axis;
	wait-for-move armbase1 along x-axis;
	wait-for-move armbase2 along x-axis;
	wait-for-move armbase2 along y-axis;
	turn door1 to z-axis <0.000000> speed <100.000000>;
	turn door2 to z-axis <0.000000> speed <100.000000>;
	wait-for-turn door1 around z-axis;
	wait-for-turn door2 around z-axis;
}

RequestState(requestedstate, currentstate)
{
	if( Static_Var_2  )
	{
		Static_Var_1 = requestedstate;
		return (0);
	}
	Static_Var_2 = 1;
	currentstate = Static_Var_1;
	Static_Var_1 = requestedstate;
	while( Static_Var_1 != currentstate )
	{
		if( Static_Var_1 )
		{
			call-script deactivatescr();
			currentstate = 1;
			Static_Var_3 = 1;
		}
		else
		{
			call-script activatescr();
			currentstate = 0;
			Static_Var_3 = 0;
		}
	}
	Static_Var_2 = 0;
}


Create()
{
	Static_Var_3 = 1;
	Static_Var_1 = 1;
	Static_Var_2 = 0;
	start-script SmokeUnit();
	poo = 0;
}


Activate()
{
	start-script RequestState(0);
}

Desactivate()
{
	start-script RequestState(1);
}

StartBuilding(Func_Var_1, Func_Var_2)
{
	Static_Var_1 = Func_Var_1;
	start-script RequestState(0);
	while( Static_Var_3 )
	{
		sleep 100;
	}
	signal 4;
	turn armtur1 to y-axis Func_Var_1 speed <100.>;
	turn armtur2 to y-axis Func_Var_1 speed <100.>;
	wait-for-turn armtur1 around y-axis;
	wait-for-turn armtur2 around y-axis;
	set INBUILDSTANCE to 1;

}

StopBuilding()
{
	signal 4;
	set-signal-mask 4;
	sleep 6000;
	set-signal-mask 0;
	signal 4;
	start-script RequestState(1);
}

QueryNanoPiece(piecenum)
{
	if( poo == 0 )
	{
		piecenum = emit1;
	}
	if( poo == 1 )
	{
		piecenum = emit2;
	}
	poo = !poo;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type NOHEATCLOUD;
		explode box type NOHEATCLOUD;
		explode canopy type NOHEATCLOUD;
		explode tread1 type NOHEATCLOUD;
		explode tread2 type NOHEATCLOUD;
		explode armbase1 type NOHEATCLOUD;
		explode armbase2 type NOHEATCLOUD;
		explode arm1 type NOHEATCLOUD;
		explode arm2 type NOHEATCLOUD;
		explode nano1 type NOHEATCLOUD;
		explode nano2 type NOHEATCLOUD;
		explode door1 type NOHEATCLOUD;
		explode door2 type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type NOHEATCLOUD | FALL;
		explode box type NOHEATCLOUD | FALL;
		explode canopy type NOHEATCLOUD | FALL;
		explode tread1 type NOHEATCLOUD | FALL;
		explode tread2 type NOHEATCLOUD | FALL;
		explode armbase1 type NOHEATCLOUD | FALL;
		explode armbase2 type NOHEATCLOUD | FALL;
		explode arm1 type NOHEATCLOUD | FALL;
		explode arm2 type NOHEATCLOUD | FALL;
		explode nano1 type NOHEATCLOUD | FALL;
		explode nano2 type NOHEATCLOUD | FALL;
		explode door1 type NOHEATCLOUD | FALL;
		explode door2 type NOHEATCLOUD | FALL;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type NOHEATCLOUD | FALL| SMOKE | FIRE | EXPLODE_ON_HIT;
		explode box type NOHEATCLOUD | FALL| SMOKE | FIRE | EXPLODE_ON_HIT;
		explode canopy type NOHEATCLOUD | FALL| SMOKE | FIRE | EXPLODE_ON_HIT;
		explode tread1 type NOHEATCLOUD | FALL| SMOKE | FIRE | EXPLODE_ON_HIT;
		explode tread2 type NOHEATCLOUD | FALL| SMOKE | FIRE | EXPLODE_ON_HIT;
		explode armbase1 type NOHEATCLOUD | FALL| SMOKE | FIRE | EXPLODE_ON_HIT;
		explode armbase2 type NOHEATCLOUD | FALL| SMOKE | FIRE | EXPLODE_ON_HIT;
		explode arm1 type NOHEATCLOUD | FALL| SMOKE | FIRE | EXPLODE_ON_HIT;
		explode arm2 type NOHEATCLOUD | FALL| SMOKE | FIRE | EXPLODE_ON_HIT;
		explode nano1 type NOHEATCLOUD | FALL| SMOKE | FIRE | EXPLODE_ON_HIT;
		explode nano2 type NOHEATCLOUD | FALL| SMOKE | FIRE | EXPLODE_ON_HIT;
		explode door1 type NOHEATCLOUD | FALL| SMOKE | FIRE | EXPLODE_ON_HIT;
		explode door2 type NOHEATCLOUD | FALL| SMOKE | FIRE | EXPLODE_ON_HIT;
		return (corpsetype);
	}
	corpsetype = 3;
	explode base type NOHEATCLOUD | FALL| SMOKE | FIRE | EXPLODE_ON_HIT;
	explode box type NOHEATCLOUD | FALL| SMOKE | FIRE | EXPLODE_ON_HIT;
	explode canopy type NOHEATCLOUD | FALL| SMOKE | FIRE | EXPLODE_ON_HIT;
	explode tread1 type NOHEATCLOUD | FALL| SMOKE | FIRE | EXPLODE_ON_HIT;
	explode tread2 type NOHEATCLOUD | FALL| SMOKE | FIRE | EXPLODE_ON_HIT;
	explode armbase1 type NOHEATCLOUD | FALL| SMOKE | FIRE | EXPLODE_ON_HIT;
	explode armbase2 type NOHEATCLOUD | FALL| SMOKE | FIRE | EXPLODE_ON_HIT;
	explode arm1 type NOHEATCLOUD | FALL| SMOKE | FIRE | EXPLODE_ON_HIT;
	explode arm2 type NOHEATCLOUD | FALL| SMOKE | FIRE | EXPLODE_ON_HIT;
	explode nano1 type NOHEATCLOUD | FALL| SMOKE | FIRE | EXPLODE_ON_HIT;
	explode nano2 type NOHEATCLOUD | FALL| SMOKE | FIRE | EXPLODE_ON_HIT;
	explode door1 type NOHEATCLOUD | FALL| SMOKE | FIRE | EXPLODE_ON_HIT;
	explode door2 type NOHEATCLOUD | FALL| SMOKE | FIRE | EXPLODE_ON_HIT;
	return (corpsetype);
}
