#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, rotor1, mispod1, misflash1, ducts, mispod2, misflash2,
       lndg1, lndg2, lndg3, gunpod, gunflash;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, restore_delay, statechg_DesiredState,
            statechg_StateChanging;

// Signal definitions
#define SIG_AIM				2


HitByWeapon(anglex, anglez)
{
	turn base to z-axis anglez speed <105.000000>;
	turn base to x-axis anglex speed <105.000000>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <30.000000>;
	turn base to x-axis <0.000000> speed <30.000000>;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from body;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

activatescr()
{
	if( TRUE )
	{
		turn lndg1 to x-axis <0.000000> speed <20.000000>;
		turn lndg2 to x-axis <0.000000> speed <20.000000>;
		turn lndg3 to x-axis <0.000000> speed <20.000000>;
		spin rotor1 around y-axis speed <777.038462>;
	}
}

deactivatescr()
{
	if( TRUE )
	{
		turn lndg1 to x-axis <90.016484> speed <30.000000>;
		turn lndg2 to x-axis <45.005495> speed <30.000000>;
		turn lndg3 to x-axis <45.005495> speed <30.000000>;
		stop-spin rotor1 around y-axis decelerate <2.000000>;
		turn gunflash to y-axis <0.000000> speed <50.000000>;
		turn gunflash to x-axis <0.000000> speed <50.000000>;
		Static_Var_3 = 0;
	}
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script activatescr();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script deactivatescr();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	Static_Var_1 = 1;
	Static_Var_2 = 1;
	Static_Var_3 = 0;
	restore_delay = 3000;
	call-script InitState();
	start-script SmokeUnit();
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	turn gunflash to y-axis <0.000000> speed <50.000000>;
	turn gunflash to x-axis <0.000000> speed <50.000000>;
	wait-for-turn gunflash around y-axis;
	wait-for-turn gunflash around x-axis;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn gunflash to x-axis <0.000000> - pitch speed <80.000000>;
	wait-for-turn gunflash around y-axis;
	wait-for-turn gunflash around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

AimFromPrimary(piecenum)
{
	piecenum = gunflash;
}

AimSecondary()
{
	return (1);
}

AimFromSecondary(piecenum)
{
	piecenum = body;
}

AimFromTertiary(piecenum)
{
	piecenum = body;
}

FirePrimary()
{
	show gunflash;
	sleep 200;
	hide gunflash;
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

QueryPrimary(piecenum)
{
	piecenum = gunflash;
}

QuerySecondary(piecenum)
{
	if( Static_Var_1 == 1 )
	{
		piecenum = misflash1;
	}
	if( Static_Var_1 == 2 )
	{
		piecenum = misflash2;
	}
	++Static_Var_1;
	if( Static_Var_1 == 3 )
	{
		Static_Var_1 = 1;
	}
}

FireSecondary(Func_Var_1)
{
	if( Static_Var_1 == 1 )
	{
		emit-sfx 1024 + 1 from misflash1;
	}
	if( Static_Var_1 == 2 )
	{
		emit-sfx 1024 + 1 from misflash2;
	}
}

AimTertiary()
{
	return (1);
}

QueryTertiary(piecenum)
{
	if( Static_Var_2 == 1 )
	{
		piecenum = misflash2;
	}
	if( Static_Var_2 == 2 )
	{
		piecenum = misflash1;
	}
	++Static_Var_2;
	if( Static_Var_2 == 3 )
	{
		Static_Var_2 = 1;
	}
}

SweetSpot(piecenum)
{
	piecenum = body;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type NOHEATCLOUD;
		explode body type NOHEATCLOUD;
		explode ducts type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode mispod1 type NOHEATCLOUD;
		explode mispod2 type NOHEATCLOUD;
		explode misflash1 type NOHEATCLOUD;
		explode misflash2 type NOHEATCLOUD;
		explode gunpod type NOHEATCLOUD;
		explode gunflash type NOHEATCLOUD;
		explode lndg1 type NOHEATCLOUD;
		explode lndg2 type NOHEATCLOUD;
		explode lndg3 type NOHEATCLOUD;
		explode rotor1 type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type NOHEATCLOUD;
		explode body type NOHEATCLOUD;
		explode ducts type NOHEATCLOUD | FALL;
		explode mispod1 type NOHEATCLOUD;
		explode mispod2 type NOHEATCLOUD;
		explode misflash1 type NOHEATCLOUD;
		explode misflash2 type NOHEATCLOUD;
		explode gunpod type NOHEATCLOUD;
		explode gunflash type NOHEATCLOUD;
		explode lndg1 type NOHEATCLOUD | SHATTER;
		explode lndg2 type NOHEATCLOUD;
		explode lndg3 type NOHEATCLOUD | SHATTER;
		explode rotor1 type NOHEATCLOUD | SHATTER;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type NOHEATCLOUD;
		explode body type NOHEATCLOUD;
		explode ducts type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode mispod1 type NOHEATCLOUD;
		explode mispod2 type NOHEATCLOUD;
		explode misflash1 type NOHEATCLOUD;
		explode misflash2 type NOHEATCLOUD;
		explode gunpod type NOHEATCLOUD;
		explode gunflash type NOHEATCLOUD;
		explode lndg1 type NOHEATCLOUD | SHATTER;
		explode lndg2 type NOHEATCLOUD;
		explode lndg3 type NOHEATCLOUD | SHATTER;
		explode rotor1 type NOHEATCLOUD | SHATTER;
		return (corpsetype);
	}
	corpsetype = 3;
	explode base type NOHEATCLOUD;
	explode body type NOHEATCLOUD;
	explode ducts type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode mispod1 type NOHEATCLOUD;
	explode mispod2 type NOHEATCLOUD;
	explode misflash1 type NOHEATCLOUD;
	explode misflash2 type NOHEATCLOUD;
	explode gunpod type NOHEATCLOUD;
	explode gunflash type NOHEATCLOUD;
	explode lndg1 type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	explode lndg2 type NOHEATCLOUD;
	explode lndg3 type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	explode rotor1 type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	return (corpsetype);
}
