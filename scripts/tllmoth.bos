#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  flare1, flare2, barrel1, barrel2, base, winga, wingb, body,
       sleeve, turret;

static-var  Static_Var_1, Static_Var_2, gun_1, statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_AIM				2


activatescr()
{
	if( TRUE )
	{
		turn winga to z-axis <0.000000> now;
		turn winga to z-axis <-90.021978> speed <65.000000>;
		turn wingb to z-axis <0.000000> now;
		turn wingb to z-axis <90.021978> speed <65.000000>;
		sleep 1454;
	}
	sleep 15;
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

deactivatescr()
{
	if( TRUE )
	{
		turn winga to z-axis <-90.021978> now;
		turn winga to z-axis <0.000000> speed <45.000000>;
		turn wingb to z-axis <90.021978> now;
		turn wingb to z-axis <0.000000> speed <45.000000>;
		sleep 1453;
	}
	sleep 9;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	var Func_Var_4;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			Func_Var_4 = Rand( 1, 3 );
			if( Func_Var_4 == 1 )
			{
				emit-sfx smoketype from base;
			}
			if( Func_Var_4 == 2 )
			{
				emit-sfx smoketype from winga;
			}
			if( Func_Var_4 == 3 )
			{
				emit-sfx smoketype from wingb;
			}
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script activatescr();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script deactivatescr();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	gun_1 = flare1;
	hide flare1;
	hide flare2;
	call-script InitState();
	start-script SmokeUnit();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

RestoreAfterDelay()
{
	sleep Static_Var_2;
	turn turret to y-axis <0.000000> speed <150.000000>;
	turn sleeve to x-axis <0.000000> speed <100.000000>;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <200.000000>;
	turn sleeve to x-axis <0.000000> - pitch speed <150.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeve around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	if( gun_1 == 0 )
	{
		show flare1;
		spin flare1 around z-axis speed <2000.483516>;
		stop-spin flare1 around z-axis decelerate <20.000000>;
		move flare1 to z-axis [1.000000] speed [30.000000];
		wait-for-move flare1 along z-axis;
		sleep 150;
		hide flare1;
		move flare1 to z-axis [0.000000] now;
	}
	if( gun_1 == 1 )
	{
		show flare2;
		spin flare2 around z-axis speed <2000.483516>;
		stop-spin flare2 around z-axis decelerate <20.000000>;
		move flare2 to z-axis [1.000000] speed [30.000000];
		wait-for-move flare2 along z-axis;
		sleep 150;
		hide flare2;
		move flare2 to z-axis [0.000000] now;
	}
	gun_1 = !gun_1;
}

QueryPrimary(piecenum)
{
	piecenum = gun_1;
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type NOHEATCLOUD | BITMAPONLY | BITMAP1;
		explode winga type NOHEATCLOUD | BITMAPONLY | BITMAP3;
		explode wingb type NOHEATCLOUD | BITMAPONLY | BITMAP4;
		explode barrel1 type NOHEATCLOUD | BITMAPONLY | BITMAP4;
		explode barrel2 type NOHEATCLOUD | BITMAPONLY | BITMAP4;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type NOHEATCLOUD | BITMAPONLY | BITMAP1;
		explode winga type NOHEATCLOUD | SHATTER | BITMAP3;
		explode wingb type NOHEATCLOUD | BITMAPONLY | BITMAP4;
		explode barrel1 type NOHEATCLOUD | FALL | BITMAP4;
		explode barrel2 type NOHEATCLOUD | FALL | BITMAP4;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type NOHEATCLOUD | BITMAPONLY | BITMAP1;
		explode winga type NOHEATCLOUD | SHATTER | BITMAP3;
		explode wingb type NOHEATCLOUD | BITMAPONLY | BITMAP4;
		explode barrel1 type NOHEATCLOUD | FALL | BITMAP4;
		explode barrel2 type NOHEATCLOUD | SHATTER | BITMAP4;
		return (0);
	}
	corpsetype = 3;
	explode base type NOHEATCLOUD | BITMAPONLY | BITMAP1;
	explode winga type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT | BITMAP3;
	explode wingb type NOHEATCLOUD | BITMAPONLY | BITMAP4;
	explode barrel1 type NOHEATCLOUD | SHATTER | BITMAP4;
	explode barrel2 type NOHEATCLOUD | SHATTER | BITMAP4;
}
