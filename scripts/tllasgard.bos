#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece   base, body, turret1, turret2, turret3, sleeve1, sleeve2, sleeve3,
		wake1, wake2, wake3, 
		barrel1, barrel2, barrel3, barrel4, barrel3a, barrel3b, barrel3c,
		flare1, flare2, flare3, flare4, flare3a, flare3b, flare3c;

static-var  gun_3, gun_2, gun_1, restore_delay;

// Signal definitions
#define SIG_AIM_3			2
#define SIG_AIM_2			4
#define SIG_AIM				8
#define SIG_MOVE			16


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	hide flare1;
	hide flare2;
	hide flare3;
	hide flare4;
	hide flare3a;
	hide flare3b;
	hide flare3c;
	gun_3 = 0;
	gun_2 = 0;
	gun_1 = 0;
	restore_delay = 3000;
	start-script SmokeUnit();
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

RestoreAfterDelay1()
{
	sleep restore_delay;
	turn turret1 to y-axis <0.000000> speed <55.000000>;
	turn sleeve1 to x-axis <0.000000> speed <25.000000>;
}

RestoreAfterDelay2()
{
	sleep restore_delay;
	turn turret2 to y-axis <0.000000> speed <55.000000>;
	turn sleeve2 to x-axis <0.000000> speed <25.000000>;
}

RestoreAfterDelay3()
{
	sleep restore_delay * 2.5;
	turn turret3 to y-axis <0.000000> speed <35.000000>;
	turn sleeve3 to x-axis <0.000000> speed <15.000000>;
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		emit-sfx 2 from wake1;
		emit-sfx 2 from wake2;
		emit-sfx 2 from wake3;
		sleep 300;
	}
}

StopMoving()
{
	signal SIG_MOVE;
}

AimTertiary(heading, pitch)
{
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;
	if( heading > 20020 AND heading < 45500 )
	{
		return (0);
	}
	turn turret1 to y-axis heading speed <80.000000>;
	turn sleeve1 to x-axis <0.000000> - pitch speed <55.000000>;
	wait-for-turn turret1 around y-axis;
	wait-for-turn sleeve1 around x-axis;
	start-script RestoreAfterDelay1();
	return (1);
}

AimSecondary(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	if( heading > 20020 AND heading < 45500 )
	{
		return (0);
	}
	turn turret2 to y-axis heading speed <80.000000>;
	turn sleeve2 to x-axis <0.000000> - pitch speed <55.000000>;
	wait-for-turn turret2 around y-axis;
	wait-for-turn sleeve2 around x-axis;
	start-script RestoreAfterDelay2();
	return (1);
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret3 to y-axis heading speed <30.000000>;
	turn sleeve3 to x-axis <0.000000> - pitch speed <15.000000>;
	wait-for-turn turret3 around y-axis;
	wait-for-turn sleeve3 around x-axis;
	start-script RestoreAfterDelay3();
	return (1);
}

FireTertiary()
{
	if( gun_3 == 0 )
	{
		move barrel1 to z-axis [-1.000000] speed [500.000000];
		emit-sfx 1024 + 0 from flare1;
		sleep 150;
		move barrel1 to z-axis [0.000000] speed [3.000000];
		gun_2 = 1;
		return (0);
	}
	if( gun_3 == 1 )
	{
		move barrel2 to z-axis [-1.000000] speed [500.000000];
		emit-sfx 1024 + 0 from flare2;
		sleep 150;
		move barrel2 to z-axis [0.000000] speed [3.000000];
		gun_2 = 0;
		return (0);
	}
}

FireSecondary()
{
	if( gun_2 == 0 )
	{
		move barrel3 to z-axis [-1.000000] speed [500.000000];
		emit-sfx 1024 + 0 from flare3;
		sleep 150;
		move barrel3 to z-axis [0.000000] speed [3.000000];
		gun_2 = 1;
		return (0);
	}
	if( gun_2 == 1 )
	{
		move barrel4 to z-axis [-1.000000] speed [500.000000];
		emit-sfx 1024 + 0 from flare4;
		sleep 150;
		move barrel4 to z-axis [0.000000] speed [3.000000];
		gun_2 = 0;
		return (0);
	}
}

FirePrimary()
{
	if( gun_1 == 0 )
	{
		move barrel3a to z-axis [-1.000000] speed [500.000000];
		emit-sfx 1024 + 1 from flare3a;
		sleep 150;
		move barrel3a to z-axis [0.000000] speed [3.000000];
		gun_1 = 1;
		return (0);
	}
	if( gun_1 == 1 )
	{
		move barrel3b to z-axis [-1.000000] speed [500.000000];
		emit-sfx 1024 + 1 from flare3b;
		sleep 150;
		move barrel3b to z-axis [0.000000] speed [3.000000];
		gun_1 = 2;
		return (0);
	}
	if( gun_1 == 2 )
	{
		move barrel3c to z-axis [-1.000000] speed [500.000000];
		emit-sfx 1024 + 1 from flare3c;
		sleep 150;
		move barrel3c to z-axis [0.000000] speed [3.000000];
		gun_1 = 0;
		return (0);
	}
}

AimFromTertiary(piecenum)
{
	piecenum = turret1;
}

AimFromSecondary(piecenum)
{
	piecenum = turret2;
}

AimFromPrimary(piecenum)
{
	piecenum = turret3;
}

QueryTertiary(piecenum)
{
	if( gun_3 == 0 )
	{
		piecenum = flare1;
	}
	if( gun_3 == 1 )
	{
		piecenum = flare2;
	}
}

QuerySecondary(piecenum)
{
	if( gun_2 == 0 )
	{
		piecenum = flare3;
	}
	if( gun_2 == 1 )
	{
		piecenum = flare4;
	}
}

QueryPrimary(piecenum)
{
	if( gun_1 == 0 )
	{
		piecenum = flare3a;
	}
	if( gun_1 == 1 )
	{
		piecenum = flare3b;
	}
	if( gun_1 == 2 )
	{
		piecenum = flare3c;
	}
}

SweetSpot(piecenum)
{
	piecenum = turret1;
}

Killed(severity, corpsetype)
{
	explode barrel1 type NOHEATCLOUD | FALL | SMOKE | EXPLODE_ON_HIT;
	explode barrel3c type NOHEATCLOUD | FALL | SMOKE | EXPLODE_ON_HIT;
	explode barrel3b type NOHEATCLOUD | FALL | SMOKE | EXPLODE_ON_HIT;
	explode body type NOHEATCLOUD;
	explode turret1 type NOHEATCLOUD;
	explode turret3 type NOHEATCLOUD;
	if( severity <= 25 )
	{
		corpsetype = 1;
		return (corpsetype);
	}
	explode turret1 type NOHEATCLOUD | FALL | SMOKE | EXPLODE_ON_HIT;
	explode barrel3 type NOHEATCLOUD | FALL | SMOKE | EXPLODE_ON_HIT;
	explode turret3 type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	explode barrel3c type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	if( severity <= 50 )
	{
		corpsetype = 2;
		return (corpsetype);
	}
	corpsetype = 3;
	explode body type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	return (corpsetype);
}
