#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, Stange, loSchenkel, luSchenkel, lFuss, l1Finger, l2Finger, lDaumen,
       roSchenkel, ruSchenkel, rFuss, r1Finger, r2Finger, rDaumen, Torso, Achse,
       lSchulter, lArm, lKanone, l1Lauf, l1Blitz, l2Lauf, l2Blitz, rSchulter,
       rArm, rKanone, r1Lauf, r1Blitz, r2Lauf, r2Blitz, Punkt, RakTurm,
       ruRakWerf, rmRakWerf, rRakBlitz, luRakWerf, lmRakWerf, lRakBlitz, Koerper, Schwanz,
       Lower, loRakWerf, roRakWerf, RechenArm, RechenBlitz, RechenPunkt, RauchArm, RauchPunkt,
       lBlinker, rBlinker, wake1, wake2;

static-var  gun_1, bMoving, Static_Var_3, bAiming, gun_3,
            Static_Var_6, Static_Var_7, unitviewer, Static_Var_9, Static_Var_10;

// Signal definitions
#define SIG_MOVE			2
#define SIG_AIM				4
#define SIG_AIM_3			8


EmitSFX()
{
	while( TRUE )
	{
		if( bMoving )
		{
			if( Static_Var_10 == 3 )
			{
				emit-sfx 259 from wake1;
				emit-sfx 259 from wake2;
			}
		}
		sleep 250;
	}
}

StartWalk()
{
	if( TRUE )
	{
		if( Static_Var_3 )
		{
			turn rArm to x-axis <18.000000> speed <9.000000>;
			turn lArm to x-axis <-18.000000> speed <18.000000>;
		}
		turn roSchenkel to x-axis <38.000000> speed <50.000000>;
		turn loSchenkel to x-axis <-38.000000> speed <50.000000>;
		turn rFuss to x-axis <-28.000000> speed <70.000000>;
		turn lFuss to x-axis <8.000000> speed <50.000000>;
		turn luSchenkel to x-axis <-30.000000> speed <80.000000>;
		turn Torso to x-axis <4.000000> speed <5.000000>;
		sleep 505;
		turn rFuss to x-axis <38.000000> speed <100.000000>;
		turn lFuss to x-axis <18.000000> speed <50.000000>;
		turn luSchenkel to x-axis <38.000000> speed <100.000000>;
		turn r1Finger to x-axis <45.000000> speed <100.000000>;
		turn r2Finger to x-axis <45.000000> speed <100.000000>;
		turn rDaumen to x-axis <-45.000000> speed <100.000000>;
		turn l1Finger to x-axis <0.000000> speed <100.000000>;
		turn l2Finger to x-axis <0.000000> speed <100.000000>;
		sleep 450;
		turn lDaumen to x-axis <0.000000> speed <100.000000>;
		move body to y-axis [1.000000] speed [1.000000];
		turn body to z-axis <3.000000> speed <3.000000>;
	}
	if( TRUE )
	{
		if( Static_Var_3 )
		{
			turn rArm to x-axis <-18.000000> speed <20.000000>;
			turn lArm to x-axis <18.000000> speed <20.000000>;
		}
		turn roSchenkel to x-axis <-38.000000> speed <50.000000>;
		turn loSchenkel to x-axis <38.000000> speed <50.000000>;
		turn lFuss to x-axis <-38.000000> speed <130.000000>;
		turn ruSchenkel to x-axis <-30.000000> speed <80.000000>;
		sleep 1050;
		turn lFuss to x-axis <38.000000> speed <100.000000>;
		turn ruSchenkel to x-axis <30.000000> speed <80.000000>;
		move body to y-axis [0.000000] speed [2.000000];
		turn r1Finger to x-axis <0.000000> speed <100.000000>;
		turn r2Finger to x-axis <0.000000> speed <100.000000>;
		turn l1Finger to x-axis <45.000000> speed <100.000000>;
		turn l2Finger to x-axis <45.000000> speed <100.000000>;
		turn lDaumen to x-axis <-45.000000> speed <100.000000>;
		sleep 450;
		turn rDaumen to x-axis <0.000000> speed <100.000000>;
		move body to y-axis [2.000000] speed [2.000000];
		turn body to z-axis <-5.000000> speed <8.000000>;
		turn lArm to x-axis <0.000000> speed <14.000000>;
		turn rArm to x-axis <0.000000> speed <14.000000>;
	}
}

Walk()
{
	if( TRUE )
	{
		if( Static_Var_3 )
		{
			turn rArm to x-axis <18.000000> speed <18.000000>;
			turn lArm to x-axis <-18.000000> speed <18.000000>;
			turn Torso to y-axis <-8.000000> speed <12.000000>;
			turn Punkt to y-axis <8.000000> speed <12.000000>;
			Static_Var_6 = -6;
			if( !Static_Var_7 )
			{
				turn RakTurm to y-axis <-8.000000> speed <12.000000>;
			}
		}
		turn Torso to x-axis <-3.000000> speed <6.000000>;
		turn roSchenkel to x-axis <38.000000> speed <50.000000>;
		turn loSchenkel to x-axis <-38.000000> speed <50.000000>;
		turn rFuss to x-axis <-38.000000> speed <130.000000>;
		turn luSchenkel to x-axis <-30.000000> speed <80.000000>;
		sleep 1050;
		turn rFuss to x-axis <38.000000> speed <100.000000>;
		turn lFuss to x-axis <38.000000> speed <70.000000>;
		turn luSchenkel to x-axis <30.000000> speed <100.000000>;
		move body to y-axis [0.000000] speed [2.000000];
		turn r1Finger to x-axis <45.000000> speed <100.000000>;
		turn r2Finger to x-axis <45.000000> speed <100.000000>;
		turn rDaumen to x-axis <-45.000000> speed <100.000000>;
		turn l1Finger to x-axis <0.000000> speed <100.000000>;
		turn l2Finger to x-axis <0.000000> speed <100.000000>;
		sleep 450;
		turn lDaumen to x-axis <0.000000> speed <100.000000>;
		move body to y-axis [1.000000] speed [1.000000];
		turn body to z-axis <3.000000> speed <7.000000>;
	}
	if( TRUE )
	{
		if( Static_Var_3 )
		{
			turn rArm to x-axis <-18.000000> speed <20.000000>;
			turn lArm to x-axis <18.000000> speed <20.000000>;
			turn Torso to y-axis <8.000000> speed <12.000000>;
			turn Punkt to y-axis <-8.000000> speed <12.000000>;
			Static_Var_6 = 6;
			if( !Static_Var_7 )
			{
				turn RakTurm to y-axis <8.000000> speed <12.000000>;
			}
		}
		turn Torso to x-axis <4.000000> speed <6.000000>;
		turn roSchenkel to x-axis <-38.000000> speed <50.000000>;
		turn loSchenkel to x-axis <38.000000> speed <50.000000>;
		turn lFuss to x-axis <-38.000000> speed <130.000000>;
		turn ruSchenkel to x-axis <-30.000000> speed <100.000000>;
		sleep 1050;
		turn lFuss to x-axis <38.000000> speed <100.000000>;
		turn ruSchenkel to x-axis <30.000000> speed <80.000000>;
		move body to y-axis [0.000000] speed [2.000000];
		turn r1Finger to x-axis <0.000000> speed <100.000000>;
		turn r2Finger to x-axis <0.000000> speed <100.000000>;
		turn l1Finger to x-axis <45.000000> speed <100.000000>;
		turn l2Finger to x-axis <45.000000> speed <100.000000>;
		turn lDaumen to x-axis <-45.000000> speed <100.000000>;
		sleep 450;
		turn rDaumen to x-axis <0.000000> speed <100.000000>;
		move body to y-axis [1.000000] speed [1.000000];
		turn body to z-axis <-3.000000> speed <7.000000>;
	}
}

StopWalk()
{
	if( TRUE )
	{
		turn roSchenkel to x-axis <0.000000> speed <50.000000>;
		turn loSchenkel to x-axis <0.000000> speed <50.000000>;
		turn ruSchenkel to x-axis <0.000000> speed <100.000000>;
		turn luSchenkel to x-axis <0.000000> speed <100.000000>;
		turn Torso to x-axis <0.000000> speed <20.000000>;
		move body to y-axis [0.000000] speed [20.000000];
		turn body to z-axis <0.000000> speed <20.000000>;
		turn l1Finger to x-axis <0.000000> speed <100.000000>;
		turn l2Finger to x-axis <0.000000> speed <100.000000>;
		turn lDaumen to x-axis <0.000000> speed <100.000000>;
		turn r1Finger to x-axis <0.000000> speed <100.000000>;
		turn r2Finger to x-axis <0.000000> speed <100.000000>;
		turn rDaumen to x-axis <0.000000> speed <100.000000>;
		turn lFuss to x-axis <0.000000> speed <100.000000>;
		turn rFuss to x-axis <0.000000> speed <100.000000>;
		turn Torso to x-axis <8.000000> speed <48.000000>;
		if( Static_Var_3 )
		{
			turn rArm to x-axis <-8.000000> speed <48.000000>;
			turn lArm to x-axis <-8.000000> speed <48.000000>;
		}
		wait-for-turn Torso around x-axis;
		turn Torso to x-axis <-1.000000> speed <48.000000>;
		wait-for-turn Torso around x-axis;
		turn Torso to x-axis <0.000000> speed <48.000000>;
		wait-for-turn Torso around x-axis;
		if( Static_Var_3 )
		{
			turn rArm to x-axis <0.000000> speed <48.000000>;
			turn lArm to x-axis <0.000000> speed <48.000000>;
		}
		wait-for-turn lArm around x-axis;
		wait-for-turn rArm around x-axis;
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from RauchPunkt;
		}
		sleeptime = healthpercent * 30;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

HitByWeapon(anglex, anglez)
{
	var Func_Var_3;
	Func_Var_3 = get HEALTH;
	if( Static_Var_9 - Func_Var_3 >= 5 )
	{
		turn Achse to z-axis anglez speed <150.000000>;
		turn Achse to x-axis anglex speed <150.000000>;
		wait-for-turn Achse around z-axis;
		turn Achse to z-axis <0.000000> speed <30.000000>;
		turn Achse to x-axis <0.000000> speed <30.000000>;
	}
	Static_Var_9 = get HEALTH;
}

Create()
{
	hide l1Blitz;
	hide l2Blitz;
	hide r1Blitz;
	hide r2Blitz;
	hide lRakBlitz;
	hide rRakBlitz;
	hide lmRakWerf;
	hide rmRakWerf;
	dont-cache lBlinker;
	dont-shade lBlinker;
	dont-cache rBlinker;
	dont-shade rBlinker;
	turn Stange to x-axis <-64.000000> now;
	Static_Var_10 = 4;
	unitviewer = FALSE;
	bMoving = FALSE;
	bAiming = FALSE;
	gun_1 = 1;
	gun_3 = 0;
	Static_Var_3 = 1;
	Static_Var_6 = 0;
	Static_Var_9 = get HEALTH;
	spin RauchArm around y-axis speed <300.000000>;
	start-script SmokeUnit();
}

Demo()
{
	unitviewer = TRUE;
}

setSFXoccupy(state)
{
	Static_Var_10 = state;
}

StartMoving()
{
	bMoving = TRUE;
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	if( !bAiming )
	{
		turn Torso to y-axis <0.000000> speed <60.000000>;
		turn Punkt to y-axis <0.000000> speed <60.000000>;
		if( !Static_Var_7 )
		{
			turn RakTurm to y-axis <0.000000> speed <60.000000>;
		}
	}
	call-script StartWalk();
	while( TRUE )
	{
		call-script Walk();
	}
}

StopMoving()
{
	bMoving = FALSE;
	signal SIG_MOVE;
	start-script StopWalk();
}

SweetSpot(piecenum)
{
	piecenum = Torso;
}

RestoreAfterDelay(Func_Var_1)
{
	sleep 3500;
	Func_Var_1 = bMoving;
	turn lKanone to y-axis <0.000000> speed <15.000000>;
	turn rKanone to y-axis <0.000000> speed <15.000000>;
	if( Func_Var_1 )
	{
		turn Torso to y-axis <0.000000> speed <60.000000>;
		turn Punkt to y-axis <0.000000> speed <60.000000>;
		if( !Static_Var_7 )
		{
			turn RakTurm to y-axis <0.000000> speed <15.000000>;
		}
		wait-for-turn Torso around y-axis;
		Static_Var_6 = 0;
	}
	if( !Func_Var_1 )
	{
		turn rArm to x-axis <0.000000> speed <20.000000>;
		turn lArm to x-axis <0.000000> speed <20.000000>;
		wait-for-turn lArm around x-axis;
	}
	wait-for-turn lKanone around y-axis;
	Static_Var_3 = 1;
	bAiming = FALSE;
}

AimFromSecondary(piecenum)
{
	piecenum = Torso;
}

QuerySecondary(piecenum)
{
	if( gun_1 == 1 )
	{
		piecenum = l1Blitz;
	}
	if( gun_1 == 2 )
	{
		piecenum = r1Blitz;
	}
	if( gun_1 == 3 )
	{
		piecenum = l2Blitz;
	}
	if( gun_1 == 4 )
	{
		piecenum = r2Blitz;
	}
}

AimSecondary(heading, pitch)
{
	var Func_Var_3, Func_Var_4, Func_Var_5;
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	bAiming = TRUE;
	Static_Var_3 = 0;
	if( !unitviewer )
	{
		turn RechenArm to x-axis <0.000000> - pitch now;
		Func_Var_4 = get PIECE_Y(RechenPunkt);
		Func_Var_3 = get PIECE_Y(RechenBlitz);
		if( Func_Var_4 >= Func_Var_3 )
		{
			Func_Var_5 = ( Func_Var_4 - Func_Var_3 ) / 250 + 360;
			turn lKanone to y-axis Func_Var_5 speed <40.000000>;
			turn rKanone to y-axis <0.000000> - Func_Var_5 speed <40.000000>;
		}
		if( Func_Var_4 < Func_Var_3 )
		{
			turn rKanone to y-axis <0.000000> speed <40.000000>;
			turn lKanone to y-axis <0.000000> speed <40.000000>;
		}
	}
	turn Torso to y-axis heading speed <110.000000>;
	turn Punkt to y-axis <0.000000> - heading speed <110.000000>;
	if( !Static_Var_7 )
	{
		turn RakTurm to y-axis heading speed <110.000000>;
	}
	turn lArm to x-axis <0.000000> - pitch speed <40.000000>;
	turn rArm to x-axis <0.000000> - pitch speed <40.000000>;
	wait-for-turn Torso around y-axis;
	wait-for-turn rArm around x-axis;
	wait-for-turn lArm around x-axis;
	wait-for-turn rKanone around y-axis;
	Static_Var_6 = heading;
	start-script RestoreAfterDelay();
	return (1);
}

FireSecondary()
{
	turn Achse to x-axis <4.000000> speed <60.000000>;
	if( gun_1 == 1 )
	{
		turn lSchulter to x-axis <15.000000> speed <400.000000>;
		turn lKanone to x-axis <-18.000000> speed <400.000000>;
		move l1Lauf to z-axis [-3.000000] speed [300.000000];
		turn Achse to y-axis <-1.000000> speed <40.000000>;
		show l1Blitz;
		sleep 100;
		hide l1Blitz;
		move l1Lauf to z-axis [0.000000] speed [3.000000];
		turn lSchulter to x-axis <0.000000> speed <30.000000>;
		turn lKanone to x-axis <0.000000> speed <30.000000>;
		turn Achse to x-axis <0.000000> speed <6.000000>;
		turn Achse to y-axis <0.000000> speed <4.000000>;
		gun_1 = 2;
		return (0);
	}
	if( gun_1 == 2 )
	{
		turn rSchulter to x-axis <15.000000> speed <400.000000>;
		turn rKanone to x-axis <-18.000000> speed <400.000000>;
		show r1Blitz;
		move r1Lauf to z-axis [-3.000000] speed [300.000000];
		turn Achse to y-axis <1.000000> speed <40.000000>;
		sleep 100;
		move r1Lauf to z-axis [0.000000] speed [3.000000];
		hide r1Blitz;
		turn rSchulter to x-axis <0.000000> speed <30.000000>;
		turn rKanone to x-axis <0.000000> speed <30.000000>;
		turn Achse to x-axis <0.000000> speed <6.000000>;
		turn Achse to y-axis <0.000000> speed <4.000000>;
		gun_1 = 3;
		return (0);
	}
	if( gun_1 == 3 )
	{
		turn lSchulter to x-axis <15.000000> speed <400.000000>;
		turn lKanone to x-axis <-18.000000> speed <400.000000>;
		show l2Blitz;
		move l2Lauf to z-axis [-3.000000] speed [300.000000];
		turn Achse to y-axis <-1.000000> speed <40.000000>;
		sleep 100;
		move l2Lauf to z-axis [0.000000] speed [3.000000];
		hide l2Blitz;
		turn lSchulter to x-axis <0.000000> speed <30.000000>;
		turn lKanone to x-axis <0.000000> speed <30.000000>;
		turn Achse to x-axis <0.000000> speed <6.000000>;
		turn Achse to y-axis <0.000000> speed <4.000000>;
		gun_1 = 4;
		return (0);
	}
	if( gun_1 == 4 )
	{
		turn rSchulter to x-axis <15.000000> speed <400.000000>;
		turn rKanone to x-axis <-18.000000> speed <400.000000>;
		show r2Blitz;
		move r2Lauf to z-axis [-3.000000] speed [300.000000];
		turn Achse to y-axis <1.000000> speed <40.000000>;
		sleep 100;
		move r2Lauf to z-axis [0.000000] speed [3.000000];
		hide r2Blitz;
		turn rSchulter to x-axis <0.000000> speed <30.000000>;
		turn rKanone to x-axis <0.000000> speed <30.000000>;
		turn Achse to x-axis <0.000000> speed <6.000000>;
		turn Achse to y-axis <0.000000> speed <4.000000>;
		gun_1 = 1;
		return (0);
	}
}

RestorePrimary()
{
	sleep 5000;
	Static_Var_7 = 0;
	turn RakTurm to y-axis Static_Var_6 speed <80.000000>;
	wait-for-turn Punkt around y-axis;
	wait-for-turn RakTurm around y-axis;
	turn lmRakWerf to x-axis <0.000000> speed <50.000000>;
	turn rmRakWerf to x-axis <0.000000> speed <50.000000>;
	wait-for-turn lmRakWerf around x-axis;
	move luRakWerf to z-axis [0.000000] speed [4.000000];
	move ruRakWerf to z-axis [0.000000] speed [4.000000];
	turn Stange to x-axis <-64.000000> speed <80.000000>;
	move Punkt to z-axis [0.000000] speed [4.000000];
	wait-for-move luRakWerf along z-axis;
	wait-for-turn Stange around x-axis;
	wait-for-move Punkt along z-axis;
	turn loRakWerf to x-axis <0.000000> speed <60.000000>;
	turn roRakWerf to x-axis <0.000000> speed <60.000000>;
	wait-for-turn loRakWerf around x-axis;
	hide lmRakWerf;
	hide rmRakWerf;
}

AimFromPrimary(piecenum)
{
	piecenum = RakTurm;
}

QueryPrimary(piecenum)
{
	if( gun_3 == 0 )
	{
		piecenum = lRakBlitz;
	}
	if( gun_3 == 1 )
	{
		piecenum = rRakBlitz;
	}
}

AimPrimary(heading, pitch)
{
	Static_Var_7 = 1;
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;
	show lmRakWerf;
	show rmRakWerf;
	turn loRakWerf to x-axis <-30.000000> speed <60.000000>;
	turn roRakWerf to x-axis <-30.000000> speed <60.000000>;
	wait-for-turn loRakWerf around x-axis;
	turn Stange to x-axis <0.000000> speed <80.000000>;
	move Punkt to z-axis [3.000000] speed [4.000000];
	move luRakWerf to z-axis [3.000000] speed [4.000000];
	move ruRakWerf to z-axis [3.000000] speed [4.000000];
	wait-for-turn Stange around x-axis;
	wait-for-move Punkt along z-axis;
	wait-for-move luRakWerf along z-axis;
	turn lmRakWerf to x-axis <-25.000000> speed <50.000000>;
	turn rmRakWerf to x-axis <-25.000000> speed <50.000000>;
	wait-for-turn lmRakWerf around x-axis;
	turn RakTurm to y-axis heading speed <120.000000>;
	wait-for-turn RakTurm around y-axis;
	wait-for-turn Punkt around y-axis;
	start-script RestorePrimary();
	return (1);
}

FirePrimary()
{
	if(gun_3 == 0)
	{
//		show lRakBlitz;
//		sleep 150;
//		hide lRakBlitz;

		sleep 400;

		gun_3 = 1;
		return (0);
	}
	if(gun_3 == 1)
	{
//		show rRakBlitz;
//		sleep 150;
//		hide rRakBlitz;

		sleep 400;
		
		gun_3 = 0;
		return (0);
	}
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode body type NOHEATCLOUD;
		explode loSchenkel type NOHEATCLOUD;
		explode luSchenkel type NOHEATCLOUD;
		explode lFuss type NOHEATCLOUD;
		explode l1Finger type NOHEATCLOUD;
		explode l2Finger type NOHEATCLOUD;
		explode lDaumen type NOHEATCLOUD;
		explode roSchenkel type NOHEATCLOUD;
		explode ruSchenkel type NOHEATCLOUD;
		explode rFuss type NOHEATCLOUD;
		explode r1Finger type NOHEATCLOUD;
		explode r2Finger type NOHEATCLOUD;
		explode rDaumen type NOHEATCLOUD;
		explode lArm type NOHEATCLOUD;
		explode lKanone type NOHEATCLOUD;
		explode l2Lauf type NOHEATCLOUD;
		explode l1Lauf type NOHEATCLOUD;
		explode rArm type NOHEATCLOUD;
		explode rKanone type NOHEATCLOUD;
		explode r2Lauf type NOHEATCLOUD;
		explode r1Lauf type NOHEATCLOUD;
		explode RakTurm type NOHEATCLOUD;
		explode Stange type NOHEATCLOUD;
		explode ruRakWerf type NOHEATCLOUD;
		explode rmRakWerf type NOHEATCLOUD;
		explode luRakWerf type NOHEATCLOUD;
		explode lmRakWerf type NOHEATCLOUD;
		explode Koerper type NOHEATCLOUD;
		explode Schwanz type NOHEATCLOUD;
		explode loRakWerf type NOHEATCLOUD;
		explode roRakWerf type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode body type NOHEATCLOUD | SHATTER;
		explode loSchenkel type NOHEATCLOUD | SHATTER;
		explode luSchenkel type NOHEATCLOUD | SHATTER;
		explode lFuss type NOHEATCLOUD | SHATTER;
		explode l1Finger type NOHEATCLOUD | SHATTER;
		explode l2Finger type NOHEATCLOUD | SHATTER;
		explode lDaumen type NOHEATCLOUD | SHATTER;
		explode roSchenkel type NOHEATCLOUD | SHATTER;
		explode ruSchenkel type NOHEATCLOUD | SHATTER;
		explode rFuss type NOHEATCLOUD | SHATTER;
		explode r1Finger type NOHEATCLOUD | SHATTER;
		explode r2Finger type NOHEATCLOUD | SHATTER;
		explode rDaumen type NOHEATCLOUD | SHATTER;
		explode lArm type NOHEATCLOUD | SHATTER;
		explode lKanone type NOHEATCLOUD | SHATTER;
		explode l2Lauf type NOHEATCLOUD | SHATTER;
		explode l1Lauf type NOHEATCLOUD | SHATTER;
		explode rArm type NOHEATCLOUD | SHATTER;
		explode rKanone type NOHEATCLOUD | SHATTER;
		explode r2Lauf type NOHEATCLOUD | SHATTER;
		explode r1Lauf type NOHEATCLOUD | SHATTER;
		explode RakTurm type NOHEATCLOUD | SHATTER;
		explode Stange type NOHEATCLOUD | SHATTER;
		explode ruRakWerf type NOHEATCLOUD | SHATTER;
		explode rmRakWerf type NOHEATCLOUD | SHATTER;
		explode luRakWerf type NOHEATCLOUD | SHATTER;
		explode lmRakWerf type NOHEATCLOUD | SHATTER;
		explode Koerper type NOHEATCLOUD | SHATTER;
		explode Schwanz type NOHEATCLOUD | SHATTER;
		explode loRakWerf type NOHEATCLOUD | SHATTER;
		explode roRakWerf type NOHEATCLOUD | SHATTER;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode body type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode loSchenkel type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode luSchenkel type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode lFuss type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode l1Finger type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode l2Finger type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode lDaumen type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode roSchenkel type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode ruSchenkel type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode rFuss type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode r1Finger type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode r2Finger type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode rDaumen type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode lArm type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode lKanone type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode l2Lauf type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode l1Lauf type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode rArm type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode rKanone type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode r2Lauf type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode r1Lauf type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode RakTurm type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode Stange type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode ruRakWerf type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode rmRakWerf type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode luRakWerf type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode lmRakWerf type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode Koerper type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode Schwanz type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode loRakWerf type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode roRakWerf type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		return (corpsetype);
	}
	corpsetype = 3;
	explode body type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode loSchenkel type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode luSchenkel type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode lFuss type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode l1Finger type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode l2Finger type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode lDaumen type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode roSchenkel type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode ruSchenkel type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode rFuss type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode r1Finger type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode r2Finger type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode rDaumen type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode lArm type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode lKanone type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode l2Lauf type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode l1Lauf type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode rArm type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode rKanone type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode r2Lauf type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode r1Lauf type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode RakTurm type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode Stange type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode ruRakWerf type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode rmRakWerf type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode luRakWerf type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode lmRakWerf type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode Koerper type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode Schwanz type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode loRakWerf type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode roRakWerf type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	return (corpsetype);
}
