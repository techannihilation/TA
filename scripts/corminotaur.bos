#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, torso, larm, rarm, lgun, rgun, lbarrel, rbarrel, lflare, rflare,
       starburst, lpack, rpack, lmissle, rmissle, rmispoint, lmispoint, s1, s2;

static-var  gun1, gun2, bMoving;

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_2			4
#define SIG_MOVE 			32


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

StopMoving()
{
	signal SIG_MOVE;	
	bMoving=0;
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;	
	bMoving=1;	
	while(bMoving)
	{
		emit-sfx 256 | 2 from s1;
		emit-sfx 256 | 2 from s2;
		sleep rand(200,300);
	}
}

HitByWeapon(anglex, anglez)
{
	turn body to z-axis anglez speed <105.000000>;
	turn body to x-axis anglex speed <105.000000>;
	wait-for-turn body around z-axis;
	wait-for-turn body around x-axis;
	turn body to z-axis <0.000000> speed <30.000000>;
	turn body to x-axis <0.000000> speed <30.000000>;
}

RestoreAfterDelay()
{
	sleep 11000;
	set-signal-mask 0;
	turn torso to y-axis <0.000000> speed <30.000000>;
	turn larm to x-axis <0.000000> speed <30.000000>;
	turn rarm to x-axis <0.000000> speed <30.000000>;
}

Create()
{
	gun1 = 0;
	gun2 = 0;
	start-script SmokeUnit();
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	return (1);
}

AimSecondary(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	turn torso to y-axis heading speed <45.000000>;
	turn larm to x-axis <0.000000> - pitch speed <45.000000>;
	turn rarm to x-axis <0.000000> - pitch speed <45.000000>;
	wait-for-turn torso around y-axis;
	wait-for-turn rarm around x-axis;
	wait-for-turn larm around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	++gun1;
	if( gun1 == 2 )
	{
		gun1 = 0;
	}
}

FireSecondary()
{
	if( gun2 == 0 )
	{
		//move lbarrel to z-axis [-1.500000] now;
		sleep 250;
		//move lbarrel to z-axis [0.000000] speed [5.000000];
	}
	if( gun2 == 1 )
	{
		//move rbarrel to z-axis [-1.500000] now;
		sleep 250;
		//move rbarrel to z-axis [0.000000] speed [5.000000];
	}
	++gun2;
	if( gun2 == 2 )
	{
		gun2 = 0;
	}	
}

QueryPrimary(piecenum)
{
	if( gun1 == 0 )
	{
		piecenum = lmispoint;	
	}
	if( gun1 == 1 )
	{
		piecenum = rmispoint;	
	}
}

QuerySecondary(piecenum)
{
	if( gun2 == 0 )
	{
		piecenum = lflare;	
	}
	if( gun2 == 1 )
	{
		piecenum = rflare;	
	}
}

AimFromPrimary(piecenum)
{
	piecenum = body;
}

AimFromSecondary(piecenum)
{
	piecenum = torso;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode body type NOHEATCLOUD;
		explode rarm type NOHEATCLOUD;
		explode larm type NOHEATCLOUD;
		explode torso type NOHEATCLOUD;
		explode rmissle type NOHEATCLOUD;
		explode lmissle type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode body type NOHEATCLOUD;
		explode rarm type NOHEATCLOUD | FALL;
		explode larm type NOHEATCLOUD | FALL;
		explode torso type NOHEATCLOUD;
		explode rmissle type NOHEATCLOUD;
		explode lmissle type NOHEATCLOUD | FALL;
		return (corpsetype);
	}
	corpsetype = 3;
	if( severity <= 99 )
	{
		explode body type NOHEATCLOUD;
		explode rarm type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode larm type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode torso type NOHEATCLOUD;
		explode rmissle type NOHEATCLOUD;
		explode lmissle type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		return (corpsetype);
	}
	explode body type NOHEATCLOUD;
	explode rarm type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode larm type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode torso type NOHEATCLOUD;
	explode rmissle type NOHEATCLOUD;
	explode lmissle type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	return (corpsetype);
}