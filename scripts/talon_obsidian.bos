#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  flare1, flare2, turret, base, sleeve, barrel1, barrel2,
       body, s1, s2, s3, s4, s5, s6, aimpoint;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4, Static_Var_5,
            Static_Var_6;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

HitByWeapon(Func_Var_1, Func_Var_2)
{
	signal 4;
	set-signal-mask 4;
	turn body to x-axis Func_Var_1 speed <50.>;
	turn body to z-axis Func_Var_2 speed <50.>;
	wait-for-turn body around z-axis;
	wait-for-turn body around x-axis;
	turn body to z-axis <0.> speed <20.>;
	turn body to x-axis <0.> speed <20.>;
}

Create()
{
	hide flare1;
	hide flare2;
	Static_Var_2 = 0;
	Static_Var_1 = 3000;
	start-script SmokeUnit();
}

SetMaxReloadTime(time)
{
	Static_Var_1 = time * 2;
}

RestoreAfterDelay()
{
	sleep Static_Var_1;
	turn turret to y-axis <0.> speed <35.>;
	turn sleeve to x-axis <0.> speed <15.>;
}

AimPrimary(Func_Var_1, Func_Var_2)
{
	signal 2;
	set-signal-mask 2;
	turn turret to y-axis Func_Var_1 speed <120.>;
	turn sleeve to x-axis <0.> - Func_Var_2 speed <120.>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeve around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	if( Static_Var_2 == 0 )
	{
		emit-sfx 1025 from flare1;
		move barrel1 to z-axis [-2.] speed [500.];
		sleep 250;
		wait-for-move barrel1 along z-axis;
		move barrel1 to z-axis [0.] speed [3.];
	}
	if( Static_Var_2 == 1 )
	{
		emit-sfx 1025 from flare2;
		move barrel2 to z-axis [-2.] speed [500.];
		sleep 250;
		wait-for-move barrel2 along z-axis;
		move barrel2 to z-axis [0.] speed [3.];
	}
	Static_Var_2 = !Static_Var_2;
}

QueryPrimary(Func_Var_1)
{
	Func_Var_1 = Static_Var_2;
}

AimFromPrimary(Func_Var_1)
{
	Func_Var_1 = 15;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide flare1;
	hide flare2;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode barrel1 type NOHEATCLOUD;
		explode barrel2 type NOHEATCLOUD;
		explode base type NOHEATCLOUD;
		explode flare1 type NOHEATCLOUD;
		explode flare2 type NOHEATCLOUD;
		explode sleeve type NOHEATCLOUD;
		explode turret type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode barrel1 type FALL | NOHEATCLOUD;
		explode barrel2 type FALL | NOHEATCLOUD;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode flare1 type FALL | NOHEATCLOUD;
		explode flare2 type FALL | NOHEATCLOUD;
		explode sleeve type NOHEATCLOUD;
		explode turret type FALL | NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode barrel1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode barrel2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode base type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode flare1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode flare2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode sleeve type NOHEATCLOUD ;
		explode turret type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		return (corpsetype);
	}
	corpsetype = 3;
	explode barrel1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode barrel2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode base type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode flare1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode flare2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode sleeve type NOHEATCLOUD;
	explode turret type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	return (corpsetype);
}
