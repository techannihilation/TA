#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  flare1, flare2, flare3, flare4, base, v1, v2, v3,
       v4, body, turret, sleeves;

static-var  Static_Var_1, Static_Var_2, Static_Var_3;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	start-script SmokeUnit();
	dont-shade body;
	dont-shade turret;
	dont-shade sleeves;
	Static_Var_2 = 0;
	Static_Var_1 = 5;
	Static_Var_3 = 0;
	turn sleeves to x-axis <-20.> now;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 10;
	}
	dont-cache turret;
	dont-cache sleeves;
	spin turret around y-axis speed <-30.>;
}

Restore1()
{
	sleep 3000;
	turn sleeves to x-axis <-20.> speed <8.>;
	spin turret around y-axis speed <-30.>;
	wait-for-turn sleeves around x-axis;
	Static_Var_2 = 0;
}

AimTertiary(heading, pitch)
{
	signal 4;
	set-signal-mask 4;
	return (1);
}

FireTertiary()
{
	++Static_Var_1;
	if( Static_Var_1 == 9 )
	{
		Static_Var_1 = 5;
	}
}

QueryTertiary(piecenum)
{
	piecenum = Static_Var_1;
}

AimFromTertiary(piecenum)
{
	piecenum = base;
}

AimPrimary(heading, pitch)
{
	signal 2;
	set-signal-mask 2;
	Static_Var_2 = 1;
	stop-spin turret around y-axis;
	turn turret to y-axis heading speed <250.>;
	turn sleeves to x-axis <0.> - pitch speed <300.>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeves around x-axis;
	start-script Restore1();
	return (1);
}

FirePrimary()
{
	++Static_Var_3;
	if( Static_Var_3 == 4 )
	{
		Static_Var_3 = 0;
	}
}

QueryPrimary(piecenum)
{
	piecenum = Static_Var_3;
}

AimFromPrimary(piecenum)
{
	piecenum = sleeves;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode v1 type NOHEATCLOUD | FALL;
		explode body type NOHEATCLOUD | FALL;
		explode base type NOHEATCLOUD | FALL;
		explode v2 type NOHEATCLOUD | FALL;
		explode v3 type NOHEATCLOUD | FALL ;
		explode sleeves type NOHEATCLOUD | EXPLODE_ON_HIT | FALL;
		explode v4 type NOHEATCLOUD | FALL ;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode v1 type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
		explode body type NOHEATCLOUD | SHATTER ;
		explode base type NOHEATCLOUD | SHATTER ;
		explode v2 type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
		explode v3 type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
		explode sleeves type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
		explode v4 type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
	explode v1 type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	explode body type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	explode base type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	explode v2 type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	explode v3 type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	explode sleeves type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	explode v4 type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
		return (corpsetype);
	}
	corpsetype = 3;
	explode v1 type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	explode body type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	explode base type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	explode v2 type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	explode v3 type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	explode sleeves type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	explode v4 type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	return (corpsetype);
}
