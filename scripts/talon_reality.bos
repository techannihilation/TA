#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, fork, body, w1, w2, w3, w4, w5,
       w6, w7, w8, w9, w10, w11, w12, wakes,
       s1, s2;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4;


WobbleUnit()
{
	while( TRUE )
	{
		if( Static_Var_2 )
		{
			move base to y-axis [2.] speed [3.];
		}
		else
		{
			move base to y-axis [-0.] speed [3.];
		}
		Static_Var_2 = !Static_Var_2;
		sleep 750;
	}
}

BankClerck(Func_Var_1, Func_Var_2, Func_Var_3)
{
	while( TRUE )
	{
		Func_Var_1 = get PIECE_XZ(base);
		Func_Var_3 = 0;
		if( get XZ_HYPOT(Func_Var_1 - Func_Var_2) >= 163840 )
		{
			Func_Var_3 = 0 - get XZ_ATAN(Func_Var_2 - Func_Var_1) * 80 / 40;
		}
		turn body to z-axis Func_Var_3 speed <60.>;
		Func_Var_2 = Func_Var_1;
		sleep 300;
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 258;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 257;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

HitByWeapon(anglex, anglez)
{
	signal 8;
	set-signal-mask 8;
	turn body to z-axis <0.> * anglez speed <105.>;
	turn body to x-axis <0.> * anglex speed <105.>;
	wait-for-turn body around z-axis;
	wait-for-turn body around x-axis;
	turn body to z-axis <0.> speed <30.>;
	turn body to x-axis <0.> speed <30.>;
}

StartMoving()
{
	signal 4;
	set-signal-mask 4;
}

StopMoving()
{
	signal 4;
}

waking()
{
	while( TRUE )
	{
		if( Static_Var_1 == 2 OR Static_Var_1 == 1 )
		{
			emit-sfx 3 from w1;
			emit-sfx 3 from w2;
			emit-sfx 3 from w3;
			emit-sfx 3 from w4;
			emit-sfx 3 from w5;
			emit-sfx 3 from w6;
			emit-sfx 3 from w7;
			emit-sfx 3 from w8;
			emit-sfx 3 from w9;
			emit-sfx 3 from w10;
			emit-sfx 3 from w11;
			emit-sfx 3 from w12;
			emit-sfx 5 from w1;
			emit-sfx 5 from w2;
			emit-sfx 5 from w3;
			emit-sfx 5 from w4;
			emit-sfx 5 from w5;
			emit-sfx 5 from w6;
			emit-sfx 5 from w7;
			emit-sfx 5 from w8;
			emit-sfx 5 from w9;
			emit-sfx 5 from w10;
			emit-sfx 5 from w11;
			emit-sfx 5 from w12;
		}
		sleep 325;
	}
}

setSFXoccupy(state)
{
	Static_Var_1 = state;
}

Create()
{
	start-script waking();
	start-script SmokeUnit();
	start-script BankClerck();
	start-script WobbleUnit();
}

restore()
{
	sleep 250;
}

AimPrimary(heading, pitch)
{
	signal 2;
	set-signal-mask 2;
	start-script restore();
	while( Static_Var_1 == 0 )
	{
		sleep 1000;
	}
	return (1);
}

FirePrimary()
{
	if( !Rand( 0, 4 ) )
	{
	}
	if( Rand( 0, 2 ) )
	{
	}
	if( Rand( 0, 2 ) )
	{
	}
	if( Rand( 0, 2 ) )
	{
	}
	if( Rand( 0, 1 ) )
	{
	}
	if( Rand( 0, 1 ) )
	{
	}
	if( Rand( 0, 1 ) )
	{
	}
}

QueryPrimary(piecenum)
{
	piecenum = base;
}

AimFromPrimary(piecenum)
{
	piecenum = base;
}

Activate()
{
	spin fork around y-axis speed <200.>;
}

Deactivate()
{
	spin fork around y-axis speed <0.>;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type NOHEATCLOUD;
		explode fork type NOHEATCLOUD;
		explode body type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type NOHEATCLOUD;
		explode fork type NOHEATCLOUD;
		explode body type NOHEATCLOUD |FALL;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode fork type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode body type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		return (corpsetype);

	}
	corpsetype = 3;
	explode base type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode fork type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode body type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	return (corpsetype);
}
