#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, door1, door2, plate, nano, nano2, beam;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4, Static_Var_5;


activatescr()
{
	move door1 to x-axis [0.000000] now;
	move door2 to x-axis [0.000000] now;
	move door1 to x-axis [4.000000] speed [6.000000];
	move door2 to x-axis [-4.000000] speed [6.000000];
	wait-for-move door1 along x-axis;
	move plate to y-axis [5.000000] speed [8.000000];
	wait-for-move plate along y-axis;
	move nano2 to z-axis [3.000000] speed [5.000000];
	wait-for-move nano2 along z-axis;
	set INBUILDSTANCE to 1;
	sleep 430;

}

deactivatescr()
{
	set INBUILDSTANCE to 0;
	turn nano to y-axis <0.000000> speed <160.000000>;
	wait-for-turn nano around y-axis;
	move nano2 to z-axis [0.000000] speed [5.000000];
	wait-for-move nano2 along z-axis;
	move plate to y-axis [0.000000] speed [8.000000];
	wait-for-move plate along y-axis;
	move door1 to x-axis [0.000000] speed [6.000000];
	move door2 to x-axis [0.000000] speed [6.000000];
	wait-for-move door1 along x-axis;
	sleep 390;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from body;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

RequestState(requestedstate, currentstate)
{
	if( Static_Var_2  )
	{
		Static_Var_1 = requestedstate;
		return (0);
	}
	Static_Var_2 = 1;
	currentstate = Static_Var_1;
	Static_Var_1 = requestedstate;
	while( Static_Var_1 != currentstate )
	{
		if( Static_Var_1 )
		{
			call-script deactivatescr();
			currentstate = 1;
			Static_Var_3 = 1;
		}
		else
		{
			call-script activatescr();
			currentstate = 0;
			Static_Var_3 = 0;
		}
	}
	Static_Var_2 = 0;
}
	
Create()
{
	Static_Var_3 = 1;
	Static_Var_1 = 1;
	Static_Var_2 = 0;
	start-script SmokeUnit();
}

Activate()
{
	start-script RequestState(0);
}

Desactivate()
{
	start-script RequestState(1);
}



StartBuilding(Func_Var_1, Func_Var_2)
{
	start-script RequestState(0);
	while( Static_Var_3 )
	{
		sleep 100;
	}
	signal 4;
	turn nano to y-axis Func_Var_1 speed <160.000000>;
	wait-for-turn nano around y-axis;
	set INBUILDSTANCE to 1;
}

StopBuilding()
{
	signal 4;
	set-signal-mask 4;
	sleep 6000;
	set-signal-mask 0;
	signal 4;
	start-script RequestState(1);

}

QueryNanoPiece(piecenum)
{
	piecenum = beam;
}

SweetSpot(piecenum)
{
	piecenum = body;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode body type NOHEATCLOUD;
		explode door1 type NOHEATCLOUD;
		explode door2 type NOHEATCLOUD;
		explode nano type NOHEATCLOUD;
		explode nano2 type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode body type NOHEATCLOUD | FALL;
		explode door1 type NOHEATCLOUD | FALL;
		explode door2 type NOHEATCLOUD | FALL;
		explode nano type NOHEATCLOUD | FALL;
		explode nano2 type NOHEATCLOUD | FALL;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode body type NOHEATCLOUD | FALL| SMOKE | FIRE | EXPLODE_ON_HIT;
		explode door1 type NOHEATCLOUD | FALL| SMOKE | FIRE | EXPLODE_ON_HIT;
		explode door2 type NOHEATCLOUD | FALL| SMOKE | FIRE | EXPLODE_ON_HIT;
		explode nano type NOHEATCLOUD | FALL| SMOKE | FIRE | EXPLODE_ON_HIT;
		explode nano2 type NOHEATCLOUD | FALL| SMOKE | FIRE | EXPLODE_ON_HIT;
		return (corpsetype);
	}
	corpsetype = 3;
	explode body type NOHEATCLOUD | FALL| SMOKE | FIRE | EXPLODE_ON_HIT;
	explode door1 type NOHEATCLOUD | FALL| SMOKE | FIRE | EXPLODE_ON_HIT;
	explode door2 type NOHEATCLOUD | FALL| SMOKE | FIRE | EXPLODE_ON_HIT;
	explode nano type NOHEATCLOUD | FALL| SMOKE | FIRE | EXPLODE_ON_HIT;
	explode nano2 type NOHEATCLOUD | FALL| SMOKE | FIRE | EXPLODE_ON_HIT;
	return (corpsetype);
}
