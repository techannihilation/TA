#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, turret, gun, barrel1, barrel2, flare1, flare2,
       leghl, foothl, leghr, foothr, legfr, footfr, legfl, footfl;

static-var  Static_Var_1, Static_Var_2, Static_Var_3;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Walk()
{
	while( TRUE )
	{
		if( Static_Var_1 )
		{
			turn leghr to x-axis <0.> now;
			turn legfr to x-axis <0.> now;
			turn leghl to x-axis <40.> now;
			turn legfl to x-axis <0.> now;
			turn foothr to x-axis <0.> now;
			turn footfr to x-axis <0.> now;
			turn foothl to x-axis <25.> now;
			turn footfl to x-axis <0.> now;
			turn leghr to x-axis <20.> speed <300.>;
			turn legfr to x-axis <-15.> speed <225.>;
			turn leghl to x-axis <20.> speed <300.>;
			turn legfl to x-axis <15.> speed <225.>;
			turn foothr to x-axis <-20.> speed <300.>;
			turn foothl to x-axis <15.> speed <150.>;
			turn footfl to x-axis <-15.> speed <225.>;
			wait-for-turn leghr around x-axis;
		}
		if( Static_Var_1 )
		{
			turn leghr to x-axis <40.> speed <300.>;
			turn legfr to x-axis <-20.> speed <75.>;
			turn leghl to x-axis <0.> speed <300.>;
			turn legfl to x-axis <30.> speed <225.>;
			turn foothr to x-axis <0.> speed <300.>;
			turn footfr to x-axis <10.> speed <150.>;
			turn foothl to x-axis <0.> speed <225.>;
			turn footfl to x-axis <0.> speed <225.>;
			wait-for-turn leghr around x-axis;
		}
		if( Static_Var_1 )
		{
			turn leghr to x-axis <50.> speed <150.>;
			turn legfr to x-axis <-15.> speed <75.>;
			turn leghl to x-axis <-20.> speed <300.>;
			turn legfl to x-axis <35.> speed <75.>;
			turn foothr to x-axis <15.> speed <225.>;
			turn footfr to x-axis <15.> speed <75.>;
			turn footfl to x-axis <10.> speed <150.>;
			wait-for-turn leghr around x-axis;
		}
		if( Static_Var_1 )
		{
			turn leghr to x-axis <40.> speed <150.>;
			turn legfr to x-axis <0.> speed <225.>;
			turn leghl to x-axis <-30.> speed <150.>;
			turn legfl to x-axis <30.> speed <75.>;
			turn foothr to x-axis <25.> speed <150.>;
			turn footfr to x-axis <0.> speed <225.>;
			turn foothl to x-axis <10.> speed <150.>;
			turn footfl to x-axis <15.> speed <75.>;
			wait-for-turn leghr around x-axis;
		}
		if( Static_Var_1 )
		{
			turn leghr to x-axis <20.> speed <300.>;
			turn legfr to x-axis <15.> speed <225.>;
			turn leghl to x-axis <-20.> speed <150.>;
			turn legfl to x-axis <15.> speed <225.>;
			turn foothr to x-axis <15.> speed <150.>;
			turn footfr to x-axis <-15.> speed <225.>;
			turn foothl to x-axis <20.> speed <150.>;
			turn footfl to x-axis <10.> speed <75.>;
			wait-for-turn leghr around x-axis;
		}
		if( Static_Var_1 )
		{
			turn leghr to x-axis <0.> speed <300.>;
			turn legfr to x-axis <30.> speed <225.>;
			turn leghl to x-axis <0.> speed <300.>;
			turn legfl to x-axis <0.> speed <225.>;
			turn foothr to x-axis <0.> speed <225.>;
			turn footfr to x-axis <0.> speed <225.>;
			turn foothl to x-axis <0.> speed <300.>;
			turn footfl to x-axis <0.> speed <150.>;
			wait-for-turn leghr around x-axis;
		}
		if( Static_Var_1 )
		{
			turn leghr to x-axis <-20.> speed <300.>;
			turn legfr to x-axis <35.> speed <75.>;
			turn leghl to x-axis <20.> speed <300.>;
			turn legfl to x-axis <-15.> speed <225.>;
			turn footfr to x-axis <10.> speed <150.>;
			turn foothl to x-axis <-20.> speed <300.>;
			wait-for-turn leghr around x-axis;
		}
		if( Static_Var_1 )
		{
			turn leghr to x-axis <-30.> speed <150.>;
			turn legfr to x-axis <30.> speed <75.>;
			turn leghl to x-axis <40.> speed <300.>;
			turn legfl to x-axis <-20.> speed <75.>;
			turn foothr to x-axis <10.> speed <150.>;
			turn footfr to x-axis <15.> speed <75.>;
			turn foothl to x-axis <0.> speed <300.>;
			turn footfl to x-axis <10.> speed <150.>;
			wait-for-turn leghr around x-axis;
		}
		if( Static_Var_1 )
		{
			turn leghr to x-axis <-20.> speed <150.>;
			turn legfr to x-axis <15.> speed <225.>;
			turn leghl to x-axis <50.> speed <150.>;
			turn legfl to x-axis <-15.> speed <75.>;
			turn foothr to x-axis <20.> speed <150.>;
			turn footfr to x-axis <10.> speed <75.>;
			turn foothl to x-axis <15.> speed <225.>;
			turn footfl to x-axis <15.> speed <75.>;
			wait-for-turn leghr around x-axis;
		}
		if( Static_Var_1 )
		{
			turn leghr to x-axis <0.> speed <300.>;
			turn legfr to x-axis <0.> speed <225.>;
			turn leghl to x-axis <40.> speed <150.>;
			turn legfl to x-axis <0.> speed <225.>;
			turn foothr to x-axis <0.> speed <300.>;
			turn footfr to x-axis <0.> speed <150.>;
			turn foothl to x-axis <25.> speed <150.>;
			turn footfl to x-axis <0.> speed <225.>;
			wait-for-turn leghr around x-axis;
		}
		if( !Static_Var_1 )
		{
			turn leghr to x-axis <0.> speed <400.>;
			turn legfr to x-axis <0.> speed <300.>;
			turn leghl to x-axis <0.> speed <400.>;
			turn legfl to x-axis <0.> speed <300.>;
			turn foothr to x-axis <0.> speed <400.>;
			turn footfr to x-axis <0.> speed <400.>;
			turn foothl to x-axis <0.> speed <400.>;
			turn footfl to x-axis <0.> speed <400.>;
			wait-for-turn leghr around x-axis;
		}
	}
}

Create()
{
	hide flare1;
	dont-cache flare1;
	hide flare2;
	dont-cache flare2;
	Static_Var_1 = 0;
	Static_Var_3 = 0;
	Static_Var_2 = 3000;
	start-script Walk();
	start-script SmokeUnit();
}

SweetSpot(piecenum)
{
	piecenum = base;
}

SetMaxReloadTime(Func_Var_1)
{
	Static_Var_2 = Func_Var_1 * 2;
}

RestoreAfterDelay()
{
	set-signal-mask 2;
	sleep Static_Var_2;
	turn turret to y-axis <0.> speed <90.>;
	turn gun to x-axis <0.> speed <55.>;
}

StartMoving()
{
	Static_Var_1 = 1;
}

StopMoving()
{
	Static_Var_1 = 0;
}

QueryPrimary(piecenum)
{
	if( Static_Var_3 == 0 )
	{
		piecenum = flare1;
	}
	if( Static_Var_3 == 1 )
	{
		piecenum = flare2;
	}
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

AimPrimary(heading, pitch)
{
	signal 2;
	set-signal-mask 2;
	turn turret to y-axis heading speed <70.>;
	turn gun to x-axis <0.> - pitch speed <40.>;
	wait-for-turn turret around y-axis;
	wait-for-turn gun around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	if( Static_Var_3 == 0 )
	{
		emit-sfx 1025 from flare1;
		move barrel1 to z-axis [-1.5] speed [200.];
		sleep 150;
		move barrel1 to z-axis [0.] speed [5.];
		
	}	if( Static_Var_3 == 1 )
	{
		emit-sfx 1025 from flare2;
		move barrel2 to z-axis [-1.5] speed [200.];
		sleep 150;
		move barrel2 to z-axis [0.] speed [5.];
	}
	++Static_Var_3;
	if( Static_Var_3 == 2 )
	{
		Static_Var_3 = 0;
	}
	
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode body type NOHEATCLOUD ;
		explode turret type NOHEATCLOUD ;
		explode barrel1 type NOHEATCLOUD ;
		explode foothr type NOHEATCLOUD ;
		explode footfr type NOHEATCLOUD ;
		explode foothl type NOHEATCLOUD ;
		explode footfl type NOHEATCLOUD ;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode body type NOHEATCLOUD  | FALL ;
		explode turret type SHATTER | NOHEATCLOUD;
		explode gun type NOHEATCLOUD;
		explode barrel1 type FALL | NOHEATCLOUD;
		explode barrel2 type NOHEATCLOUD;
		explode foothr type NOHEATCLOUD;
		explode footfr type NOHEATCLOUD;
		explode foothl type NOHEATCLOUD;
		explode footfl type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode body type SHATTER | NOHEATCLOUD ;
		explode turret type SHATTER | EXPLODE_ON_HIT | NOHEATCLOUD;
		explode gun type FALL | BITMAP3;
		explode barrel1 type FALL | EXPLODE_ON_HIT | NOHEATCLOUD;
		explode barrel2 type FALL | NOHEATCLOUD;
		explode leghr type NOHEATCLOUD;
		explode legfr type NOHEATCLOUD;
		explode leghl type NOHEATCLOUD;
		explode legfl type NOHEATCLOUD;
		explode foothr type FALL | NOHEATCLOUD;
		explode footfr type FALL | NOHEATCLOUD;
		explode foothl type FALL | NOHEATCLOUD;
		explode footfl type FALL | NOHEATCLOUD;
		return (corpsetype);
	}
	corpsetype = 3;
	explode body type SHATTER | NOHEATCLOUD ;
	explode turret type SHATTER | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode gun type FALL | BITMAP3;
	explode barrel1 type FALL | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode barrel2 type FALL | NOHEATCLOUD;
	explode leghr type NOHEATCLOUD;
	explode legfr type NOHEATCLOUD;
	explode leghl type NOHEATCLOUD;
	explode legfl type NOHEATCLOUD;
	explode foothr type FALL | NOHEATCLOUD;
	explode footfr type FALL | NOHEATCLOUD;
	explode foothl type FALL | NOHEATCLOUD;
	explode footfl type FALL | NOHEATCLOUD;
	return (corpsetype);
}
