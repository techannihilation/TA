#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, tower, turret, gear,
	   spindle, sleeve1, barrel1, sleeve2, barrel2, sleeve3, barrel3, sleeve4, barrel4,
	   spindleback, flare, side1, side2, sleeve;

static-var  gun_1; 

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_2			4

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	hide flare;
	dont-cache flare;	
	dont-cache barrel1;
	dont-cache barrel2;
	dont-cache barrel3;
	dont-cache barrel4;
	dont-cache sleeve1;
	dont-cache sleeve2;
	dont-cache sleeve3;
	dont-cache sleeve4;
	dont-cache spindle;
	dont-cache turret;
	dont-cache gear;
	dont-cache side1;
	dont-cache side2;
	dont-cache spindleback;
	
	dont-shade flare;
	dont-shade barrel1;
	dont-shade barrel2;
	dont-shade barrel3;
	dont-shade barrel4;
	dont-shade sleeve1;
	dont-shade sleeve2;
	dont-shade sleeve3;
	dont-shade sleeve4;		
	dont-shade spindle;	
	dont-shade turret;	
	dont-shade gear;
	dont-shade side1;
	dont-shade side2;
	dont-shade spindleback;
	
	gun_1 = 0;	
	start-script SmokeUnit();
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <300.021978>;
	turn gear to x-axis <0.000000> - pitch speed <200.010989>;
	wait-for-turn turret around y-axis;
	wait-for-turn gear around x-axis;
	return (1);
}

FirePrimary()
{
	if( gun_1 == 0 )
	{
		show flare;
		sleep 215;
		hide flare;
		turn spindle to z-axis <72.000000> speed <350.000000>;
	}
	if( gun_1 == 1 )
	{
		show flare;
		sleep 215;
		hide flare;
		turn spindle to z-axis <144.000000> speed <350.000000>;
	}	
	if( gun_1 == 2 )
	{
		show flare;
		sleep 215;
		hide flare;
		turn spindle to z-axis <216.000000> speed <350.000000>;
	}	
	if( gun_1 == 3 )
	{
		show flare;
		sleep 215;
		hide flare;
		turn spindle to z-axis <288.000000> speed <350.000000>;
	}	
	if( gun_1 == 4 )
	{
		show flare;
		sleep 215;
		hide flare;
		turn spindle to z-axis <0.000000> speed <350.000000>;
	}	
		
	++gun_1;
	if( gun_1 == 5 )
	{
		gun_1 = 0;
	}
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}


AimFromPrimary(piecenum)
{
	piecenum = gear;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide flare;	
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type NOHEATCLOUD;
		explode tower type NOHEATCLOUD;
		explode sleeve type NOHEATCLOUD;
		explode spindle type NOHEATCLOUD;
		explode gear type NOHEATCLOUD;
		explode side1 type NOHEATCLOUD;
		explode side2 type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type NOHEATCLOUD;
		explode tower type NOHEATCLOUD | FALL;
		explode sleeve type NOHEATCLOUD | FALL;
		explode spindle type NOHEATCLOUD | FALL;
		explode gear type NOHEATCLOUD | FALL;
		explode side1 type NOHEATCLOUD | FALL;
		explode side2 type NOHEATCLOUD | FALL;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type NOHEATCLOUD;
		explode tower type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
		explode sleeve type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
		explode spindle type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
		explode gear type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
		explode side1 type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
		explode side2 type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
		return (corpsetype);
	}
	corpsetype = 3;
	explode base type NOHEATCLOUD;
	explode tower type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	explode sleeve type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	explode spindle type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	explode gear type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	explode side1 type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	explode side2 type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	return (corpsetype);

}
