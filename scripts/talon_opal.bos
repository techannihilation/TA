#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  torso, lpflarer, lpflarel, rarm, larm, pelvis, gaussflarel, gaussflarer,
       turret, spflare, rleg, rfoot, lleg, lfoot, lthigh, rthigh, base;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4, Static_Var_5,
            Static_Var_6, Static_Var_7, Static_Var_8, Static_Var_9, Static_Move, Static_Turn;


walk()
{
	if( Static_Var_3 )
	{
		move pelvis to y-axis [-0.] speed Static_Move * [1.000000];
		move rleg to y-axis [0.] speed Static_Move * [1.000000];
		move rleg to z-axis [0.] speed Static_Move * [1.000000];
		move rfoot to z-axis [0.] speed Static_Move * [1.000000];
		move lleg to y-axis [0.] speed Static_Move * [1.000000];
		move lleg to z-axis [0.] speed Static_Move * [1.000000];
		move lfoot to z-axis [0.] speed Static_Move * [1.000000];
		move rarm to x-axis [0.] speed Static_Move * [1.000000];
		move lpflarer to x-axis [0.] speed Static_Move * [1.000000];
		move larm to x-axis [0.] speed Static_Move * [1.000000];
		move lpflarel to x-axis [0.] speed Static_Move * [1.000000];
		turn pelvis to x-axis <-0.> speed Static_Turn * <1.000000>;
		turn torso to x-axis <13.> speed Static_Turn * <1.000000>;
		turn lthigh to x-axis <11.> speed Static_Turn * <1.000000>;
		turn rthigh to x-axis <-42.> speed Static_Turn * <1.000000>;
		turn rleg to x-axis <-5.> speed Static_Turn * <1.000000>;
		turn rfoot to x-axis <47.> speed Static_Turn * <1.000000>;
		turn lleg to x-axis <61.> speed Static_Turn * <1.000000>;
		turn lfoot to x-axis <-50.> speed Static_Turn * <1.000000>;
		sleep 80;
	}
	if( Static_Var_3 )
	{
		move pelvis to y-axis [-0.] speed Static_Move * [1.000000];
		turn pelvis to x-axis <-3.> speed Static_Turn * <1.000000>;
		turn torso to x-axis <13.> speed Static_Turn * <1.000000>;
		turn lthigh to x-axis <34.> speed Static_Turn * <1.000000>;
		turn rthigh to x-axis <-28.> speed Static_Turn * <1.000000>;
		turn rleg to x-axis <-7.> speed Static_Turn * <1.000000>;
		turn rfoot to x-axis <38.> speed Static_Turn * <1.000000>;
		turn lleg to x-axis <34.> speed Static_Turn * <1.000000>;
		turn lfoot to x-axis <-25.> speed Static_Turn * <1.000000>;
		sleep 80;
	}
	if( Static_Var_3 )
	{
		move pelvis to y-axis [-0.] speed Static_Move * [1.000000];
		turn pelvis to x-axis <-5.> speed Static_Turn * <1.000000>;
		turn torso to x-axis <13.> speed Static_Turn * <1.000000>;
		turn lthigh to x-axis <29.> speed Static_Turn * <1.000000>;
		turn rthigh to x-axis <-19.> speed Static_Turn * <1.000000>;
		turn rleg to x-axis <-4.> speed Static_Turn * <1.000000>;
		turn rfoot to x-axis <28.> speed Static_Turn * <1.000000>;
		turn lleg to x-axis <14.> speed Static_Turn * <1.000000>;
		turn lfoot to x-axis <-26.> speed Static_Turn * <1.000000>;
		sleep 80;
	}
	if( Static_Var_3 )
	{
		move pelvis to y-axis [-0.] speed Static_Move * [1.000000];
		turn pelvis to x-axis <-6.> speed Static_Turn * <1.000000>;
		turn torso to x-axis <13.> speed Static_Turn * <1.000000>;
		turn lthigh to x-axis <13.> speed Static_Turn * <1.000000>;
		turn rthigh to x-axis <0.> speed Static_Turn * <1.000000>;
		turn rleg to x-axis <3.> speed Static_Turn * <1.000000>;
		turn rfoot to x-axis <2.> speed Static_Turn * <1.000000>;
		turn lleg to x-axis <-12.> speed Static_Turn * <1.000000>;
		turn lfoot to x-axis <8.> speed Static_Turn * <1.000000>;
		sleep 80;
	}
	if( Static_Var_3 )
	{
		move pelvis to y-axis [0.] speed Static_Move * [1.000000];
		turn pelvis to x-axis <-5.> speed Static_Turn * <1.000000>;
		turn torso to x-axis <12.> speed Static_Turn * <1.000000>;
		turn lthigh to x-axis <-19.> speed Static_Turn * <1.000000>;
		turn rthigh to x-axis <2.> speed Static_Turn * <1.000000>;
		turn rleg to x-axis <8.> speed Static_Turn * <1.000000>;
		turn rfoot to x-axis <-6.> speed Static_Turn * <1.000000>;
		turn lleg to x-axis <-17.> speed Static_Turn * <1.000000>;
		turn lfoot to x-axis <43.> speed Static_Turn * <1.000000>;
		sleep 80;
	}
	if( Static_Var_3 )
	{
		move pelvis to y-axis [-0.] speed Static_Move * [1.000000];
		turn pelvis to x-axis <-3.> speed Static_Turn * <1.000000>;
		turn torso to x-axis <12.> speed Static_Turn * <1.000000>;
		turn lthigh to x-axis <-32.> speed Static_Turn * <1.000000>;
		turn rthigh to x-axis <13.> speed Static_Turn * <1.000000>;
		turn rleg to x-axis <23.> speed Static_Turn * <1.000000>;
		turn rfoot to x-axis <-33.> speed Static_Turn * <1.000000>;
		turn lfoot to x-axis <7.> speed Static_Turn * <1.000000>;
		sleep 80;
	}
	if( Static_Var_3 )
	{
		move pelvis to y-axis [-0.] speed Static_Move * [1.000000];
		turn pelvis to x-axis <-0.> speed Static_Turn * <1.000000>;
		turn torso to x-axis <13.> speed Static_Turn * <1.000000>;
		turn lthigh to x-axis <-36.> speed Static_Turn * <1.000000>;
		turn rleg to x-axis <44.> speed Static_Turn * <1.000000>;
		turn rfoot to x-axis <-43.> speed Static_Turn * <1.000000>;
		turn lleg to x-axis <-10.> speed Static_Turn * <1.000000>;
		turn lfoot to x-axis <28.> speed Static_Turn * <1.000000>;
		sleep 80;
	}
	if( Static_Var_3 )
	{
		move pelvis to y-axis [-0.] speed Static_Move * [1.000000];
		turn pelvis to x-axis <-0.> speed Static_Turn * <1.000000>;
		turn torso to x-axis <13.> speed Static_Turn * <1.000000>;
		turn lthigh to x-axis <-42.> speed Static_Turn * <1.000000>;
		turn rthigh to x-axis <13.> speed Static_Turn * <1.000000>;
		turn rleg to x-axis <61.> speed Static_Turn * <1.000000>;
		turn rfoot to x-axis <-45.> speed Static_Turn * <1.000000>;
		turn lleg to x-axis <-4.> speed Static_Turn * <1.000000>;
		turn lfoot to x-axis <47.> speed Static_Turn * <1.000000>;
		sleep 80;
	}
	if( Static_Var_3 )
	{
		move pelvis to y-axis [-0.] speed Static_Move * [1.000000];
		turn pelvis to x-axis <-3.> speed Static_Turn * <1.000000>;
		turn torso to x-axis <13.> speed Static_Turn * <1.000000>;
		turn lthigh to x-axis <-33.> speed Static_Turn * <1.000000>;
		turn rthigh to x-axis <34.> speed Static_Turn * <1.000000>;
		turn rleg to x-axis <24.> speed Static_Turn * <1.000000>;
		turn rfoot to x-axis <-11.> speed Static_Turn * <1.000000>;
		turn lleg to x-axis <-6.> speed Static_Turn * <1.000000>;
		turn lfoot to x-axis <43.> speed Static_Turn * <1.000000>;
		sleep 80;
	}
	if( Static_Var_3 )
	{
		move pelvis to y-axis [-0.] speed Static_Move * [1.000000];
		turn pelvis to x-axis <-5.> speed Static_Turn * <1.000000>;
		turn torso to x-axis <13.> speed Static_Turn * <1.000000>;
		turn lthigh to x-axis <-25.> speed Static_Turn * <1.000000>;
		turn rthigh to x-axis <29.> speed Static_Turn * <1.000000>;
		turn rleg to x-axis <11.> speed Static_Turn * <1.000000>;
		turn rfoot to x-axis <-21.> speed Static_Turn * <1.000000>;
		turn lleg to x-axis <-4.> speed Static_Turn * <1.000000>;
		turn lfoot to x-axis <34.> speed Static_Turn * <1.000000>;
		sleep 80;
	}
	if( Static_Var_3 )
	{
		move pelvis to y-axis [-0.] speed Static_Move * [1.000000];
		turn pelvis to x-axis <-6.> speed Static_Turn * <1.000000>;
		turn torso to x-axis <13.> speed Static_Turn * <1.000000>;
		turn lthigh to x-axis <-12.> speed Static_Turn * <1.000000>;
		turn rthigh to x-axis <-0.> speed Static_Turn * <1.000000>;
		turn rleg to x-axis <-12.> speed Static_Turn * <1.000000>;
		turn rfoot to x-axis <23.> speed Static_Turn * <1.000000>;
		turn lleg to x-axis <4.> speed Static_Turn * <1.000000>;
		turn lfoot to x-axis <14.> speed Static_Turn * <1.000000>;
		sleep 80;
	}
	if( Static_Var_3 )
	{
		move pelvis to y-axis [0.] speed Static_Move * [1.000000];
		turn pelvis to x-axis <-5.> speed Static_Turn * <1.000000>;
		turn lthigh to x-axis <0.> speed Static_Turn * <1.000000>;
		turn rthigh to x-axis <-19.> speed Static_Turn * <1.000000>;
		turn rleg to x-axis <-20.> speed Static_Turn * <1.000000>;
		turn rfoot to x-axis <23.> speed Static_Turn * <1.000000>;
		turn lleg to x-axis <24.> speed Static_Turn * <1.000000>;
		turn lfoot to x-axis <-21.> speed Static_Turn * <1.000000>;
		sleep 80;
	}
	if( Static_Var_3 )
	{
		move pelvis to y-axis [-0.] speed Static_Move * [1.000000];
		turn pelvis to x-axis <-3.> speed Static_Turn * <1.000000>;
		turn lthigh to x-axis <9.> speed Static_Turn * <1.000000>;
		turn rthigh to x-axis <-29.> speed Static_Turn * <1.000000>;
		turn rleg to x-axis <-25.> speed Static_Turn * <1.000000>;
		turn rfoot to x-axis <26.> speed Static_Turn * <1.000000>;
		turn lleg to x-axis <32.> speed Static_Turn * <1.000000>;
		turn lfoot to x-axis <-38.> speed Static_Turn * <1.000000>;
		sleep 80;
	}
	move pelvis to y-axis [-0.] speed Static_Move * [1.000000];
	turn pelvis to x-axis <-0.> speed Static_Turn * <1.000000>;
	turn torso to x-axis <13.> speed Static_Turn * <1.000000>;
	turn lthigh to x-axis <11.> speed Static_Turn * <1.000000>;
	turn rthigh to x-axis <-37.> speed Static_Turn * <1.000000>;
	turn rleg to x-axis <-9.> speed Static_Turn * <1.000000>;
	turn rfoot to x-axis <6.> speed Static_Turn * <1.000000>;
	turn lleg to x-axis <48.> speed Static_Turn * <1.000000>;
	turn lfoot to x-axis <-47.> speed Static_Turn * <1.000000>;
	sleep 80;
}

walklegs()
{
	if( Static_Var_3 )
	{
		move pelvis to y-axis [-0.] speed Static_Move * [1.000000];
		move rleg to y-axis [0.] speed Static_Move * [1.000000];
		move rleg to z-axis [0.] speed Static_Move * [1.000000];
		move rfoot to z-axis [0.] speed Static_Move * [1.000000];
		move lleg to y-axis [0.] speed Static_Move * [1.000000];
		move lleg to z-axis [0.] speed Static_Move * [1.000000];
		move lfoot to z-axis [0.] speed Static_Move * [1.000000];
		move rarm to x-axis [0.] speed Static_Move * [1.000000];
		move lpflarer to x-axis [0.] speed Static_Move * [1.000000];
		move larm to x-axis [0.] speed Static_Move * [1.000000];
		move lpflarel to x-axis [0.] speed Static_Move * [1.000000];
		turn pelvis to x-axis <-0.> speed Static_Turn * <1.000000>;
		turn lthigh to x-axis <11.> speed Static_Turn * <1.000000>;
		turn rthigh to x-axis <-42.> speed Static_Turn * <1.000000>;
		turn rleg to x-axis <-5.> speed Static_Turn * <1.000000>;
		turn rfoot to x-axis <47.> speed Static_Turn * <1.000000>;
		turn lleg to x-axis <61.> speed Static_Turn * <1.000000>;
		turn lfoot to x-axis <-50.> speed Static_Turn * <1.000000>;
		sleep 80;
	}
	if( Static_Var_3 )
	{
		move pelvis to y-axis [-0.] speed Static_Move * [1.000000];
		turn pelvis to x-axis <-3.> speed Static_Turn * <1.000000>;
		turn lthigh to x-axis <34.> speed Static_Turn * <1.000000>;
		turn rthigh to x-axis <-28.> speed Static_Turn * <1.000000>;
		turn rleg to x-axis <-7.> speed Static_Turn * <1.000000>;
		turn rfoot to x-axis <38.> speed Static_Turn * <1.000000>;
		turn lleg to x-axis <34.> speed Static_Turn * <1.000000>;
		turn lfoot to x-axis <-25.> speed Static_Turn * <1.000000>;
		sleep 80;
	}
	if( Static_Var_3 )
	{
		move pelvis to y-axis [-0.] speed Static_Move * [1.000000];
		turn pelvis to x-axis <-5.> speed Static_Turn * <1.000000>;
		turn lthigh to x-axis <29.> speed Static_Turn * <1.000000>;
		turn rthigh to x-axis <-19.> speed Static_Turn * <1.000000>;
		turn rleg to x-axis <-4.> speed Static_Turn * <1.000000>;
		turn rfoot to x-axis <28.> speed Static_Turn * <1.000000>;
		turn lleg to x-axis <14.> speed Static_Turn * <1.000000>;
		turn lfoot to x-axis <-26.> speed Static_Turn * <1.000000>;
		sleep 80;
	}
	if( Static_Var_3 )
	{
		move pelvis to y-axis [-0.] speed Static_Move * [1.000000];
		turn pelvis to x-axis <-6.> speed Static_Turn * <1.000000>;
		turn lthigh to x-axis <13.> speed Static_Turn * <1.000000>;
		turn rthigh to x-axis <0.> speed Static_Turn * <1.000000>;
		turn rleg to x-axis <3.> speed Static_Turn * <1.000000>;
		turn rfoot to x-axis <2.> speed Static_Turn * <1.000000>;
		turn lleg to x-axis <-12.> speed Static_Turn * <1.000000>;
		turn lfoot to x-axis <8.> speed Static_Turn * <1.000000>;
		sleep 60;
	}
	if( Static_Var_3 )
	{
		move pelvis to y-axis [0.] speed Static_Move * [1.000000];
		turn pelvis to x-axis <-5.> speed Static_Turn * <1.000000>;
		turn lthigh to x-axis <-19.> speed Static_Turn * <1.000000>;
		turn rthigh to x-axis <2.> speed Static_Turn * <1.000000>;
		turn rleg to x-axis <8.> speed Static_Turn * <1.000000>;
		turn rfoot to x-axis <-6.> speed Static_Turn * <1.000000>;
		turn lleg to x-axis <-17.> speed Static_Turn * <1.000000>;
		turn lfoot to x-axis <43.> speed Static_Turn * <1.000000>;
		sleep 80;
	}
	if( Static_Var_3 )
	{
		move pelvis to y-axis [-0.] speed Static_Move * [1.000000];
		turn pelvis to x-axis <-3.> speed Static_Turn * <1.000000>;
		turn lthigh to x-axis <-32.> speed Static_Turn * <1.000000>;
		turn rthigh to x-axis <13.> speed Static_Turn * <1.000000>;
		turn rleg to x-axis <23.> speed Static_Turn * <1.000000>;
		turn rfoot to x-axis <-33.> speed Static_Turn * <1.000000>;
		turn lfoot to x-axis <7.> speed Static_Turn * <1.000000>;
		sleep 80;
	}
	if( Static_Var_3 )
	{
		move pelvis to y-axis [-0.] speed Static_Move * [1.000000];
		turn pelvis to x-axis <-0.> speed Static_Turn * <1.000000>;
		turn lthigh to x-axis <-36.> speed Static_Turn * <1.000000>;
		turn rleg to x-axis <44.> speed Static_Turn * <1.000000>;
		turn rfoot to x-axis <-43.> speed Static_Turn * <1.000000>;
		turn lleg to x-axis <-10.> speed Static_Turn * <1.000000>;
		turn lfoot to x-axis <28.> speed Static_Turn * <1.000000>;
		sleep 80;
	}
	if( Static_Var_3 )
	{
		move pelvis to y-axis [-0.] speed Static_Move * [1.000000];
		turn pelvis to x-axis <-0.> speed Static_Turn * <1.000000>;
		turn lthigh to x-axis <-42.> speed Static_Turn * <1.000000>;
		turn rthigh to x-axis <13.> speed Static_Turn * <1.000000>;
		turn rleg to x-axis <61.> speed Static_Turn * <1.000000>;
		turn rfoot to x-axis <-45.> speed Static_Turn * <1.000000>;
		turn lleg to x-axis <-4.> speed Static_Turn * <1.000000>;
		turn lfoot to x-axis <47.> speed Static_Turn * <1.000000>;
		sleep 80;
	}
	if( Static_Var_3 )
	{
		move pelvis to y-axis [-0.] speed Static_Move * [1.000000];
		turn pelvis to x-axis <-3.> speed Static_Turn * <1.000000>;
		turn lthigh to x-axis <-33.> speed Static_Turn * <1.000000>;
		turn rthigh to x-axis <34.> speed Static_Turn * <1.000000>;
		turn rleg to x-axis <24.> speed Static_Turn * <1.000000>;
		turn rfoot to x-axis <-11.> speed Static_Turn * <1.000000>;
		turn lleg to x-axis <-6.> speed Static_Turn * <1.000000>;
		turn lfoot to x-axis <43.> speed Static_Turn * <1.000000>;
		sleep 80;
	}
	if( Static_Var_3 )
	{
		move pelvis to y-axis [-0.] speed Static_Move * [1.000000];
		turn pelvis to x-axis <-5.> speed Static_Turn * <1.000000>;
		turn lthigh to x-axis <-25.> speed Static_Turn * <1.000000>;
		turn rthigh to x-axis <29.> speed Static_Turn * <1.000000>;
		turn rleg to x-axis <11.> speed Static_Turn * <1.000000>;
		turn rfoot to x-axis <-21.> speed Static_Turn * <1.000000>;
		turn lleg to x-axis <-4.> speed Static_Turn * <1.000000>;
		turn lfoot to x-axis <34.> speed Static_Turn * <1.000000>;
		sleep 80;
	}
	if( Static_Var_3 )
	{
		move pelvis to y-axis [-0.] speed Static_Turn * <1.000000>;
		turn pelvis to x-axis <-6.> speed Static_Move * [1.000000];
		turn lthigh to x-axis <-12.> speed Static_Turn * <1.000000>;
		turn rthigh to x-axis <-0.> speed Static_Turn * <1.000000>;
		turn rleg to x-axis <-12.> speed Static_Turn * <1.000000>;
		turn rfoot to x-axis <23.> speed Static_Turn * <1.000000>;
		turn lleg to x-axis <4.> speed Static_Turn * <1.000000>;
		turn lfoot to x-axis <14.> speed Static_Turn * <1.000000>;
		sleep 80;
	}
	if( Static_Var_3 )
	{
		move pelvis to y-axis [0.] speed Static_Move * [1.000000];
		turn pelvis to x-axis <-5.> speed Static_Turn * <1.000000>;
		turn lthigh to x-axis <0.> speed Static_Turn * <1.000000>;
		turn rthigh to x-axis <-19.> speed Static_Turn * <1.000000>;
		turn rleg to x-axis <-20.> speed Static_Turn * <1.000000>;
		turn rfoot to x-axis <23.> speed Static_Turn * <1.000000>;
		turn lleg to x-axis <24.> speed Static_Turn * <1.000000>;
		turn lfoot to x-axis <-21.> speed Static_Turn * <1.000000>;
		sleep 80;
	}
	if( Static_Var_3 )
	{
		move pelvis to y-axis [-0.] speed Static_Move * [1.000000];
		turn pelvis to x-axis <-3.> speed Static_Turn * <1.000000>;
		turn lthigh to x-axis <9.> speed Static_Turn * <1.000000>;
		turn rthigh to x-axis <-29.> speed Static_Turn * <1.000000>;
		turn rleg to x-axis <-25.> speed Static_Turn * <1.000000>;
		turn rfoot to x-axis <26.> speed Static_Turn * <1.000000>;
		turn lleg to x-axis <32.> speed Static_Turn * <1.000000>;
		turn lfoot to x-axis <-38.> speed Static_Turn * <1.000000>;
		sleep 80;
	}
	move pelvis to y-axis [-0.] speed Static_Move * [1.000000];
	turn pelvis to x-axis <-0.> speed Static_Turn * <1.000000>;
	turn lthigh to x-axis <11.> speed Static_Turn * <1.000000>;
	turn rthigh to x-axis <-37.> speed Static_Turn * <1.000000>;
	turn rleg to x-axis <-9.> speed Static_Turn * <1.000000>;
	turn rfoot to x-axis <6.> speed Static_Turn * <1.000000>;
	turn lleg to x-axis <48.> speed Static_Turn * <1.000000>;
	turn lfoot to x-axis <-47.> speed Static_Turn * <1.000000>;
	sleep 80;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from torso;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

MotionControl(moving, aiming, justmoved)
{
	justmoved = TRUE;
	while( TRUE )
	{
		moving = Static_Var_3;
		aiming = Static_Var_4;
		if( moving )
		{
			if( aiming )
			{
				Static_Var_5 = 1;
				call-script walklegs();
			}
			if( !aiming )
			{
				Static_Var_5 = 0;
				call-script walk();
			}
			justmoved = TRUE;
		}
		if( !moving )
		{
			Static_Var_5 = 1;
			if( justmoved )
			{
				move pelvis to y-axis [0.] speed [4.000000];
				turn rthigh to x-axis <0.> speed Static_Turn * <1.000000>;
				turn rleg to x-axis <0.> speed Static_Turn * <1.000000>;
				turn rfoot to x-axis <0.> speed Static_Turn * <1.000000>;
				turn lthigh to x-axis <0.> speed Static_Turn * <1.000000>;
				turn lleg to x-axis <0.> speed Static_Turn * <1.000000>;
				turn lfoot to x-axis <0.> speed Static_Turn * <1.000000>;
				if( !aiming )
				{
					turn torso to y-axis <0.> speed Static_Turn * <1.000000>;
					turn rarm to x-axis <0.> speed Static_Turn * <1.500000>;
					turn larm to x-axis <0.> speed Static_Turn * <1.500000>;
				}
				justmoved = FALSE;
			}
			sleep 100;
		}
	}
}

Create()
{
	set ARMORED to 0;
	Static_Var_3 = 0;
	Static_Var_4 = 0;
	Static_Var_5 = 1;
	Static_Var_1 = 1;
	Static_Var_2 = 1;
	set ARMORED to 0;
	Static_Var_6 = 0;
	Static_Var_8 = 32;
	Static_Var_9 = 1;
	Static_Var_7 = 2000;
	Static_Move = 5;
	Static_Turn = 90;
	start-script MotionControl();
	start-script SmokeUnit();
}

SetMaxReloadTime(Func_Var_1)
{
	Static_Var_7 = Func_Var_1;
}

StartMoving()
{
	Static_Var_3 = 1;
}

StopMoving()
{
	Static_Var_3 = 0;
}

RestoreAfterDelay()
{
	sleep 2750;
	turn torso to y-axis <0.> speed <90.>;
	turn torso to x-axis <0.> speed <45.>;
	turn turret to y-axis <0.> speed <90.>;
	turn larm to x-axis <0.> speed <45.>;
	turn rarm to x-axis <0.> speed <45.>;
	turn turret to x-axis <0.000000> speed <25.>;
	wait-for-turn torso around y-axis;
	wait-for-turn torso around x-axis;
	wait-for-turn turret around y-axis;
	wait-for-turn larm around x-axis;
	wait-for-turn rarm around x-axis;
	Static_Var_4 = 0;
}

AimPrimary(heading, pitch)
{
	signal 2;
	set-signal-mask 2;
	Static_Var_4 = 1;
	while( !Static_Var_5 )
	{
		sleep 25;
	}
	turn torso to y-axis heading speed <100.>;
	turn rarm to x-axis <0.> - pitch speed <90.>;
	turn larm to x-axis <0.> - pitch speed <90.>;
	wait-for-turn torso around y-axis;
	start-script RestoreAfterDelay();
	return (1);
}

AimSecondary(heading, pitch)
{
	signal 4;
	set-signal-mask 4;
	Static_Var_4 = 1;
	turn torso to y-axis heading speed <100.>;
	wait-for-turn torso around y-axis;
	turn turret to x-axis <0.000000> - pitch speed <25.>;
	wait-for-turn torso around y-axis;
	start-script RestoreAfterDelay();
	return (1);
}

AimTertiary(heading, pitch)
{
	signal 8;
	set-signal-mask 8;
	Static_Var_4 = 1;
	turn torso to y-axis heading speed <100.>;
	wait-for-turn torso around y-axis;
	start-script RestoreAfterDelay();
	if( Static_Var_9 == 0 )
	{
		return (0);
	}
	else
	{
		return (1);
	}
}

FirePrimary()
{
	if( Static_Var_1 == 1 )
	{
		Static_Var_1 = 2;
		return (0);
	}
	if( Static_Var_1 == 2 )
	{
		Static_Var_1 = 1;
		return (0);
	}
}

FireSecondary()
{
}

FireTertiary()
{
	--Static_Var_8;
	if( Static_Var_8 == 0 )
	{
		Static_Var_9 = 0;
	}
	if( Static_Var_2 == 1 )
	{
		Static_Var_2 = 2;
		return (0);
	}
	if( Static_Var_2 == 2 )
	{
		Static_Var_2 = 1;
		return (0);
	}
}

AimFromPrimary(piecenum)
{
	piecenum = torso;
}

AimFromSecondary(piecenum)
{
	piecenum = torso;
}

AimFromTertiary(piecenum)
{
	piecenum = torso;
}

QueryPrimary(piecenum)
{
	if( Static_Var_1 == 1 )
	{
		piecenum = lpflarer;
	}
	if( Static_Var_1 == 2 )
	{
		piecenum = lpflarel;
	}
}

QuerySecondary(piecenum)
{
	piecenum = spflare;
}

QueryTertiary(piecenum)
{
	if( Static_Var_2 == 1 )
	{
		piecenum = gaussflarer;
	}
	if( Static_Var_2 == 2 )
	{
		piecenum = gaussflarel;
	}
}

SweetSpot(piecenum)
{
	piecenum = torso;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode turret type BITMAPONLY | BITMAP2;
		explode lpflarel type BITMAPONLY | BITMAP3;
		explode lfoot type BITMAPONLY | BITMAP4;
		explode lleg type BITMAPONLY | BITMAP5;
		explode larm type BITMAPONLY | BITMAP1;
		explode lthigh type BITMAPONLY | BITMAP2;
		explode pelvis type BITMAPONLY | BITMAP4;
		explode lpflarer type BITMAPONLY | BITMAP5;
		explode rfoot type BITMAPONLY | BITMAP1;
		explode rleg type BITMAPONLY | BITMAP2;
		explode rarm type BITMAPONLY | BITMAP3;
		explode rthigh type BITMAPONLY | BITMAP4;
		explode torso type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type FALL | BITMAP1;
		explode turret type FALL | BITMAP2;
		explode lpflarel type FALL | BITMAP3;
		explode lfoot type FALL | BITMAP4;
		explode lleg type FALL | BITMAP5;
		explode larm type FALL | BITMAP1;
		explode lthigh type FALL | BITMAP2;
		explode pelvis type FALL | BITMAP4;
		explode lpflarer type FALL | BITMAP5;
		explode rfoot type FALL | BITMAP1;
		explode rleg type FALL | BITMAP2;
		explode rarm type FALL | BITMAP3;
		explode rthigh type FALL | BITMAP4;
		explode torso type SHATTER | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode lpflarel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode lfoot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode lleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode larm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode lthigh type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode pelvis type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode lpflarer type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode rfoot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode rleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode rarm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode rthigh type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode torso type SHATTER | BITMAP1;
		return (0);
	}
	corpsetype = 3;
	explode base type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode lpflarel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode lfoot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode lleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode larm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode lthigh type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode pelvis type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode lpflarer type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode rfoot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode rleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode rarm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode rthigh type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode torso type SHATTER | EXPLODE_ON_HIT | BITMAP1;
}
