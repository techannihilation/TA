#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, missile1, missile2, turret1, turret2, turret3, turret4, turret5, turret6, turret7, turret8,
		sleeve1, sleeve2, sleeve3, sleeve4, sleeve5, sleeve6, sleeve7, sleeve8,
		barrel1a, barrel1b,barrel1c,barrel1d,barrel1e, barrel2a, barrel2b,barrel2c,barrel2d,barrel2e,
		barrel3a, barrel3b, barrel4a, barrel4b, barrel5a, barrel5b, barrel6a, barrel6b, 
		flare1a, flare2a, flare1b, flare2b, flare1c, flare2c, flare1d, flare2d, flare1e, flare2e,
		flare3, flare4, flare5, flare6, flare7, flare8,
		wakes1, wakes2, wakes3, wakes4, wakes5, aimpoint;
       
       
static-var  restore_delay, gun_1, gun_2, gun_3;

// Signal definitions
#define SIG_MOVE			2
#define SIG_AIM				4
#define SIG_AIM_2			8
#define SIG_AIM_3			16
#define SIG_AIM_4			32
#define SIG_AIM_5			64
#define SIG_AIM_6			128
#define SIG_AIM_7			256
#define SIG_AIM_8			512
#define SIG_AIM_9			1024

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	var Func_Var_4;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			Func_Var_4 = Rand( 1, 3 );
			if( Func_Var_4 == 1 )
			{
				emit-sfx smoketype from base;
			}
			if( Func_Var_4 == 2 )
			{
				emit-sfx smoketype from turret1;
			}
			if( Func_Var_4 == 3 )
			{
				emit-sfx smoketype from turret2;
			}
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	restore_delay = 8000;
	gun_1 = 0;
	gun_2 = 0;
	gun_3 = 0;
	
	turn turret3 to y-axis <-90.000000> now;
	turn turret4 to y-axis <-90.000000> now;
	turn turret5 to y-axis <90.000000> now;
	turn turret6 to y-axis <90.000000> now;
	turn turret8 to y-axis <180.000000> now;
	
	start-script SmokeUnit();
}

RestoreAfterDelay()
{
	sleep restore_delay;
	turn turret1 to y-axis <0.000000> speed <55.000000>;
	turn sleeve1 to x-axis <0.000000> speed <25.000000>;
	turn turret2 to y-axis <0.000000> speed <55.000000>;
	turn sleeve2 to x-axis <0.000000> speed <25.000000>;
}

Restore3()
{
	sleep restore_delay/2;
	turn turret3 to y-axis <-90.000000> speed <75.000000>;
	turn sleeve3 to x-axis <0.000000> speed <30.000000>;
	turn turret4 to y-axis <-90.000000> speed <75.000000>;
	turn sleeve4 to x-axis <0.000000> speed <30.000000>;
}

Restore4()
{
	sleep restore_delay/2;
	turn turret5 to y-axis <90.000000> speed <75.000000>;
	turn sleeve5 to x-axis <0.000000> speed <30.000000>;
	turn turret6 to y-axis <90.000000> speed <75.000000>;
	turn sleeve6 to x-axis <0.000000> speed <30.000000>;
}
Restore5()
{
	sleep restore_delay/2;
	turn turret7 to y-axis <0.000000> speed <100.000000>;
	turn sleeve7 to x-axis <0.000000> speed <100.000000>;
}
Restore6()
{
	sleep restore_delay/2;
	turn turret8 to y-axis <180.000000> speed <100.000000>;
	turn sleeve8 to x-axis <0.000000> speed <100.000000>;
}


SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 5;
}

waveSplash()
{
	while( TRUE )
	{
		turn body to x-axis <-1.000000> speed <1.000000>;
		move body to y-axis [0.229999] speed [0.169989];
		wait-for-turn body around x-axis;
		turn body to x-axis <0.000000> speed <1.000000>;
		move body to y-axis [0.000000] speed [0.169989];
		wait-for-turn body around x-axis;
	}
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	start-script waveSplash();
	while( TRUE )
	{
		emit-sfx 2 from wakes1;
		emit-sfx 2 from wakes2;
		emit-sfx 2 from wakes3;
		emit-sfx 2 from wakes4;
		emit-sfx 2 from wakes5;
		sleep 200;
	}
}

StopMoving()
{
	signal SIG_MOVE;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret1 to y-axis heading speed <30.000000>;
	turn sleeve1 to x-axis <0.000000> - pitch speed <15.000000>;
	wait-for-turn turret1 around y-axis;
	wait-for-turn sleeve1 around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

AimSecondary(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	turn turret2 to y-axis heading speed <30.000000>;
	turn sleeve2 to x-axis <0.000000> - pitch speed <15.000000>;
	wait-for-turn turret2 around y-axis;
	wait-for-turn sleeve2 around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	if( gun_1 == 0 )
	{
		move barrel1a to z-axis [-1.000000] speed [500.000000];
		emit-sfx 1024 + 1 from flare1a;
		sleep 150;
		move barrel1a to z-axis [0.000000] speed [3.000000];
		gun_1 = 1;
		return (0);
	}
	if( gun_1 == 1 )
	{
		move barrel1b to z-axis [-1.000000] speed [500.000000];
		emit-sfx 1024 + 1 from flare1b;
		sleep 150;
		move barrel1b to z-axis [0.000000] speed [3.000000];
		gun_1 = 2;
		return (0);
	}
	if( gun_1 == 2 )
	{
		move barrel1c to z-axis [-1.000000] speed [500.000000];
		emit-sfx 1024 + 1 from flare1c;
		sleep 150;
		move barrel1c to z-axis [0.000000] speed [3.000000];
		gun_1 = 3;
		return (0);
	}
	if( gun_1 == 3 )
	{
		move barrel1d to z-axis [-1.000000] speed [500.000000];
		emit-sfx 1024 + 1 from flare1d;
		sleep 150;
		move barrel1d to z-axis [0.000000] speed [3.000000];
		gun_1 = 4;
		return (0);
	}
	if( gun_1 == 4 )
	{
		move barrel1e to z-axis [-1.000000] speed [500.000000];
		emit-sfx 1024 + 1 from flare1e;
		sleep 150;
		move barrel1e to z-axis [0.000000] speed [3.000000];
		gun_1 = 0;
		return (0);
	}
}

FireSecondary()
{
	if( gun_2 == 0 )
	{
		move barrel2a to z-axis [-1.000000] speed [500.000000];
		emit-sfx 1024 + 1 from flare2a;
		sleep 150;
		move barrel2a to z-axis [0.000000] speed [3.000000];
		gun_2 = 1;
		return (0);
	}
	if( gun_2 == 1 )
	{
		move barrel2b to z-axis [-1.000000] speed [500.000000];
		emit-sfx 1024 + 1 from flare2b;
		sleep 150;
		move barrel2b to z-axis [0.000000] speed [3.000000];
		gun_2 = 2;
		return (0);
	}
	if( gun_2 == 2 )
	{
		move barrel2c to z-axis [-1.000000] speed [500.000000];
		emit-sfx 1024 + 1 from flare2c;
		sleep 150;
		move barrel2c to z-axis [0.000000] speed [3.000000];
		gun_2 = 3;
		return (0);
	}
	if( gun_2 == 3 )
	{
		move barrel2d to z-axis [-1.000000] speed [500.000000];
		emit-sfx 1024 + 1 from flare2d;
		sleep 150;
		move barrel2d to z-axis [0.000000] speed [3.000000];
		gun_2 = 4;
		return (0);
	}
	if( gun_2 == 4 )
	{
		move barrel2e to z-axis [-1.000000] speed [500.000000];
		emit-sfx 1024 + 1 from flare2e;
		sleep 150;
		move barrel2e to z-axis [0.000000] speed [3.000000];
		gun_2 = 0;
		return (0);
	}
}

QueryPrimary(piecenum)
{
	if( gun_1 == 0 )
	{
		piecenum = flare1a;
	}
	if( gun_1 == 1 )
	{
		piecenum = flare1b;
	}
	if( gun_1 == 2 )
	{
		piecenum = flare1c;
	}
	if( gun_1 == 3 )
	{
		piecenum = flare1d;
	}
	if( gun_1 == 4 )
	{
		piecenum = flare1e;
	}
}

QuerySecondary(piecenum)
{
	if( gun_2 == 0 )
	{
		piecenum = flare2a;
	}
	if( gun_2 == 1 )
	{
		piecenum = flare2b;
	}
	if( gun_2 == 2 )
	{
		piecenum = flare2c;
	}
	if( gun_2 == 3 )
	{
		piecenum = flare2d;
	}
	if( gun_2 == 4 )
	{
		piecenum = flare2e;
	}
}

AimFromPrimary(piecenum)
{
	piecenum = turret1;
}


AimFromSecondary(piecenum)
{
	piecenum = turret2;
}

AimFromTertiary(piecenum)
{
	piecenum = aimpoint;
}

AimTertiary(heading, pitch)
{
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;
	return (1);
}

FireTertiary()
{
	if( gun_3 == 2 )
	{
		gun_3 = 0;
	}
	++gun_3;
}

QueryTertiary(piecenum)
{
	if( gun_3 == 1 )
	{
		piecenum = missile1;
	}
	if( gun_3 == 2 )
	{
		piecenum = missile2;
	}
}

// Lighting turret

AimWeapon4(heading, pitch)
{
	signal SIG_AIM_4;
	set-signal-mask SIG_AIM_4;
	turn turret3 to y-axis heading speed <80.000000>;
	turn sleeve3 to x-axis <0.000000> - pitch speed <60.000000>;
	wait-for-turn turret3 around y-axis;
	wait-for-turn sleeve3 around x-axis;
	start-script Restore3();
	return (1);
}

AimWeapon5(heading, pitch)
{
	signal SIG_AIM_5;
	set-signal-mask SIG_AIM_5;
	turn turret4 to y-axis heading speed <80.000000>;
	turn sleeve4 to x-axis <0.000000> - pitch speed <60.000000>;
	wait-for-turn turret4 around y-axis;
	wait-for-turn sleeve4 around x-axis;
	start-script Restore3();
	return (1);
}
FireWeapon4()
{

}

FireWeapon5()
{

}

AimFromWeapon4(piecenum)
{
	piecenum = turret3;
}

AimFromWeapon5(piecenum)
{
	piecenum = turret4;
}

QueryWeapon4(piecenum)
{
		piecenum = flare3;
}

QueryWeapon5(piecenum)
{
		piecenum = flare4;
}

AimWeapon6(heading, pitch)
{
	signal SIG_AIM_6;
	set-signal-mask SIG_AIM_6;
	turn turret5 to y-axis heading speed <80.000000>;
	turn sleeve5 to x-axis <0.000000> - pitch speed <60.000000>;
	wait-for-turn turret5 around y-axis;
	wait-for-turn sleeve5 around x-axis;
	start-script Restore4();
	return (1);
}

AimWeapon7(heading, pitch)
{
	signal SIG_AIM_7;
	set-signal-mask SIG_AIM_7;
	turn turret6 to y-axis heading speed <80.000000>;
	turn sleeve6 to x-axis <0.000000> - pitch speed <60.000000>;
	wait-for-turn turret6 around y-axis;
	wait-for-turn sleeve6 around x-axis;
	start-script Restore4();
	return (1);
}

FireWeapon6()
{
	
}

FireWeapon7()
{
	
}

AimFromWeapon6(piecenum)
{
	piecenum = turret5;
}

AimFromWeapon7(piecenum)
{
	piecenum = turret6;
}

QueryWeapon6(piecenum)
{
	piecenum = flare5;
}

QueryWeapon7(piecenum)
{
	piecenum = flare6;
}

// AA FLAK

AimWeapon8(heading, pitch)
{
	signal SIG_AIM_8;
	set-signal-mask SIG_AIM_8;
	turn turret7 to y-axis heading speed <480.000000>;
	turn sleeve7 to x-axis <0.000000> - pitch speed <300.000000>;
	wait-for-turn turret7 around y-axis;
	wait-for-turn sleeve7 around x-axis;
	start-script Restore5();
	return (1);
}

AimWeapon9(heading, pitch)
{
	signal SIG_AIM_9;
	set-signal-mask SIG_AIM_9;
	turn turret8 to y-axis heading speed <480.000000>;
	turn sleeve8 to x-axis <0.000000> - pitch speed <300.000000>;
	wait-for-turn turret8 around y-axis;
	wait-for-turn sleeve8 around x-axis;
	start-script Restore6();
	return (1);
}

FireWeapon8()
{

}

FireWeapon9()
{

}

AimFromWeapon8(piecenum)
{
	piecenum = turret7;
}

AimFromWeapon9(piecenum)
{
	piecenum = turret8;
}

QueryWeapon8(piecenum)
{
	piecenum = flare7;
}

QueryWeapon9(piecenum)
{
	piecenum = flare8;
}

Killed(severity, corpsetype)
{

	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type NOHEATCLOUD |BITMAPONLY;
		explode turret1 type NOHEATCLOUD;
		explode barrel1a type NOHEATCLOUD |FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode barrel2a type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode barrel3b type NOHEATCLOUD |FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode barrel4a type NOHEATCLOUD |FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode turret7 type NOHEATCLOUD;
		explode turret5 type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type NOHEATCLOUD |BITMAPONLY;
		explode turret1 type NOHEATCLOUD;
		explode barrel1a type NOHEATCLOUD |FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode barrel2a type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode barrel3b type NOHEATCLOUD |FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode barrel4a type NOHEATCLOUD |FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode turret7 type NOHEATCLOUD;
		explode turret5 type NOHEATCLOUD;
		explode barrel1a type NOHEATCLOUD |FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode barrel3a type NOHEATCLOUD |FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode barrel2b type NOHEATCLOUD |FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode barrel2e type NOHEATCLOUD |FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type NOHEATCLOUD |BITMAPONLY;
		explode turret1 type NOHEATCLOUD |FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode turret2 type NOHEATCLOUD |FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode barrel1a type NOHEATCLOUD |FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode barrel2a type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode barrel3b type NOHEATCLOUD |FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode barrel4a type NOHEATCLOUD |FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode turret7 type NOHEATCLOUD |FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode turret5 type NOHEATCLOUD |FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode barrel1a type NOHEATCLOUD |FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode barrel3a type NOHEATCLOUD |FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode barrel2b type NOHEATCLOUD |FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode barrel2e type NOHEATCLOUD |FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		return (corpsetype);
	}
	corpsetype = 3;
	explode base type NOHEATCLOUD |BITMAPONLY;
	explode turret1 type NOHEATCLOUD |FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode turret2 type NOHEATCLOUD |FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode barrel1a type NOHEATCLOUD |FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode barrel2a type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode barrel3b type NOHEATCLOUD |FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode barrel4a type NOHEATCLOUD |FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode turret7 type NOHEATCLOUD |FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode turret5 type NOHEATCLOUD |FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode barrel1a type NOHEATCLOUD |FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode barrel3a type NOHEATCLOUD |FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode barrel2b type NOHEATCLOUD |FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode barrel2e type NOHEATCLOUD |FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	return (corpsetype);
}
