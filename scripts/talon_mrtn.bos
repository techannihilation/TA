#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, Lflare1, Lflare2, Lflare3, Rflare, Lsleeve, Rsleeve, turret, Lgun, Rgun, gine1, gine2, gine3;

static-var  Static_Var_Delay, Static_Var_1;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

RockUnit(anglex, anglez)
{
	turn base to x-axis anglex speed <50.>;
	turn base to z-axis anglez speed <50.>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.> speed <20.>;
	turn base to x-axis <0.> speed <20.>;
}

Create()
{
	hide Lflare1;
	hide Lflare2;
	hide Lflare3;
	hide Rflare;
	Static_Var_Delay = 4000;
	Static_Var_1 = 0;
	start-script SmokeUnit();
}

SetMaxReloadTime(Func_Var_1)
{
	Static_Var_Delay = Func_Var_1 * 2;
}

RestoreAfterDelay()
{
	sleep Static_Var_Delay;
	turn turret to y-axis <0.> speed <75.>;
	turn Lsleeve to x-axis <0.> speed <50.>;
}

AimPrimary(heading, pitch)
{
	signal 2;
	set-signal-mask 2;
	turn turret to y-axis heading speed <75.>;
	turn Lgun to x-axis <0.> - pitch speed <50.>;
	wait-for-turn turret around y-axis;
	wait-for-turn Lgun around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

AimSecondary(heading, pitch)
{
	signal 4;
	set-signal-mask 4;
	return (1);
}

FirePrimary()
{
	++Static_Var_1;
	If (Static_Var_1 == 3)
	{
		Static_Var_1 = 0;
	}

}

FireSecondary()
{
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

AimFromSecondary(piecenum)
{
	piecenum = turret;
}

QueryPrimary(piecenum)
{
	If (Static_Var_1 == 0)
	{
		piecenum = Lflare1;
	}
	If (Static_Var_1 == 1)
	{
		piecenum = Lflare2;
	}	
	If (Static_Var_1 == 2)
	{
		piecenum = Lflare3;
	}
}

QuerySecondary(piecenum)
{
	piecenum = Rflare;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide Lflare1;
	hide Lflare2;
	hide Lflare3;
	hide Rflare;
	
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode Lgun type NOHEATCLOUD;
		explode gine1 type NOHEATCLOUD;
		explode gine2 type NOHEATCLOUD;
		explode gine3 type NOHEATCLOUD;
		explode turret type NOHEATCLOUD;
		explode Lsleeve type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode Lgun type NOHEATCLOUD | FALL;
		explode gine1 type NOHEATCLOUD;
		explode gine2 type NOHEATCLOUD;
		explode gine3 type NOHEATCLOUD;
		explode turret type NOHEATCLOUD | FALL;
		explode Lsleeve type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode Lgun type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode gine1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode gine2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode gine3 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode turret type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode Lsleeve type NOHEATCLOUD;
		return (corpsetype);
	}
	corpsetype = 3;
	explode Lgun type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode gine1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode gine2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode gine3 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode turret type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode Lsleeve type NOHEATCLOUD;
	return (corpsetype);
}
