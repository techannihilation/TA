#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, thrusta1, thrusta2, missilea, missileb, missilec, missiled, missilee, missilef;

static-var  Static_Var_1, gun_1, gun_2, gun_3;

#define SIG_AIM_1				2
#define SIG_AIM_2				4
#define SIG_AIM_3				8

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

MoveRate2()
{
	if( Rand( 1, 10 ) == 1 AND !Static_Var_1 )
	{
		Static_Var_1 = 1;
		turn base to z-axis <240.054945> speed <120.027473>;
		wait-for-turn base around z-axis;
		turn base to z-axis <120.027473> speed <180.043956>;
		wait-for-turn base around z-axis;
		turn base to z-axis <0.000000> speed <120.027473>;
		Static_Var_1 = 0;
	}
}

Create()
{
	gun_1 = 0;
	gun_2 = 0;
	gun_3 = 0;
	Static_Var_1 = 0;
	start-script SmokeUnit();
}

Activate()
{

}

Deactivate()
{

}

QueryPrimary(piecenum)
{
	if(gun_1 == 0) 
	{
		piecenum = missilea;
	}
	if(gun_1 == 1) 
	{
		piecenum = missileb;
	}
}

QuerySecondary(piecenum)
{
	if(gun_2 == 0) 
	{
		piecenum = missilec;
	}
	if(gun_2 == 1) 
	{
		piecenum = missilee;
	}
}

QueryTertiary(piecenum)
{
	if(gun_3 == 0) 
	{
		piecenum = missiled;
	}
	if(gun_3 == 1) 
	{
		piecenum = missilef;
	}
}

AimFromPrimary(piecenum)
{
	piecenum = base;
}

AimFromSecondary(piecenum)
{
	piecenum = base;
}

AimFromTertiary(piecenum)
{
	piecenum = base;
}

AimPrimary()
{
	signal SIG_AIM_1;
	set-signal-mask SIG_AIM_1;
	return 1;
}

AimSecondary()
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	return 1;
}

AimTertiary()
{
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;
	return 1;
}

FirePrimary() 
{
	++gun_1;
	if(gun_1 == 2) 
	{
		gun_1 = 0;
	}
}

FireSecondary() 
{
	++gun_2;
	if(gun_2 == 2) 
	{
		gun_2 = 0;
	}
}

FireTertiary() 
{
	++gun_3;
	if(gun_3 == 2) 
	{
		gun_3 = 0;
	}
}
SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type NOHEATCLOUD;
		return (corpsetype);
	}
	corpsetype = 3;
	explode base type NOHEATCLOUD;
	return (corpsetype);
}
