#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, glow, rocket, aimer, smoke1, smoke2, smoke3, smoke4;

static-var  restore_delay;

#define SIG_AIM				2

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

RestoreAfterDelay()
{
	sleep restore_delay;
}

Create()
{
	dont-cache glow;
	dont-shade glow;
	start-script SmokeUnit();
    restore_delay = 500;
	dont-shade base;
	dont-shade body;	
}

AimPrimary(heading, pitch)
{
	
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	show rocket;
	move rocket to y-axis [60.000000] speed [2.000000];
	wait-for-move rocket along y-axis;
	emit-sfx 1024 from smoke1;
	emit-sfx 1024 from smoke2;
	emit-sfx 1024 from smoke3;
	emit-sfx 1024 from smoke4;
	return (1);
}

AimFromPrimary(piecenum)
{
	piecenum = aimer;
}

FirePrimary()
{
	sleep 100;
	emit-sfx 1024 from smoke1;
	emit-sfx 1024 from smoke2;
	emit-sfx 1024 from smoke3;
	emit-sfx 1024 from smoke4;
	hide rocket;	
	move rocket to y-axis [0.000000] now;
	sleep restore_delay;
}

QueryPrimary(piecenum)
{
	piecenum = aimer;
}


SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type NOHEATCLOUD;
		explode body type SHATTER | EXPLODE_ON_HIT | NOHEATCLOUD;
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type NOHEATCLOUD;
		explode body type SHATTER | EXPLODE_ON_HIT | NOHEATCLOUD;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type NOHEATCLOUD;
		explode body type SHATTER | EXPLODE_ON_HIT | NOHEATCLOUD;
		return (0);
	}
	corpsetype = 3;
	explode base type NOHEATCLOUD;
	explode body type SHATTER | EXPLODE_ON_HIT | NOHEATCLOUD;
}
