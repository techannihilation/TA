#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, socle, turret, sleeves, culasse, barrel1, barrel2, obus,
       flare;

// Signal definitions
#define SIG_AIM				2


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	var Func_Var_4;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			Func_Var_4 = Rand( 1, 3 );
			if( Func_Var_4 == 1 )
			{
				emit-sfx smoketype from socle;
			}
			if( Func_Var_4 == 2 )
			{
				emit-sfx smoketype from sleeves;
			}
			if( Func_Var_4 == 3 )
			{
				emit-sfx smoketype from turret;
			}
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	hide flare;
	hide obus;
	turn sleeves to x-axis <-50> now;
	dont-cache turret;
	dont-cache sleeves;
	dont-cache culasse;
	dont-cache barrel1;
	dont-cache barrel2;
	dont-cache flare;
	start-script SmokeUnit();
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <875.000000>;
	turn sleeves to x-axis <0.000000> - pitch speed <690.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeves around x-axis;
	return (1);
}

FirePrimary()
{
	show flare;
	sleep 100;
	hide flare;
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide flare;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode socle type NOHEATCLOUD | BITMAPONLY | BITMAP1;
		explode turret type NOHEATCLOUD | BITMAPONLY | BITMAP3;
		explode culasse type NOHEATCLOUD | BITMAPONLY | BITMAP4;
		explode barrel1 type NOHEATCLOUD | BITMAPONLY | BITMAP5;
		explode barrel2 type NOHEATCLOUD | BITMAPONLY | BITMAP1;
		explode obus type NOHEATCLOUD | BITMAPONLY | BITMAP1;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode socle type NOHEATCLOUD | FALL | BITMAP1;
		explode turret type NOHEATCLOUD | SHATTER | BITMAP3;
		explode sleeves type NOHEATCLOUD | SHATTER | BITMAP4;
		explode culasse type NOHEATCLOUD | FALL | BITMAP5;
		explode barrel1 type NOHEATCLOUD | FALL | BITMAP1;
		explode barrel2 type NOHEATCLOUD | FALL | BITMAP5;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode socle type NOHEATCLOUD | SHATTER | BITMAP2;
		explode turret type NOHEATCLOUD | SHATTER | BITMAP3;
		explode sleeves type NOHEATCLOUD | SHATTER | BITMAP4;
		explode culasse type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode barrel1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode barrel2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode obus type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		return (corpsetype);
	}
	corpsetype = 3;
	explode socle type NOHEATCLOUD | SHATTER | BITMAP5;
	explode turret type NOHEATCLOUD | SHATTER | BITMAP3;
	explode sleeves type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT | BITMAP4;
	explode barrel1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode barrel2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode culasse type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode obus type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	return (corpsetype);
}
