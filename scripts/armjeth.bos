#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  torso, rfirept, lfirept, pelvis, lleg, rleg, rthigh, lthigh,
       luparm, lloarm, rloarm, ruparm, rgun, lgun, ground, lexhaust,
       rexhaust;

static-var  bMoving, Static_Var_2, Static_Var_3, gun_3, restore_delay,
            Static_Var_6, Static_Var_7, Static_Var_8, Static_Var_9;

// Signal definitions
#define SIG_AIM_3			2


walk()
{
	while( bMoving )
	{
		if( bMoving )
		{
			move pelvis to y-axis [-0.159998] speed [3.167999] * Static_Var_9 / [0.000610];
			move rfirept to z-axis [0.000000] now;
			move lfirept to z-axis [0.000000] now;
			move lleg to y-axis [0.000000] now;
			move rleg to y-axis [0.000000] now;
			turn rthigh to x-axis <35.857143> speed <709.967033> * Static_Var_9 / <0.549451>;
			turn lthigh to x-axis <-35.148352> speed <696.043956> * Static_Var_9 / <0.549451>;
			turn lleg to x-axis <34.791209> speed <688.972527> * Static_Var_9 / <0.549451>;
			turn rleg to x-axis <26.357143> speed <521.978022> * Static_Var_9 / <0.549451>;
			sleep 2000 / Static_Var_9;
		}
		if( bMoving )
		{
			move torso to y-axis [-0.059998] speed [1.187994] * Static_Var_9 / [0.000610];
			sleep 2000 / Static_Var_9;
		}
		if( bMoving )
		{
			move torso to y-axis [-0.119995] speed [0.715662] * Static_Var_9 / [0.000610];
			sleep 5000 / Static_Var_9;
		}
		if( bMoving )
		{
			move torso to y-axis [-0.059998] speed [1.187994] * Static_Var_9 / [0.000610];
			sleep 2000 / Static_Var_9;
		}
		if( bMoving )
		{
			move pelvis to y-axis [-0.119995] speed [0.341376] * Static_Var_9 / [0.000610];
			move torso to y-axis [0.000000] speed [0.512067] * Static_Var_9 / [0.000610];
			move rleg to y-axis [0.159998] speed [1.365515] * Static_Var_9 / [0.000610];
			turn rthigh to x-axis <20.027473> speed <135.049451> * Static_Var_9 / <0.549451>;
			turn lthigh to x-axis <-30.582418> speed <39.010989> * Static_Var_9 / <0.549451>;
			turn lleg to x-axis <29.868132> speed <42.010989> * Static_Var_9 / <0.549451>;
			turn rleg to x-axis <26.714286> speed <3.000000> * Static_Var_9 / <0.549451>;
			sleep 7000 / Static_Var_9;
		}
		if( bMoving )
		{
			move pelvis to y-axis [-0.079999] speed [0.477106] * Static_Var_9 / [0.000610];
			move rleg to y-axis [0.279999] speed [1.431323] * Static_Var_9 / [0.000610];
			turn rthigh to x-axis <9.489011> speed <125.763736> * Static_Var_9 / <0.549451>;
			turn lthigh to x-axis <-23.901099> speed <79.692308> * Static_Var_9 / <0.549451>;
			turn lleg to x-axis <24.604396> speed <62.846154> * Static_Var_9 / <0.549451>;
			turn rleg to x-axis <26.714286> now;
			sleep 6000 / Static_Var_9;
		}
		if( bMoving )
		{
			move pelvis to y-axis [-0.359998] speed [3.339758] * Static_Var_9 / [0.000610];
			turn rthigh to x-axis <-12.291209> speed <259.785714> * Static_Var_9 / <0.549451>;
			turn lthigh to x-axis <-7.368132> speed <197.197802> * Static_Var_9 / <0.549451>;
			turn lleg to x-axis <7.379121> speed <205.456044> * Static_Var_9 / <0.549451>;
			turn rleg to x-axis <26.357143> speed <4.192308> * Static_Var_9 / <0.549451>;
			sleep 5000 / Static_Var_9;
		}
		if( bMoving )
		{
			move pelvis to y-axis [0.000000] speed [4.293976] * Static_Var_9 / [0.000610];
			move rleg to y-axis [0.219995] speed [0.715662] * Static_Var_9 / [0.000610];
			turn rthigh to x-axis <-21.093407> speed <104.989011> * Static_Var_9 / <0.549451>;
			turn lthigh to x-axis <4.560440> speed <142.340659> * Static_Var_9 / <0.549451>;
			turn lleg to x-axis <16.868132> speed <113.247253> * Static_Var_9 / <0.549451>;
			turn rleg to x-axis <26.357143> now;
			sleep 4000 / Static_Var_9;
		}
		if( bMoving )
		{
			move pelvis to y-axis [-0.039996] speed [0.477106] * Static_Var_9 / [0.000610];
			turn rthigh to x-axis <-28.824176> speed <92.208791> * Static_Var_9 / <0.549451>;
			turn lthigh to x-axis <15.813187> speed <134.214286> * Static_Var_9 / <0.549451>;
			sleep 5000 / Static_Var_9;
		}
		if( bMoving )
		{
			move pelvis to y-axis [-0.079999] speed [0.477106] * Static_Var_9 / [0.000610];
			turn rthigh to x-axis <-43.593407> speed <176.225275> * Static_Var_9 / <0.549451>;
			turn lthigh to x-axis <18.626374> speed <33.549451> * Static_Var_9 / <0.549451>;
			sleep 6000 / Static_Var_9;
		}
		if( bMoving )
		{
			move pelvis to y-axis [-0.119995] speed [0.341376] * Static_Var_9 / [0.000610];
			turn rthigh to x-axis <-54.148352> speed <90.032967> * Static_Var_9 / <0.549451>;
			turn lthigh to x-axis <25.659341> speed <60.021978> * Static_Var_9 / <0.549451>;
			sleep 7000 / Static_Var_9;
		}
		if( bMoving )
		{
			move pelvis to y-axis [-0.159998] speed [0.791998] * Static_Var_9 / [0.000610];
			move rleg to y-axis [0.000000] speed [4.356000] * Static_Var_9 / [0.000610];
			turn rthigh to x-axis <-35.857143> speed <362.164835> * Static_Var_9 / <0.549451>;
			turn lthigh to x-axis <28.126374> speed <48.736264> * Static_Var_9 / <0.549451>;
			turn lleg to x-axis <16.170330> speed <13.923077> * Static_Var_9 / <0.549451>;
			turn rleg to x-axis <35.857143> speed <187.989011> * Static_Var_9 / <0.549451>;
			sleep 2000 / Static_Var_9;
		}
		if( bMoving )
		{
			move torso to y-axis [-0.059998] speed [1.187994] * Static_Var_9 / [0.000610];
			sleep 2000 / Static_Var_9;
		}
		if( bMoving )
		{
			move torso to y-axis [-0.119995] speed [0.715662] * Static_Var_9 / [0.000610];
			sleep 5000 / Static_Var_9;
		}
		if( bMoving )
		{
			move torso to y-axis [-0.059998] speed [1.187994] * Static_Var_9 / [0.000610];
			sleep 2000 / Static_Var_9;
		}
		if( bMoving )
		{
			move pelvis to y-axis [-0.119995] speed [0.341376] * Static_Var_9 / [0.000610];
			move torso to y-axis [0.000000] speed [0.512067] * Static_Var_9 / [0.000610];
			move lleg to y-axis [0.279999] speed [2.389655] * Static_Var_9 / [0.000610];
			turn rthigh to x-axis <-27.758242> speed <69.071429> * Static_Var_9 / <0.549451>;
			turn lthigh to x-axis <21.445055> speed <57.016484> * Static_Var_9 / <0.549451>;
			turn lleg to x-axis <21.791209> speed <47.967033> * Static_Var_9 / <0.549451>;
			turn rleg to x-axis <28.126374> speed <65.978022> * Static_Var_9 / <0.549451>;
			sleep 7000 / Static_Var_9;
		}
		if( bMoving )
		{
			move pelvis to y-axis [-0.079999] speed [0.477106] * Static_Var_9 / [0.000610];
			turn rthigh to x-axis <-21.791209> speed <71.236264> * Static_Var_9 / <0.549451>;
			turn lthigh to x-axis <8.423077> speed <155.252747> * Static_Var_9 / <0.549451>;
			turn lleg to x-axis <24.247253> speed <29.357143> * Static_Var_9 / <0.549451>;
			turn rleg to x-axis <22.137363> speed <71.368132> * Static_Var_9 / <0.549451>;
			sleep 6000 / Static_Var_9;
		}
		if( bMoving )
		{
			move pelvis to y-axis [-0.039996] speed [0.477106] * Static_Var_9 / [0.000610];
			turn rthigh to x-axis <-16.170330> speed <67.043956> * Static_Var_9 / <0.549451>;
			turn lthigh to x-axis <-6.670330> speed <180.093407> * Static_Var_9 / <0.549451>;
			turn rleg to x-axis <16.868132> speed <62.846154> * Static_Var_9 / <0.549451>;
			sleep 5000 / Static_Var_9;
		}
		if( bMoving )
		{
			move pelvis to y-axis [0.000000] speed [0.477106] * Static_Var_9 / [0.000610];
			move lleg to y-axis [0.319995] speed [0.477106] * Static_Var_9 / [0.000610];
			turn rthigh to x-axis <-6.670330> speed <113.313187> * Static_Var_9 / <0.549451>;
			turn lthigh to x-axis <-15.456044> speed <104.857143> * Static_Var_9 / <0.549451>;
			turn lleg to x-axis <20.390110> speed <46.071429> * Static_Var_9 / <0.549451>;
			turn rleg to x-axis <25.313187> speed <100.659341> * Static_Var_9 / <0.549451>;
			sleep 4000 / Static_Var_9;
		}
		if( bMoving )
		{
			move pelvis to y-axis [-0.039996] speed [0.477106] * Static_Var_9 / [0.000610];
			turn rthigh to x-axis <2.802198> speed <113.049451> * Static_Var_9 / <0.549451>;
			turn lthigh to x-axis <-26.005495> speed <125.829670> * Static_Var_9 / <0.549451>;
			sleep 5000 / Static_Var_9;
		}
		if( bMoving )
		{
			move pelvis to y-axis [-0.079999] speed [0.477106] * Static_Var_9 / [0.000610];
			turn rthigh to x-axis <10.192308> speed <88.076923> * Static_Var_9 / <0.549451>;
			turn lthigh to x-axis <-35.148352> speed <109.049451> * Static_Var_9 / <0.549451>;
			sleep 6000 / Static_Var_9;
		}
		move pelvis to y-axis [-0.119995] speed [0.341376] * Static_Var_9 / [0.000610];
		turn rthigh to x-axis <21.445055> speed <96.032967> * Static_Var_9 / <0.549451>;
		turn lthigh to x-axis <-55.549451> speed <174.065934> * Static_Var_9 / <0.549451>;
		sleep 7000 / Static_Var_9;
	}
}

Go()
{
	Static_Var_2 = 1;
	if( !Static_Var_3 )
	{
		turn luparm to z-axis <0.000000> now;
		turn luparm to z-axis <-73.016484> speed <212.000000>;
		turn lloarm to z-axis <0.000000> now;
		turn lloarm to z-axis <90.016484> speed <260.000000>;
		turn rloarm to z-axis <0.000000> now;
		turn rloarm to z-axis <-90.016484> speed <260.000000>;
		turn ruparm to z-axis <0.000000> now;
		turn ruparm to z-axis <75.016484> speed <218.000000>;
		sleep 450;
		Static_Var_3 = 1;
	}
}

Stop()
{
	if( Static_Var_3 )
	{
		Static_Var_3 = 0;
		turn luparm to z-axis <-73.478022> now;
		turn luparm to z-axis <0.000000> speed <67.000000>;
		turn lloarm to z-axis <90.016484> now;
		turn lloarm to z-axis <0.000000> speed <82.000000>;
		turn rloarm to z-axis <-90.016484> now;
		turn rloarm to z-axis <0.000000> speed <82.000000>;
		turn ruparm to z-axis <75.593407> now;
		turn ruparm to z-axis <0.000000> speed <68.000000>;
		sleep 1097;
	}
	Static_Var_2 = 0;
}

RequestState(requestedstate, currentstate)
{
	if( Static_Var_7 )
	{
		Static_Var_6 = requestedstate;
		return (0);
	}
	Static_Var_7 = 1;
	currentstate = Static_Var_6;
	Static_Var_6 = requestedstate;
	while( Static_Var_6 != currentstate )
	{
		if( Static_Var_6 == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
		else
		{
			call-script Go();
			currentstate = 0;
		}
	}
	Static_Var_7 = 0;
}

MotionControl(moving, aiming, justmoved)
{
	justmoved = TRUE;
	while( TRUE )
	{
		moving = bMoving;
		aiming = Static_Var_2;
		if( moving )
		{
			call-script walk();
			justmoved = TRUE;
		}
		else if( justmoved )
		{
			move pelvis to y-axis [0.000000] speed [0.400000];
			turn rthigh to x-axis <0.000000> speed <200.000000>;
			turn rleg to x-axis <0.000000> speed <200.000000>;
			turn lthigh to x-axis <0.000000> speed <200.000000>;
			turn lleg to x-axis <0.000000> speed <200.000000>;
			if( !aiming )
			{
				turn torso to y-axis <0.000000> speed <90.000000>;
			}
			justmoved = FALSE;
		}
		sleep 100;
	}
}

UnitSpeed()
{
	while( TRUE )
	{
		Static_Var_9 = get CURRENT_SPEED * 100 / Static_Var_8;
		if( Static_Var_9 < 20 )
		{
			Static_Var_9 = 20;
		}
		sleep 142;
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	start-script UnitSpeed();
	start-script MotionControl();
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 258;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 257;
			}
			emit-sfx smoketype from torso;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	hide rfirept;
	hide lfirept;
	bMoving = FALSE;
	Static_Var_2 = 0;
	Static_Var_3 = 0;
	gun_3 = torso;
	restore_delay = 3000;
	Static_Var_6 = 1;
	Static_Var_7 = 0;
	Static_Var_8 = get MAX_SPEED;
	Static_Var_9 = 100;
	start-script SmokeUnit();
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 5;
}

StartMoving()
{
	bMoving = TRUE;
}

StopMoving()
{
	bMoving = FALSE;
}

SweetSpot(piecenum)
{
	piecenum = torso;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	set-signal-mask 0;
	turn torso to y-axis <0.000000> speed <90.000000>;
}

AimTertiary(heading, pitch)
{
	start-script RequestState(0);
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;
	while( !Static_Var_3 )
	{
		sleep 100;
	}
	turn torso to y-axis heading speed <275.000000>;
	wait-for-turn torso around y-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireTertiary()
{
	if( gun_3 )
	{
		move lgun to z-axis [-0.600000] speed [10.000000];
		wait-for-move lgun along z-axis;
		emit-sfx 1024 from rexhaust;
		move lgun to z-axis [0.000000] speed [1.200000];
	}
	else
	{
		move rgun to z-axis [-0.600000] speed [10.000000];
		wait-for-move rgun along z-axis;
		emit-sfx 1024 from lexhaust;
		move rgun to z-axis [0.000000] speed [1.200000];
	}
	gun_3 = !gun_3;
}

AimFromTertiary(piecenum)
{
	piecenum = torso;
}

QueryTertiary(piecenum)
{
	piecenum = 1 + gun_3;
}

Killed(severity, corpsetype)
{
	hide rfirept;
	hide lfirept;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode ground type NOHEATCLOUD;
		explode lfirept type NOHEATCLOUD;
		explode lgun type NOHEATCLOUD;
		explode lleg type NOHEATCLOUD;
		explode lloarm type NOHEATCLOUD;
		explode lthigh type NOHEATCLOUD;
		explode luparm type NOHEATCLOUD;
		explode pelvis type NOHEATCLOUD;
		explode rfirept type NOHEATCLOUD;
		explode rgun type NOHEATCLOUD;
		explode rleg type NOHEATCLOUD;
		explode rloarm type NOHEATCLOUD;
		explode rthigh type NOHEATCLOUD;
		explode ruparm type NOHEATCLOUD;
		explode torso type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode ground type NOHEATCLOUD | FALL;
		explode lfirept type NOHEATCLOUD | FALL;
		explode lgun type NOHEATCLOUD | FALL;
		explode lleg type NOHEATCLOUD | FALL;
		explode lloarm type NOHEATCLOUD | FALL;
		explode lthigh type NOHEATCLOUD | FALL;
		explode luparm type NOHEATCLOUD | FALL;
		explode pelvis type NOHEATCLOUD | FALL;
		explode rfirept type NOHEATCLOUD | FALL;
		explode rgun type NOHEATCLOUD | FALL;
		explode rleg type NOHEATCLOUD | FALL;
		explode rloarm type NOHEATCLOUD | FALL;
		explode rthigh type NOHEATCLOUD | FALL;
		explode ruparm type NOHEATCLOUD | FALL;
		explode torso type NOHEATCLOUD | SHATTER;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode ground type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode lfirept type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode lgun type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode lleg type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode lloarm type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode lthigh type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode luparm type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode pelvis type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode rfirept type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode rgun type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode rleg type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode rloarm type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode rthigh type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode ruparm type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode torso type NOHEATCLOUD | SHATTER;
		return (corpsetype);
	}
	corpsetype = 3;
	explode ground type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode lfirept type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode lgun type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode lleg type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode lloarm type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode lthigh type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode luparm type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode pelvis type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode rfirept type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode rgun type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode rleg type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode rloarm type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode rthigh type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode ruparm type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode torso type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	return (corpsetype);
}
