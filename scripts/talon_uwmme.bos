#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, arms, mis;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4, Static_Var_5,
            Static_Var_6, Static_Var_7;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

bubble()
{
	emit-sfx 256 | 3 from mis;
	emit-sfx 256 | 3 from mis;
	sleep 100;
	if( Static_Var_7 )
	{
		start-script bubble();
	}
}

Go()
{
	Static_Var_7 = 1;
	spin arms around y-axis speed Static_Var_1 accelerate Static_Var_2;
	start-script bubble();
}

Stop()
{
	Static_Var_7 = 0;
	stop-spin arms around y-axis decelerate Static_Var_3;
	wait-for-turn arms around y-axis;
}

InitState()
{
	Static_Var_4 = 1;
	Static_Var_5 = 0;
}

RequestState(requestedstate, currentstate)
{
	if( Static_Var_5 )
	{
		Static_Var_4 = requestedstate;
		return (0);
	}
	Static_Var_5 = 1;
	currentstate = Static_Var_4;
	Static_Var_4 = requestedstate;
	while( Static_Var_4 != currentstate )
	{
		if( Static_Var_4 == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( Static_Var_4 == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	Static_Var_5 = 0;
}

Create()
{
	Static_Var_1 = 0;
	Static_Var_2 = 30;
	Static_Var_3 = 60;
	Static_Var_6 = 0;
	dont-cache arms;
	dont-shade arms;
	dont-shade base;
	call-script InitState();
	start-script SmokeUnit();
}

QueryPrimary(piecenum)
{
	piecenum = mis;
}

restore()
{
	sleep 2000;
	set ACTIVATION to 1;
}

AimPrimary(heading, pitch)
{
	signal 2;
	set-signal-mask 2;
	set ACTIVATION to 0;
	while( Static_Var_6 )
	{
		sleep 10;
	}
	while( !Static_Var_1 )
	{
		sleep 10000;
	}
	start-script restore();
	return (1);
}

FirePrimary()
{
	Static_Var_6 = 1;
	if( Static_Var_1 )
	{
		sleep 124000000 / Static_Var_1;
	}
	Static_Var_6 = 0;
}

AimFromPrimary(piecenum)
{
	piecenum = mis;
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

SweetSpot(piecenum)
{
	piecenum = base;
}

SetSpeed(Func_Var_1)
{
	Static_Var_1 = Func_Var_1 * 5;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode arms type NOHEATCLOUD;
		explode base type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode arms type SHATTER | FALL;
		explode base type NOHEATCLOUD | FALL;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode arms type NOHEATCLOUD | FALL | SMOKE | FIRE;
		explode base type NOHEATCLOUD | FALL | SMOKE | FIRE;
		return (corpsetype);
	}
	corpsetype = 3;
	explode arms type NOHEATCLOUD | FALL | SMOKE | FIRE;
	explode base type NOHEATCLOUD | FALL | SMOKE | FIRE;
	return (corpsetype);
}
