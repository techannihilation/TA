#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, flare, turret, barrel, sleeve, wake1, wake2, wake3,
       wake4;

static-var  Static_Var_1, Static_Var_2;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	if( Static_Var_2 != 3 )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	if( Static_Var_2 == 3 )
	{
		healthpercent = get HEALTH;
		sleeptime = healthpercent * healthpercent;
		if( healthpercent < 66 )
		{
			emit-sfx 256 | 3 from base;
			sleep sleeptime;
			emit-sfx 256 | 3 from barrel;
			if( Rand( 1, 66 ) > healthpercent )
			{
				emit-sfx 256 | 3 from wake1;
				sleep sleeptime;
				emit-sfx 256 | 3 from wake2;
				sleep sleeptime;
				emit-sfx 256 | 3 from wake3;
				sleep sleeptime;
				emit-sfx 256 | 3 from wake4;
				sleep sleeptime;
				emit-sfx 256 | 3 from base;
				sleep sleeptime;
				emit-sfx 256 | 3 from barrel;
				sleep sleeptime;
				emit-sfx 256 | 3 from turret;
				sleep sleeptime;
				emit-sfx 256 | 3 from flare;
				sleep sleeptime;
				emit-sfx 256 | 3 from sleeve;
				sleep sleeptime;
			}
		}
	}
	start-script SmokeUnit();
}

RockUnit(anglex, anglez)
{
	signal 8;
	set-signal-mask 8;
	turn base to x-axis anglex speed <50.>;
	turn base to z-axis anglez speed <50.>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.> speed <20.>;
	turn base to x-axis <0.> speed <20.>;
}

HitByWeapon(anglex, anglez)
{
	signal 8;
	set-signal-mask 8;
	turn base to z-axis anglez speed <105.>;
	turn base to x-axis anglex speed <105.>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.> speed <30.>;
	turn base to x-axis <0.> speed <30.>;
}

Create()
{
	hide flare;
	dont-cache flare;
	Static_Var_1 = 3000;
	start-script SmokeUnit();
}

SetMaxReloadTime(Func_Var_1)
{
	Static_Var_1 = Func_Var_1 * 2;
}

RestoreAfterDelay()
{
	sleep Static_Var_1;
	turn turret to y-axis <0.> speed <90.>;
	turn sleeve to x-axis <0.> speed <50.>;
}

AimPrimary(heading, pitch)
{
	signal 2;
	set-signal-mask 2;
	turn turret to y-axis heading speed <100.>;
	turn sleeve to x-axis <0.> - pitch speed <80.>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeve around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	emit-sfx 1025 from flare;
	move barrel to z-axis [-2.] speed [500.];
	sleep 150;
	wait-for-move barrel along z-axis;
	move barrel to z-axis [0.] speed [3.];
}

AimFromPrimary(piecenum)
{
	piecenum = flare;
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

StartMoving()
{
	signal 4;
	set-signal-mask 4;
	while( TRUE )
	{
		emit-sfx 3 from wake1;
		emit-sfx 3 from wake2;
		emit-sfx 256 | 3 from wake3;
		sleep 250;
		emit-sfx 3 from wake1;
		emit-sfx 3 from wake2;
		emit-sfx 256 | 3 from wake4;
		sleep 250;
	}
}

StopMoving()
{
	signal 4;
}

setSFXoccupy(state)
{
	Static_Var_2 = state;
}

Killed(severity, corpsetype)
{
	hide flare;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode barrel type NOHEATCLOUD;
		explode base type NOHEATCLOUD;
		explode flare type NOHEATCLOUD;
		explode sleeve type NOHEATCLOUD;
		explode turret type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode barrel type FALL | NOHEATCLOUD;
		explode base type NOHEATCLOUD;
		explode flare type FALL | NOHEATCLOUD;
		explode sleeve type FALL | NOHEATCLOUD;
		explode turret type SHATTER | NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode barrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
		explode base type NOHEATCLOUD;
		explode flare type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
		explode sleeve type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
		explode turret type SHATTER | NOHEATCLOUD;
		return (corpsetype);
	}
	corpsetype = 3;
	explode barrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode base type NOHEATCLOUD;
	explode flare type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode sleeve type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode turret type SHATTER | EXPLODE_ON_HIT | NOHEATCLOUD;
	return (corpsetype);
}
