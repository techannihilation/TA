#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, rocket, aimer, cloud_shoulder, cloud_arm, cloud_hand,
       lightning, towerthing, spinner, glow;

static-var  statechg_DesiredState, statechg_StateChanging, restore_delay, gun_1;

// Signal definitions
#define SIG_AIM				2


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}
/*

activatescr()
{
	gun_1 = 1; //keep in first line
	show rocket;

	if( TRUE )
	{
		move rocket to y-axis [36.000000] speed [10.000000];
		wait-for-move rocket along y-axis;
	
	}
	
	emit-sfx 1024 from rocket;
	sleep 150;
}

deactivatescr()
{
	
	sleep 1000;
	set-signal-mask 0;
	gun_1 = 0;
	hide rocket;
	
	if( TRUE )
	{
		move rocket to y-axis [0.000000] now;
		sleep restore_delay;
	}
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script activatescr();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script deactivatescr();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}


Activate()
{
	start-script RequestState(0);
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	start-script RequestState(1);
}
*/

Activate()
{
	
}

Deactivate()
{
	//start-script RequestState(1);
	move rocket to y-axis [0.000000] speed [4.000000];
	wait-for-move rocket along y-axis;
	hide rocket;
}

Create()
{
	gun_1 = 0;
	restore_delay = 500;
	hide rocket;
	start-script SmokeUnit();
}

AimPrimary(heading, pitch)
{
	
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
		
	show rocket;

	if( TRUE )
	{
		move rocket to y-axis [20.000000] speed [2.500000];
		wait-for-move rocket along y-axis;
		sleep 250;
	}
	
	return (1);
}

AimFromPrimary(piecenum)
{
	piecenum = aimer;
}

FirePrimary()
{
	emit-sfx 1024 from rocket;
	hide rocket;	
	move rocket to y-axis [0.000000] now;
	sleep restore_delay;
}

QueryPrimary(piecenum)
{
	piecenum = aimer;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode body type NOHEATCLOUD;
		explode glow type NOHEATCLOUD | SHATTER | FALL;;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode body type NOHEATCLOUD | SHATTER ;
		explode glow type NOHEATCLOUD | SHATTER | FALL;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode body type NOHEATCLOUD | SHATTER | FALL;
		explode glow type NOHEATCLOUD | EXPLODE_ON_HIT | FIRE | SHATTER | FALL;
		return (0);
	}
	corpsetype = 3;
	explode body type NOHEATCLOUD | SHATTER ;
	explode glow type NOHEATCLOUD | EXPLODE_ON_HIT | FIRE | SHATTER | FALL;
}
