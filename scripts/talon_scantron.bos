#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, flare, turret, barrel, body;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4;


InitState()
{
	Static_Var_2 = 1;
	Static_Var_3 = 0;
}

Go()
{
	turn barrel to x-axis <-45.> speed <50.>;
	spin turret around y-axis speed <100.>;
}

Stop()
{
	stop-spin turret around y-axis;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

RockUnit(anglex, anglez)
{
	signal 8;
	set-signal-mask 8;
	turn base to x-axis anglex speed <50.>;
	turn base to z-axis anglez speed <50.>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.> speed <20.>;
	turn base to x-axis <0.> speed <20.>;
}

HitByWeapon(anglex, anglez)
{
	signal 8;
	set-signal-mask 8;
	turn base to z-axis anglez speed <105.>;
	turn base to x-axis anglex speed <105.>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.> speed <30.>;
	turn base to x-axis <0.> speed <30.>;
}

RequestState(requestedstate, currentstate)
{
	if( Static_Var_3 )
	{
		Static_Var_2 = requestedstate;
		return (0);
	}
	Static_Var_3 = 1;
	currentstate = Static_Var_2;
	Static_Var_2 = requestedstate;
	while( Static_Var_2 != currentstate )
	{
		if( Static_Var_2 == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( Static_Var_2 == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	Static_Var_3 = 0;
}

Create()
{
	hide flare;
	dont-cache flare;
	Static_Var_1 = 3000;
	start-script SmokeUnit();
	call-script InitState();
	dont-cache barrel;
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

SetMaxReloadTime(Func_Var_1)
{
	Static_Var_1 = Func_Var_1 * 2;
}

RestoreAfterDelay()
{
	sleep Static_Var_1;
	if( Static_Var_4 == 1 )
	{
		set ACTIVATION to 1;
	}
}

AimPrimary(heading, pitch)
{
	sleep 250;
	signal 2;
	set-signal-mask 2;
	Static_Var_4 = 1;
	set ACTIVATION to 0;
	sleep 100;
	turn turret to y-axis heading speed <110.>;
	turn barrel to x-axis <0.> - pitch speed <70.>;
	wait-for-turn turret around y-axis;
	wait-for-turn barrel around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	sleep 250;
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide flare;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode barrel type NOHEATCLOUD;
		explode base type NOHEATCLOUD;
		explode body type NOHEATCLOUD;
		explode turret type NOHEATCLOUD;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode barrel type FALL | NOHEATCLOUD;
		explode base type NOHEATCLOUD;
		explode turret type SHATTER | NOHEATCLOUD;
		explode body type SHATTER | NOHEATCLOUD;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode barrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
		explode body type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
		explode base type NOHEATCLOUD;
		explode turret type SHATTER | NOHEATCLOUD;
		return (0);
	}
	corpsetype = 3;
	explode barrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode body type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode base type NOHEATCLOUD;
	explode turret type SHATTER | EXPLODE_ON_HIT | NOHEATCLOUD;
}
