#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  flare1a, flare1b, flare1c, flare2a, flare2b, flare2c, base, turret1,
       turret2, wake1, wake2, barrel1a, barrel1b, barrel1c, barrel2a, barrel2b,
       barrel2c, ground;

static-var  Static_Var_1, Static_Var_2, restore_delay, Static_Var_6;

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_2			4
#define SIG_MOVE			8


SetDirection(heading)
{
	var Func_Var_2;
	Func_Var_2 = ( get ABS(Static_Var_6) - get ABS(heading) ) / 2;
	turn ground to y-axis heading speed Func_Var_2;
	turn base to y-axis <0.000000> - heading speed Func_Var_2;
	Static_Var_6 = heading;
}

RockOnWaves(Func_Var_1, Func_Var_2, Func_Var_3)
{
	Func_Var_1 = -18;
	Func_Var_2 = -18;
	while( TRUE )
	{
		while( get ABS(Func_Var_2) < 202 )
		{
			Func_Var_3 = 227 - get ABS(Func_Var_2);
			turn ground to x-axis Func_Var_2 speed Func_Var_3 * <0.010989>;
			wait-for-turn ground around x-axis;
			Func_Var_2 = Func_Var_2 + Func_Var_1;
		}
		Func_Var_1 = 0 - Func_Var_1;
		Func_Var_2 = Func_Var_2 + Func_Var_1 + Func_Var_1;
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	start-script RockOnWaves();
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 258;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 257;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	hide flare1a;
	hide flare1b;
	hide flare1c;
	hide flare2a;
	hide flare2b;
	hide flare2c;
	Static_Var_1 = 1;
	Static_Var_2 = 1;
	restore_delay = 3000;
	start-script SmokeUnit();
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 8;
}

RestorePrimary()
{
	sleep restore_delay;
	turn turret1 to y-axis <0.000000> speed <55.000000>;
	turn turret1 to x-axis <0.000000> speed <30.000000>;
}

RestoreSecondary()
{
	sleep restore_delay;
	turn turret2 to y-axis <0.000000> speed <55.000000>;
	turn turret2 to x-axis <0.000000> speed <30.000000>;
}

waveSplash()
{
	while( TRUE )
	{
		turn base to x-axis <-1.000000> speed <1.000000>;
		move base to y-axis [0.229999] speed [0.169995];
		wait-for-turn base around x-axis;
		turn base to x-axis <0.000000> speed <1.000000>;
		move base to y-axis [0.000000] speed [0.169995];
		wait-for-turn base around x-axis;
	}
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	start-script waveSplash();
	while( TRUE )
	{
		emit-sfx 2 from wake1;
		emit-sfx 2 from wake2;
		
		sleep 250;
	}
}

StopMoving()
{
	signal SIG_MOVE;
	turn base to x-axis <0.000000> speed <1.000000>;
	move base to y-axis [0.000000] speed [0.169995];
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret1 to y-axis heading speed <55.000000>;
	turn turret1 to x-axis <0.000000> - pitch speed <30.000000>;
	wait-for-turn turret1 around y-axis;
	wait-for-turn turret1 around x-axis;
	start-script RestorePrimary();
	return (1);
}

AimSecondary(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	turn turret2 to y-axis heading speed <55.000000>;
	turn turret2 to x-axis <0.000000> - pitch speed <30.000000>;
	wait-for-turn turret2 around y-axis;
	wait-for-turn turret2 around x-axis;	
	start-script RestoreSecondary();
	return (1);
}

FirePrimary()
{
	if( Static_Var_1 == 1 )
	{
		emit-sfx 1024 from flare1a;
		move barrel1a to z-axis [-2.500000] now;
		sleep 150;
		move barrel1a to z-axis [0.000000] speed [2.000000];
	}
	if( Static_Var_1 == 2 )
	{
		emit-sfx 1024 from flare1b;
		move barrel1b to z-axis [-2.500000] now;
		sleep 150;
		move barrel1b to z-axis [0.000000] speed [2.000000];
	}
	if( Static_Var_1 == 3 )
	{
		emit-sfx 1024 from flare1c;
		move barrel1c to z-axis [-2.500000] now;
		sleep 150;
		move barrel1c to z-axis [0.000000] speed [2.000000];
	}
	++Static_Var_1 ;
	if( Static_Var_1 == 4 )
	{
		Static_Var_1 = 1;
	}
}

FireSecondary()
{
	if( Static_Var_2 == 1 )
	{
		emit-sfx 1024 from flare2a;
		move barrel2a to z-axis [-2.500000] now;
		sleep 150;
		move barrel2a to z-axis [0.000000] speed [2.000000];
	}
	if( Static_Var_2 == 2 )
	{
		emit-sfx 1024 from flare2b;
		move barrel2b to z-axis [-2.500000] now;
		sleep 150;
		move barrel2b to z-axis [0.000000] speed [2.000000];
	}
	if( Static_Var_2 == 3 )
	{
		emit-sfx 1024 from flare2c;
		move barrel2c to z-axis [-2.500000] now;
		sleep 150;
		move barrel2c to z-axis [0.000000] speed [2.000000];
	}
	++Static_Var_2;
	if( Static_Var_2 == 4 )
	{
		Static_Var_2 = 1;
	}
}

AimFromPrimary(piecenum)
{
	piecenum = turret1;
}

QueryPrimary(piecenum)
{
	if( Static_Var_1 == 1 )
	{
		piecenum = flare1a;
	}
	if( Static_Var_1 == 2 )
	{
		piecenum = flare1b;
	}
	if( Static_Var_1 == 3 )
	{
		piecenum = flare1c;
	}
}

AimFromSecondary(piecenum)
{
	piecenum = turret2;
}

QuerySecondary(piecenum)
{
	if( Static_Var_2 == 1 )
	{
		piecenum = flare2a;
	}
	if( Static_Var_2 == 2 )
	{
		piecenum = flare2b;
	}
	if( Static_Var_2 == 3 )
	{
		piecenum = flare2c;
	}
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide flare1a;
	hide flare1b;
	hide flare1c;
	hide flare2a;
	hide flare2b;
	hide flare2c;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode barrel1a type NOHEATCLOUD;
		explode barrel1b type NOHEATCLOUD;
		explode barrel1c type NOHEATCLOUD;
		explode barrel2a type NOHEATCLOUD;
		explode barrel2b type NOHEATCLOUD;
		explode barrel2c type NOHEATCLOUD;
		explode base type NOHEATCLOUD;
		explode flare1a type NOHEATCLOUD;
		explode flare1b type NOHEATCLOUD;
		explode flare1c type NOHEATCLOUD;
		explode flare2a type NOHEATCLOUD;
		explode flare2b type NOHEATCLOUD;
		explode flare2c type NOHEATCLOUD;
		explode turret1 type NOHEATCLOUD;
		explode turret2 type NOHEATCLOUD;
		explode wake1 type NOHEATCLOUD;
		explode wake2 type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode barrel1a type NOHEATCLOUD | FALL | EXPLODE_ON_HIT;
		explode barrel1b type NOHEATCLOUD | FALL | EXPLODE_ON_HIT;
		explode barrel1c type NOHEATCLOUD | FALL | EXPLODE_ON_HIT;
		explode barrel2a type NOHEATCLOUD | FALL | EXPLODE_ON_HIT;
		explode barrel2b type NOHEATCLOUD | FALL | EXPLODE_ON_HIT;
		explode barrel2c type NOHEATCLOUD | FALL | EXPLODE_ON_HIT;
		explode base type NOHEATCLOUD;
		explode flare1a type NOHEATCLOUD | FALL | EXPLODE_ON_HIT;
		explode flare1b type NOHEATCLOUD | FALL | EXPLODE_ON_HIT;
		explode flare1c type NOHEATCLOUD | FALL | EXPLODE_ON_HIT;
		explode flare2a type NOHEATCLOUD | FALL | EXPLODE_ON_HIT;
		explode flare2b type NOHEATCLOUD | FALL | EXPLODE_ON_HIT;
		explode flare2c type NOHEATCLOUD | FALL | EXPLODE_ON_HIT;
		explode turret1 type NOHEATCLOUD;
		explode turret2 type NOHEATCLOUD | SHATTER;
		explode wake1 type NOHEATCLOUD | FALL | EXPLODE_ON_HIT;
		explode wake2 type NOHEATCLOUD | FALL | EXPLODE_ON_HIT;
		return (corpsetype);
	}
	corpsetype = 3;
	explode barrel1a type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode barrel1b type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode barrel1c type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode barrel2a type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode barrel2b type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode barrel2c type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode base type NOHEATCLOUD;
	explode flare1a type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode flare1b type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode flare1c type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode flare2a type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode flare2b type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode flare2c type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode turret1 type NOHEATCLOUD;
	explode turret2 type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	explode wake1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode wake2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	return (corpsetype);
}
