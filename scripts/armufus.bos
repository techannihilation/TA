#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, main, main2, mmaker, mmkrglow, pipe1, pipe2, pipe3, pipe4, 
		tower1, armor1, reactor1, collar1, ball1,
		tower2, armor2, reactor2, collar2, ball2,
		tower3, armor3, reactor3, collar3, ball3,
		tower4, armor4, reactor4, collar4, ball4,
		bridge1, bridge2, bridge3, bridge4,
		energytower, glowy, supportmm, 
		door, doora, doorb, doorc, doord, doore, doorf;

static-var  Static_Var_1, Static_Var_2;

activatescr()
{
	if( TRUE )
	{
		turn doorc to x-axis <30.000000> speed <30.000000>;
		turn doorb to x-axis <30.000000> speed <30.000000>;
		//turn doora to x-axis <30.000000> speed <30.000000>;
		
		//turn doord to x-axis <-30.000000> speed <30.000000>;
		turn doore to x-axis <-30.000000> speed <30.000000>;
		turn doorf to x-axis <-30.000000> speed <30.000000>;
		
		turn mmaker to y-axis <0.000000> now;
		turn mmaker to y-axis <-30.000000> speed <35.000000>;
		sleep 250;
	}
	if( TRUE )
	{
		move mmaker to y-axis [20.000000] speed [6.000000];
	}

}

deactivatescr()
{
	if( TRUE )
	{
		move mmaker to y-axis [0.000000] speed [6.000000];
		wait-for-move mmaker along y-axis;
	}
	if( TRUE )
	{
		turn mmaker to y-axis <0.000000> speed <35.000000>;
		wait-for-move mmaker along y-axis;
		turn doorc to x-axis <0.000000> speed <30.000000>;
		turn doorb to x-axis <0.000000> speed <30.000000>;
		//turn doora to x-axis <0.000000> speed <30.000000>;
		
		//turn doord to x-axis <0.000000> speed <30.000000>;
		turn doore to x-axis <0.000000> speed <30.000000>;
		turn doorf to x-axis <0.000000> speed <30.000000>;
	}

}

Go()
{
	call-script activatescr();
}

Stop()
{
	call-script deactivatescr();
}

MMStatus(Func_Var_1)
{
	Static_Var_1 = Func_Var_1;
}

ImAMetalMaker()
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 150;
	}
	Static_Var_2 = -1;
	while( TRUE )
	{
		if( Static_Var_1 == 1 )
		{
			if( Static_Var_2 != 1 )
			{
				call-script Go();
				Static_Var_2 = 1;
			}
		}
		else if( Static_Var_2 != 0 )
		{
			call-script Stop();
			Static_Var_2 = 0;
		}
		sleep 1000;
	}
}


SmokeUnit(healthpercent, sleeptime, smoketype, smokepiece)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	start-script ImAMetalMaker();
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
			
			smokepiece = Rand( 1, 5 );
			if( smokepiece == 1 )
			{
				emit-sfx smoketype from reactor1;
			}
			if( smokepiece == 2 )
			{
				emit-sfx smoketype from reactor1;
			}
			if( smokepiece == 3 )
			{
				emit-sfx smoketype from reactor1;
			}
			if( smokepiece == 4 )
			{
				emit-sfx smoketype from reactor1;
			}
			if( smokepiece == 5 )
			{
				emit-sfx smoketype from energytower;
			}
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	start-script SmokeUnit();
	spin ball1 around y-axis speed <-20.000000>;
	spin ball2 around y-axis speed <-20.000000>;
	spin ball3 around y-axis speed <-20.000000>;
	spin ball4 around y-axis speed <-20.000000>;
	spin collar1 around y-axis speed <35.000000>;
	spin collar2 around y-axis speed <35.000000>;
	spin collar3 around y-axis speed <35.000000>;
	spin collar4 around y-axis speed <35.000000>;		
}

HitByWeapon(anglex, anglez)
{
	signal 2;
	set-signal-mask 2;
	set ACTIVATION to 0;
	sleep 10000;
	set ACTIVATION to 1;
}


SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode main type NOHEATCLOUD;
		explode main2 type NOHEATCLOUD;
		explode pipe1 type NOHEATCLOUD;
		explode pipe2 type NOHEATCLOUD;
		explode pipe3 type NOHEATCLOUD;
		explode pipe4 type NOHEATCLOUD;
		explode bridge1 type NOHEATCLOUD;
		explode bridge2 type NOHEATCLOUD;
		explode bridge3 type NOHEATCLOUD;
		explode bridge4 type NOHEATCLOUD;
		explode tower1 type NOHEATCLOUD;
		explode tower2 type NOHEATCLOUD;
		explode tower3 type NOHEATCLOUD;
		explode tower4 type NOHEATCLOUD;
		explode reactor1 type NOHEATCLOUD;
		explode reactor2 type NOHEATCLOUD;
		explode reactor3 type NOHEATCLOUD;
		explode reactor4 type NOHEATCLOUD;
		explode collar1 type FALL | EXPLODE_ON_HIT | NOHEATCLOUD;
		explode collar3 type FALL | EXPLODE_ON_HIT | NOHEATCLOUD;
		explode energytower type NOHEATCLOUD;
		explode mmaker type NOHEATCLOUD;
		explode mmkrglow type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode main type SHATTER | NOHEATCLOUD;
		explode main2 type SHATTER | NOHEATCLOUD;
		explode pipe1 type SHATTER | NOHEATCLOUD;
		explode pipe2 type SHATTER | NOHEATCLOUD;
		explode pipe3 type SHATTER | NOHEATCLOUD;
		explode pipe4 type SHATTER | NOHEATCLOUD;
		explode bridge1 type FALL | NOHEATCLOUD;
		explode bridge2 type FALL | NOHEATCLOUD;
		explode bridge3 type FALL | NOHEATCLOUD;
		explode bridge4 type FALL | NOHEATCLOUD;
		explode tower1 type NOHEATCLOUD;
		explode tower2 type NOHEATCLOUD;
		explode tower3 type NOHEATCLOUD;
		explode tower4 type NOHEATCLOUD;
		explode reactor1 type SHATTER | NOHEATCLOUD;
		explode reactor2 type SHATTER | NOHEATCLOUD;
		explode reactor3 type SHATTER | NOHEATCLOUD;
		explode reactor4 type SHATTER | NOHEATCLOUD;
		explode collar1 type FALL | EXPLODE_ON_HIT | NOHEATCLOUD;
		explode collar3 type FALL | EXPLODE_ON_HIT | NOHEATCLOUD;
		explode energytower type NOHEATCLOUD;
		explode mmaker type SHATTER | NOHEATCLOUD;
		explode mmkrglow type SHATTER | NOHEATCLOUD;
		return (corpsetype);
	}
	corpsetype = 3;
	if( severity <= 99 )
	{
		explode main type SHATTER | NOHEATCLOUD | EXPLODE_ON_HIT;
		explode main2 type SHATTER | NOHEATCLOUD | EXPLODE_ON_HIT;
		explode pipe1 type SHATTER | NOHEATCLOUD | EXPLODE_ON_HIT;
		explode pipe2 type SHATTER | NOHEATCLOUD | EXPLODE_ON_HIT;
		explode pipe3 type SHATTER | NOHEATCLOUD | EXPLODE_ON_HIT;
		explode pipe4 type SHATTER | NOHEATCLOUD | EXPLODE_ON_HIT;
		explode bridge1 type FALL | NOHEATCLOUD;
		explode bridge2 type FALL | NOHEATCLOUD;
		explode bridge3 type FALL | NOHEATCLOUD;
		explode bridge4 type FALL | NOHEATCLOUD;
		explode tower1 type SHATTER | NOHEATCLOUD | EXPLODE_ON_HIT;
		explode tower2 type SHATTER | NOHEATCLOUD | EXPLODE_ON_HIT;
		explode tower3 type SHATTER | NOHEATCLOUD | EXPLODE_ON_HIT;
		explode tower4 type SHATTER | NOHEATCLOUD | EXPLODE_ON_HIT;
		explode reactor1 type SHATTER | NOHEATCLOUD | EXPLODE_ON_HIT;
		explode reactor2 type SHATTER | NOHEATCLOUD | EXPLODE_ON_HIT;
		explode reactor3 type SHATTER | NOHEATCLOUD | EXPLODE_ON_HIT;
		explode reactor4 type SHATTER | NOHEATCLOUD | EXPLODE_ON_HIT;
		explode collar1 type FALL | EXPLODE_ON_HIT | NOHEATCLOUD;
		explode collar3 type FALL | EXPLODE_ON_HIT | NOHEATCLOUD;
		explode energytower type NOHEATCLOUD;
		explode mmaker type SHATTER | NOHEATCLOUD;
		explode mmkrglow type SHATTER | NOHEATCLOUD;
		return (corpsetype);
	}
	explode main type SHATTER | NOHEATCLOUD | EXPLODE_ON_HIT;
	explode main2 type SHATTER | NOHEATCLOUD | EXPLODE_ON_HIT;
	explode pipe1 type SHATTER | NOHEATCLOUD | EXPLODE_ON_HIT;
	explode pipe2 type SHATTER | NOHEATCLOUD | EXPLODE_ON_HIT;
	explode pipe3 type SHATTER | NOHEATCLOUD | EXPLODE_ON_HIT;
	explode pipe4 type SHATTER | NOHEATCLOUD | EXPLODE_ON_HIT;
	explode bridge1 type FALL | NOHEATCLOUD;
	explode bridge2 type FALL | NOHEATCLOUD;
	explode bridge3 type FALL | NOHEATCLOUD;
	explode bridge4 type FALL | NOHEATCLOUD;
	explode tower1 type SHATTER | NOHEATCLOUD | EXPLODE_ON_HIT;
	explode tower2 type SHATTER | NOHEATCLOUD | EXPLODE_ON_HIT;
	explode tower3 type SHATTER | NOHEATCLOUD | EXPLODE_ON_HIT;
	explode tower4 type SHATTER | NOHEATCLOUD | EXPLODE_ON_HIT;
	explode reactor1 type SHATTER | NOHEATCLOUD | EXPLODE_ON_HIT;
	explode reactor2 type SHATTER | NOHEATCLOUD | EXPLODE_ON_HIT;
	explode reactor3 type SHATTER | NOHEATCLOUD | EXPLODE_ON_HIT;
	explode reactor4 type SHATTER | NOHEATCLOUD | EXPLODE_ON_HIT;
	explode collar1 type FALL | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode collar3 type FALL | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode energytower type NOHEATCLOUD;
	explode mmaker type SHATTER | NOHEATCLOUD;
	explode mmkrglow type SHATTER | NOHEATCLOUD;
	return (corpsetype);
}