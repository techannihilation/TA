#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, drill, GP, circle1, circle2, bubble1, bubble2, bubble3;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4, Static_Var_5;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 3;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 3;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

bubble()
{
	emit-sfx 256 | 3 from bubble2;
	emit-sfx 256 | 3 from bubble1;
	emit-sfx 256 | 3 from bubble3;
	sleep 100;
	if( Static_Var_5 )
	{
		start-script bubble();
	}
}

Go()
{
	Static_Var_5 = 1;
	spin circle1 around y-axis speed Static_Var_1 accelerate <1.000000>;
	spin circle2 around y-axis speed Static_Var_1 accelerate <-2.000000>;
	spin drill around y-axis speed Static_Var_1 accelerate <1.000000>;
	start-script bubble();
}

Stop()
{
	Static_Var_5 = 0;
	stop-spin circle1 around y-axis decelerate <1.000000>;
	stop-spin circle2 around y-axis decelerate <-2.000000>;
	stop-spin drill around y-axis decelerate <1.000000>;
	wait-for-turn drill around y-axis;
}

InitState()
{
	Static_Var_3 = 1;
	Static_Var_4 = 0;
}

RequestState(requestedstate, currentstate)
{
	if( Static_Var_4 )
	{
		Static_Var_3 = requestedstate;
		return (0);
	}
	Static_Var_4 = 1;
	currentstate = Static_Var_3;
	Static_Var_3 = requestedstate;
	while( Static_Var_3 != currentstate )
	{
		if( Static_Var_3 == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( Static_Var_3 == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	Static_Var_4 = 0;
}

Create()
{
	dont-shade drill;
	dont-shade base;
	Static_Var_1 = 0;
	Static_Var_2 = 0;
	call-script InitState();
	start-script SmokeUnit();
	dont-cache drill;
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

SetSpeed(Func_Var_1)
{
	Static_Var_1 = Func_Var_1 * 45;
}

SweetSpot(piecenum)
{
	piecenum = GP;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode drill type NOHEATCLOUD;
		explode base type NOHEATCLOUD;
		explode circle1 type NOHEATCLOUD;
		explode circle2 type NOHEATCLOUD;
		explode GP type NOHEATCLOUD;
		explode bubble1 type NOHEATCLOUD;
		explode bubble2 type NOHEATCLOUD;
		explode bubble3 type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode drill type NOHEATCLOUD | FALL ;
		explode base type NOHEATCLOUD | FALL ;
		explode circle1 type NOHEATCLOUD | FALL ;
		explode circle2 type NOHEATCLOUD | FALL ;
		explode GP type NOHEATCLOUD | FALL ;
		explode bubble1 type NOHEATCLOUD | FALL ;
		explode bubble2 type NOHEATCLOUD | FALL ;
		explode bubble3 type NOHEATCLOUD | FALL ;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode drill type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
		explode base type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
		explode circle1 type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
		explode circle2 type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
		explode bubble1 type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
		explode bubble2 type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
		explode bubble3 type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
		explode GP type NOHEATCLOUD  | FALL;
		return (corpsetype);
	}
	corpsetype = 3;
	explode drill type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	explode base type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	explode circle1 type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	explode circle2 type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	explode bubble1 type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	explode bubble2 type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	explode bubble3 type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	explode GP type NOHEATCLOUD  | FALL;
	return (corpsetype);
}
