#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  gauss, turret, flash, torso, ruparm, luparm, pelvis, lthigh,
       rthigh, rleg, rfoot, lleg, lfoot, lloarm, lhand, rloarm,
       rhand, ground;

static-var  Static_Var_1, Static_Var_2;


Walk()
{
	while( TRUE )
	{
		if( Static_Var_2 )
		{
			turn rthigh to x-axis <0.> now;
			turn ruparm to x-axis <0.> now;
			turn lthigh to x-axis <40.> now;
			turn luparm to x-axis <0.> now;
			turn rfoot to x-axis <0.> now;
			turn rhand to x-axis <0.> now;
			turn lfoot to x-axis <25.> now;
			turn lhand to x-axis <0.> now;
			turn rthigh to x-axis <20.> speed <450.>;
			turn ruparm to x-axis <-15.> speed <300.>;
			turn lthigh to x-axis <20.> speed <450.>;
			turn luparm to x-axis <15.> speed <300.>;
			turn rfoot to x-axis <-20.> speed <450.>;
			turn lfoot to x-axis <15.> speed <225.>;
			turn lhand to x-axis <-15.> speed <300.>;
			wait-for-turn rthigh around x-axis;
		}
		if( Static_Var_2 )
		{
			turn rthigh to x-axis <40.> speed <450.>;
			turn ruparm to x-axis <-20.> speed <75.>;
			turn lthigh to x-axis <0.> speed <450.>;
			turn luparm to x-axis <30.> speed <300.>;
			turn rfoot to x-axis <0.> speed <450.>;
			turn rhand to x-axis <10.> speed <225.>;
			turn lfoot to x-axis <0.> speed <300.>;
			turn lhand to x-axis <0.> speed <300.>;
			wait-for-turn rthigh around x-axis;
		}
		if( Static_Var_2 )
		{
			turn rthigh to x-axis <50.> speed <225.>;
			turn ruparm to x-axis <-15.> speed <75.>;
			turn lthigh to x-axis <-20.> speed <450.>;
			turn luparm to x-axis <35.> speed <75.>;
			turn rfoot to x-axis <15.> speed <300.>;
			turn rhand to x-axis <15.> speed <75.>;
			turn lhand to x-axis <10.> speed <225.>;
			wait-for-turn rthigh around x-axis;
		}
		if( Static_Var_2 )
		{
			turn rthigh to x-axis <40.> speed <225.>;
			turn ruparm to x-axis <0.> speed <300.>;
			turn lthigh to x-axis <-30.> speed <225.>;
			turn luparm to x-axis <30.> speed <75.>;
			turn rfoot to x-axis <25.> speed <225.>;
			turn rhand to x-axis <0.> speed <300.>;
			turn lfoot to x-axis <10.> speed <225.>;
			turn lhand to x-axis <15.> speed <75.>;
			wait-for-turn rthigh around x-axis;
		}
		if( Static_Var_2 )
		{
			turn rthigh to x-axis <20.> speed <450.>;
			turn ruparm to x-axis <15.> speed <300.>;
			turn lthigh to x-axis <-20.> speed <225.>;
			turn luparm to x-axis <15.> speed <300.>;
			turn rfoot to x-axis <15.> speed <225.>;
			turn rhand to x-axis <-15.> speed <300.>;
			turn lfoot to x-axis <20.> speed <225.>;
			turn lhand to x-axis <10.> speed <75.>;
			wait-for-turn rthigh around x-axis;
		}
		if( Static_Var_2 )
		{
			turn rthigh to x-axis <0.> speed <450.>;
			turn ruparm to x-axis <30.> speed <300.>;
			turn lthigh to x-axis <0.> speed <450.>;
			turn luparm to x-axis <0.> speed <300.>;
			turn rfoot to x-axis <0.> speed <300.>;
			turn rhand to x-axis <0.> speed <300.>;
			turn lfoot to x-axis <0.> speed <450.>;
			turn lhand to x-axis <0.> speed <225.>;
			wait-for-turn rthigh around x-axis;
		}
		if( Static_Var_2 )
		{
			turn rthigh to x-axis <-20.> speed <450.>;
			turn ruparm to x-axis <35.> speed <75.>;
			turn lthigh to x-axis <20.> speed <450.>;
			turn luparm to x-axis <-15.> speed <300.>;
			turn rhand to x-axis <10.> speed <225.>;
			turn lfoot to x-axis <-20.> speed <450.>;
			wait-for-turn rthigh around x-axis;
		}
		if( Static_Var_2 )
		{
			turn rthigh to x-axis <-30.> speed <225.>;
			turn ruparm to x-axis <30.> speed <75.>;
			turn lthigh to x-axis <40.> speed <450.>;
			turn luparm to x-axis <-20.> speed <75.>;
			turn rfoot to x-axis <10.> speed <225.>;
			turn rhand to x-axis <15.> speed <75.>;
			turn lfoot to x-axis <0.> speed <450.>;
			turn lhand to x-axis <10.> speed <225.>;
			wait-for-turn rthigh around x-axis;
		}
		if( Static_Var_2 )
		{
			turn rthigh to x-axis <-20.> speed <225.>;
			turn ruparm to x-axis <15.> speed <300.>;
			turn lthigh to x-axis <50.> speed <225.>;
			turn luparm to x-axis <-15.> speed <75.>;
			turn rfoot to x-axis <20.> speed <225.>;
			turn rhand to x-axis <10.> speed <75.>;
			turn lfoot to x-axis <15.> speed <300.>;
			turn lhand to x-axis <15.> speed <75.>;
			wait-for-turn rthigh around x-axis;
		}
		if( Static_Var_2 )
		{
			turn rthigh to x-axis <0.> speed <450.>;
			turn ruparm to x-axis <0.> speed <300.>;
			turn lthigh to x-axis <40.> speed <225.>;
			turn luparm to x-axis <0.> speed <300.>;
			turn rfoot to x-axis <0.> speed <450.>;
			turn rhand to x-axis <0.> speed <225.>;
			turn lfoot to x-axis <25.> speed <225.>;
			turn lhand to x-axis <0.> speed <300.>;
			wait-for-turn rthigh around x-axis;
		}
		if( !Static_Var_2 )
		{
			turn rthigh to x-axis <0.> speed <400.>;
			turn ruparm to x-axis <0.> speed <450.>;
			turn lthigh to x-axis <0.> speed <400.>;
			turn luparm to x-axis <0.> speed <450.>;
			turn rfoot to x-axis <0.> speed <400.>;
			turn rhand to x-axis <0.> speed <400.>;
			turn lfoot to x-axis <0.> speed <400.>;
			turn lhand to x-axis <0.> speed <400.>;
			wait-for-turn rthigh around x-axis;
		}
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 258;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 257;
			}
			emit-sfx smoketype from torso;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	hide flash;
	Static_Var_2 = 0;
	Static_Var_1 = 4500;
	start-script SmokeUnit();
	start-script Walk();
}

SetMaxReloadTime(Func_Var_1)
{
	Static_Var_1 = Func_Var_1 * 2;
}

StartMoving()
{
	Static_Var_2 = 1;
}

StopMoving()
{
	Static_Var_2 = 0;
}

SweetSpot(piecenum)
{
	piecenum = gauss;
}

RestoreAfterDelay()
{
	sleep Static_Var_1;
	turn turret to y-axis <0.> speed <90.>;
	turn gauss to x-axis <0.> speed <50.>;
	wait-for-turn turret around y-axis;
	wait-for-turn gauss around x-axis;
	stop-spin gauss around z-axis;
}

AimPrimary(heading, pitch)
{
	signal 4;
	set-signal-mask 4;
	turn turret to y-axis heading speed <125.000000>;
	turn gauss to x-axis <0.000000> - pitch speed <90.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn gauss around x-axis;
	spin gauss around z-axis speed <220.000000>;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	emit-sfx 1025 from flash;
	sleep 50;
}

QueryPrimary(piecenum)
{
	piecenum = flash;
}

Killed(severity, corpsetype)
{
	hide flash;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode flash type BITMAPONLY | BITMAP1;
		explode gauss type BITMAPONLY | BITMAP2;
		explode ground type BITMAPONLY | BITMAP3;
		explode lfoot type BITMAPONLY | BITMAP4;
		explode lhand type BITMAPONLY | BITMAP5;
		explode lleg type BITMAPONLY | BITMAP1;
		explode lloarm type BITMAPONLY | BITMAP2;
		explode lthigh type BITMAPONLY | BITMAP3;
		explode luparm type BITMAPONLY | BITMAP4;
		explode pelvis type BITMAPONLY | BITMAP5;
		explode rfoot type BITMAPONLY | BITMAP1;
		explode rhand type BITMAPONLY | BITMAP2;
		explode rleg type BITMAPONLY | BITMAP3;
		explode rloarm type BITMAPONLY | BITMAP4;
		explode rthigh type BITMAPONLY | BITMAP5;
		explode ruparm type BITMAPONLY | BITMAP1;
		explode torso type BITMAPONLY | BITMAP2;
		explode turret type BITMAPONLY | BITMAP3;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode flash type FALL | BITMAP1;
		explode gauss type SHATTER | BITMAP2;
		explode ground type FALL | BITMAP3;
		explode lfoot type FALL | BITMAP4;
		explode lhand type FALL | BITMAP5;
		explode lleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode lloarm type FALL | BITMAP2;
		explode lthigh type FALL | BITMAP3;
		explode luparm type FALL | BITMAP4;
		explode pelvis type BITMAPONLY | BITMAP5;
		explode rfoot type FALL | BITMAP1;
		explode rhand type FALL | BITMAP2;
		explode rleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode rloarm type FALL | BITMAP4;
		explode rthigh type FALL | BITMAP5;
		explode ruparm type FALL | BITMAP1;
		explode torso type BITMAPONLY | BITMAP2;
		explode turret type BITMAPONLY | BITMAP3;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode flash type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode gauss type SHATTER | BITMAP2;
		explode ground type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode lfoot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode lhand type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode lleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode lloarm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode lthigh type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode luparm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode pelvis type BITMAPONLY | BITMAP5;
		explode rfoot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode rhand type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode rleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode rloarm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode rthigh type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode ruparm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode torso type BITMAPONLY | BITMAP2;
		explode turret type BITMAPONLY | BITMAP3;
		return (0);
	}
	corpsetype = 3;
	explode flash type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode gauss type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode ground type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode lfoot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode lhand type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode lleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode lloarm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode lthigh type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode luparm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode pelvis type BITMAPONLY | BITMAP5;
	explode rfoot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode rhand type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode rleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode rloarm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode rthigh type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode ruparm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode torso type BITMAPONLY | BITMAP2;
	explode turret type BITMAPONLY | BITMAP3;
}
