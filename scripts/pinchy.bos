#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, carapace, head, lantenna, rantenna, t1, t2, t3,
       t4, tfin, larm, lclaw, lpincer, rarm, rclaw, rpincer,
       trapdoor, gunturret, gunbarrel, nano1, nano2, leg1, leg2, leg3,
       leg4, leg5, leg6, firepoint;

static-var  bMoving, restore_delay, Static_Var_4, Static_Var_5,
            spray, statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_MOVE			2
#define SIG_AIM				4


activatescr()
{
	if( TRUE )
	{
		turn trapdoor to z-axis <0.000000> now;
		sleep 426;
	}
	if( TRUE )
	{
		turn trapdoor to x-axis <-170.038462> speed <100.000000>;
		sleep 428;
	}
	if( TRUE )
	{
		move gunturret to y-axis [2.000000] speed [5.000000];
		wait-for-move gunturret along y-axis;
		sleep 428;
	}
	if( TRUE )
	{
		move gunbarrel to z-axis [1.500000] speed [10.000000];
		sleep 429;
	}
	sleep 22;
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

deactivatescr()
{
	if( TRUE )
	{
		move gunbarrel to z-axis [0.000000] speed [10.000000];
		wait-for-move gunbarrel along y-axis;
		sleep 388;
	}
	if( TRUE )
	{
		move gunturret to y-axis [0.000000] speed [9.000000];
		sleep 389;
	}
	if( TRUE )
	{
		turn trapdoor to x-axis <0.000000> speed <50.000000>;
		sleep 389;
	}
	if( TRUE )
	{
		turn trapdoor to z-axis <0.000000> speed <58.000000>;
		sleep 390;
	}
	sleep 20;
}

walk2()
{
	while( bMoving )
	{
		if( bMoving )
		{
			turn leg1 to y-axis <43.785714> now;
			turn leg1 to y-axis <0.000000> speed <218.000000>;
			turn leg1 to z-axis <0.598901> now;
			turn leg1 to z-axis <0.000000> speed <3.000000>;
			turn leg2 to z-axis <0.000000> now;
			turn leg2 to z-axis <31.005495> speed <155.000000>;
			turn leg3 to y-axis <34.653846> now;
			turn leg3 to y-axis <34.005495> speed <3.000000>;
			turn leg3 to z-axis <31.615385> now;
			turn leg3 to z-axis <0.000000> speed <155.000000>;
			turn leg4 to y-axis <-40.137363> now;
			turn leg4 to y-axis <-40.005495> speed <0.000000>;
			turn leg4 to z-axis <-31.005495> now;
			turn leg4 to z-axis <0.000000> speed <152.000000>;
			turn leg5 to y-axis <-37.087912> now;
			turn leg5 to y-axis <0.000000> speed <185.000000>;
			turn leg5 to z-axis <0.000000> now;
			turn leg5 to z-axis <0.000000> speed <0.000000>;
			turn leg6 to y-axis <0.000000> now;
			turn leg6 to y-axis <-30.005495> speed <152.000000>;
			turn leg6 to z-axis <-45.010989> now;
			sleep 200;
		}
		if( bMoving )
		{
			turn leg1 to z-axis <31.005495> speed <158.000000>;
			turn leg2 to y-axis <34.005495> speed <173.000000>;
			turn leg2 to z-axis <31.005495> speed <0.000000>;
			turn leg3 to y-axis <0.000000> speed <170.000000>;
			turn leg3 to z-axis <0.000000> speed <3.000000>;
			turn leg4 to y-axis <0.000000> speed <200.000000>;
			turn leg5 to z-axis <-31.005495> speed <155.000000>;
			turn leg6 to z-axis <2.000000> speed <237.000000>;
			sleep 200;
		}
		if( bMoving )
		{
			turn leg1 to y-axis <55.010989> speed <279.000000>;
			turn leg1 to z-axis <31.005495> speed <3.000000>;
			turn leg2 to y-axis <34.005495> speed <0.000000>;
			turn leg2 to z-axis <0.000000> speed <152.000000>;
			turn leg3 to z-axis <31.005495> speed <158.000000>;
			turn leg4 to y-axis <0.000000> speed <3.000000>;
			turn leg4 to z-axis <-31.005495> speed <152.000000>;
			turn leg5 to y-axis <-31.005495> speed <158.000000>;
			turn leg5 to z-axis <-31.005495> speed <0.000000>;
			turn leg6 to y-axis <3.000000> speed <167.000000>;
			sleep 200;
		}
		turn leg1 to y-axis <43.005495> speed <60.000000>;
		turn leg1 to z-axis <0.000000> speed <152.000000>;
		turn leg2 to y-axis <0.000000> speed <173.000000>;
		turn leg2 to z-axis <0.000000> speed <3.000000>;
		turn leg3 to y-axis <34.005495> speed <173.000000>;
		turn leg3 to z-axis <31.005495> speed <0.000000>;
		turn leg4 to y-axis <-40.005495> speed <197.000000>;
		turn leg4 to z-axis <-31.005495> speed <0.000000>;
		turn leg5 to y-axis <-37.005495> speed <27.000000>;
		turn leg5 to z-axis <0.000000> speed <155.000000>;
		turn leg6 to y-axis <0.000000> speed <15.000000>;
		turn leg6 to z-axis <-45.010989> speed <237.000000>;
		sleep 200;
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from carapace;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

MotionControl(Func_Var_1)
{
	Func_Var_1 = 1;
	while( TRUE )
	{
		if( bMoving )
		{
			turn lpincer to y-axis <-30.005495> speed <20.000000>;
			turn lclaw to y-axis <-20.000000> speed <20.000000>;
			turn larm to y-axis <0.000000> speed <20.000000>;
			turn rpincer to y-axis <30.005495> speed <20.000000>;
			turn rclaw to y-axis <20.000000> speed <20.000000>;
			turn rarm to y-axis <0.000000> speed <20.000000>;
			sleep 256;
			call-script walk2();
		}
		if( !bMoving )
		{
			turn lpincer to y-axis <0.000000> speed <20.000000>;
			turn lclaw to y-axis <0.000000> speed <20.000000>;
			turn larm to y-axis <0.000000> speed <20.000000>;
			turn rpincer to y-axis <0.000000> speed <20.000000>;
			turn rclaw to y-axis <0.000000> speed <20.000000>;
			turn rarm to y-axis <0.000000> speed <20.000000>;
			sleep 256;
			Func_Var_1 = 0;
			sleep 100;
		}
	}
}

Go()
{
	call-script activatescr();
	turn gunturret to y-axis Static_Var_5 speed <160.000000>;
	wait-for-turn gunturret around y-axis;
	set INBUILDSTANCE to 1;
}

Stop()
{
	set INBUILDSTANCE to 0;
	turn gunturret to y-axis <0.000000> speed <160.000000>;
	wait-for-turn gunturret around y-axis;
	call-script deactivatescr();
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	dont-cache trapdoor;
	bMoving = FALSE;
	restore_delay = 3000;
	spray = base;
	Static_Var_5 = 0;
	call-script InitState();
	start-script MotionControl();
	start-script SmokeUnit();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

TargetHeading(Func_Var_1)
{
	Static_Var_5 = 0 - Func_Var_1;
}

StartBuilding(Func_Var_1)
{
	Static_Var_5 = Func_Var_1;
	start-script RequestState(0);
}

StopBuilding()
{
	start-script RequestState(1);
}

QueryNanoPiece(piecenum)
{
	if( spray == 0 )
	{
		piecenum = nano1;
	}
	if( spray != 0 )
	{
		piecenum = nano2;
	}
	spray = !spray;
}

StartMoving()
{
	bMoving = TRUE;
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
}

StopMoving()
{
	bMoving = FALSE;
	signal SIG_MOVE;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

RestoreAfterDelay()
{
	sleep restore_delay;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
}

AimFromPrimary(piecenum)
{
	piecenum = firepoint;
}

QueryPrimary(piecenum)
{
	piecenum = firepoint;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode carapace type NOHEATCLOUD | BITMAPONLY | BITMAP1;
		explode leg2 type NOHEATCLOUD | BITMAPONLY | BITMAP2;
		explode leg4 type NOHEATCLOUD | BITMAPONLY | BITMAP3;
		explode larm type NOHEATCLOUD | BITMAPONLY | BITMAP4;
		explode rarm type NOHEATCLOUD | BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode carapace type NOHEATCLOUD | BITMAPONLY | BITMAP1;
		explode leg2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode leg4 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode larm type NOHEATCLOUD | BITMAPONLY | BITMAP4;
		explode rarm type NOHEATCLOUD | BITMAPONLY | BITMAP5;
		explode nano1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode nano2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode firepoint type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode trapdoor type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT | BITMAP4;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode carapace type NOHEATCLOUD | BITMAPONLY | BITMAP1;
		explode leg2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode leg4 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode leg2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode leg4 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode leg2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode leg4 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode larm type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode rarm type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode nano1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode nano2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode firepoint type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode trapdoor type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT | BITMAP3;
		return (0);
	}
	corpsetype = 3;
	explode carapace type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode leg2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode leg4 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode leg2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode leg4 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode leg2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode leg4 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode larm type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode rarm type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode nano1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode nano2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode firepoint type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
}
