#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  flare1b, flare2b, base, wing1, wing2, tail1, tail2, weapon1,
       weapon2, flare1a, flare2a, thrust1, thrust2;

static-var  gun_1, statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_AIM			2

activatescr()
{
	if( TRUE )
	{
		move wing1 to x-axis [0.000000] now;
		move wing1 to x-axis [2.900000] speed [2.000000];
		move wing2 to x-axis [0.000000] now;
		move wing2 to x-axis [-2.900000] speed [2.000000];
		turn tail1 to z-axis <0.000000> now;
		turn tail1 to z-axis <56.005495> speed <56.000000>;
		turn tail2 to z-axis <0.000000> now;
		turn tail2 to z-axis <-65.005495> speed <66.000000>;
		sleep 998;
	}
	if( TRUE )
	{
		move weapon1 to x-axis [-3.000000] speed [2.000000];
		move weapon2 to x-axis [3.000000] speed [2.000000];
		sleep 1008;
	}
	sleep 102;
}

deactivatescr()
{
	if( TRUE )
	{
		move weapon1 to x-axis [-3.000000] now;
		move weapon1 to x-axis [0.000000] speed [2.000000];
		move weapon2 to x-axis [3.000000] now;
		move weapon2 to x-axis [0.000000] speed [2.000000];
		move wing1 to x-axis [2.900000] now;
		move wing2 to x-axis [-2.900000] now;
		turn tail1 to z-axis <56.005495> now;
		turn tail2 to z-axis <-65.714286> now;
		sleep 998;
	}
	if( TRUE )
	{
		move wing1 to x-axis [0.000000] speed [2.000000];
		move wing2 to x-axis [0.000000] speed [2.000000];
		turn tail1 to z-axis <0.000000> speed <55.000000>;
		turn tail2 to z-axis <0.000000> speed <65.000000>;
		sleep 1008;
	}
	sleep 71;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script activatescr();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script deactivatescr();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	gun_1 = flare1b;
	call-script InitState();
	start-script SmokeUnit();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

SweetSpot(piecenum)
{
	piecenum = base;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	return (1);
}

FirePrimary()
{
	if( gun_1 == 0 )
	{
		gun_1 = flare2b;
		return (0);
	}
	if( gun_1 == 1 )
	{
		gun_1 = base;
		return (0);
	}
	if( gun_1 == 2 )
	{
		gun_1 = wing1;
		return (0);
	}
	if( gun_1 == 3 )
	{
		gun_1 = flare1b;
		return (0);
	}
}

QueryPrimary(piecenum)
{
	if( gun_1 == 0 )
	{
		piecenum = flare1a;
	}
	if( gun_1 == 1 )
	{
		piecenum = flare1b;
	}
	if( gun_1 == 2 )
	{
		piecenum = flare2a;
	}
	if( gun_1 == 3 )
	{
		piecenum = flare2b;
	}
}

AimFromPrimary(piecenum)
{
	if( gun_1 == 0 )
	{
		piecenum = flare1a;
	}
	if( gun_1 == 1 )
	{
		piecenum = flare1b;
	}
	if( gun_1 == 2 )
	{
		piecenum = flare2a;
	}
	if( gun_1 == 3 )
	{
		piecenum = flare2b;
	}
}

Killed(severity, corpsetype)
{
	hide flare1a;
	hide flare2a;
	hide flare1b;
	hide flare2b;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type NOHEATCLOUD;
		explode flare1a type NOHEATCLOUD;
		explode flare2a type NOHEATCLOUD;
		explode flare1b type NOHEATCLOUD;
		explode flare2b type NOHEATCLOUD;
		explode tail1 type NOHEATCLOUD;
		explode tail2 type NOHEATCLOUD;
		explode weapon1 type NOHEATCLOUD;
		explode weapon2 type NOHEATCLOUD;
		explode wing1 type NOHEATCLOUD;
		explode wing2 type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type NOHEATCLOUD;
		explode flare1a type NOHEATCLOUD | FALL;
		explode flare2a type NOHEATCLOUD | FALL;
		explode flare1b type NOHEATCLOUD | FALL;
		explode flare2b type NOHEATCLOUD | FALL;
		explode tail1 type NOHEATCLOUD | FALL;
		explode tail2 type NOHEATCLOUD | FALL;
		explode weapon1 type NOHEATCLOUD;
		explode weapon2 type NOHEATCLOUD | SHATTER;
		explode wing1 type NOHEATCLOUD;
		explode wing2 type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type NOHEATCLOUD;
		explode flare1a type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode flare2a type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode flare1b type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode flare2b type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode tail1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode tail2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode weapon1 type NOHEATCLOUD;
		explode weapon2 type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
		explode wing1 type NOHEATCLOUD;
		explode wing2 type NOHEATCLOUD;
		return (corpsetype);
	}
	corpsetype = 3;
	explode base type NOHEATCLOUD;
	explode flare1a type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode flare2a type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode flare1b type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode flare2b type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode tail1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode tail2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode weapon1 type NOHEATCLOUD;
	explode weapon2 type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	explode wing1 type NOHEATCLOUD;
	explode wing2 type NOHEATCLOUD;
	return (corpsetype);
}
