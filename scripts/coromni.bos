#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, tower, blades1, blades2, blades3;

static-var  statechg_DesiredState, statechg_StateChanging, enabled, onoff;
static-var	shield_on, nbr_shield, dome_on, nbr_dome ; 

// Signal definitions
#define SIG_ACTIVATE			2

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Go()
{
	onoff=1;
	
	spin tower around y-axis speed <5>;
	sleep 1;
	
	while(onoff)
	{
		turn blades1 to x-axis rand(<-45>,<45>) speed <45>;
		turn blades2 to x-axis rand(<-45>,<45>) speed <45>;
		turn blades3 to x-axis rand(<-45>,<45>) speed <45>;
		sleep 1000;
	}
}

Stop()
{
	onoff=0;
//	turn blades1 to x-axis 0 speed <45>;
//	turn blades2 to x-axis 0 speed <45>;
//	turn blades3 to x-axis 0 speed <45>;
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}


Create()
{
	shield_on = 0;
	dome_on = 0;
	enabled = 0;
	
	dont-shade tower;
	dont-shade blades1;
	dont-shade blades2;
	dont-shade blades3;
	dont-shade body;
	
	dont-cache tower;
	dont-cache blades1;
	dont-cache blades2;
	dont-cache blades3;
	
	onoff = 0;

	call-script InitState();
	start-script SmokeUnit();
}

Activate()
{
	enabled = 1;
	start-script RequestState(0);
}

Deactivate()
{
	enabled = 0;
	
	onoff=0;
	
	stop-spin tower around y-axis;
	
	turn blades1 to x-axis 0 speed <45>;
	turn blades2 to x-axis 0 speed <45>;
	turn blades3 to x-axis 0 speed <45>;
	
	start-script RequestState(1);
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode tower type BITMAPONLY | BITMAP1;
		explode blades1 type BITMAPONLY | BITMAP1;
		explode blades2 type BITMAPONLY | BITMAP1;
		explode blades3 type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode tower type BITMAPONLY | BITMAP1;
		explode blades1 type SHATTER | EXPLODE_ON_HIT | BITMAP1;
		explode blades2 type SHATTER | EXPLODE_ON_HIT | BITMAP1;
		explode blades3 type SHATTER | EXPLODE_ON_HIT | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode tower type BITMAPONLY | BITMAP1;
		explode blades1 type SHATTER | EXPLODE_ON_HIT | BITMAP1;
		explode blades2 type SHATTER | EXPLODE_ON_HIT | BITMAP1;
		explode blades3 type SHATTER | EXPLODE_ON_HIT | BITMAP1;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode tower type BITMAPONLY | BITMAP1;
	explode blades1 type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode blades2 type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode blades3 type SHATTER | EXPLODE_ON_HIT | BITMAP1;
}
