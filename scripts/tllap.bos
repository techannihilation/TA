#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, plate, pad, doors, door1a, door1b, door2a,
       door2b, door3a, door3b, spray1, spray2, tower, top;

static-var  spray, unitviewer, statechg_DesiredState, statechg_StateChanging, Static_Var_5,
            Static_Var_6;

// Signal definitions
#define SIG_ACTIVATE			2


HitByWeapon(anglex, anglez)
{
	var Func_Var_3;
	Func_Var_3 = get HEALTH;
	if( Func_Var_3 <= 60 )
	{
		if( Static_Var_5 == 0 )
		{
			Static_Var_5 = 1;
			hide door2b;
			explode door2b type NOHEATCLOUD | FALL | SHATTER | SMOKE;
		}
	}
	if( Func_Var_3 <= 50 )
	{
		if( Static_Var_6 == 0 )
		{
			Static_Var_6 = 1;
			hide door3b;
			explode door3b type NOHEATCLOUD | FALL | SHATTER | SMOKE;
		}
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	Static_Var_5 = 0;
	Static_Var_6 = 0;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent >= 60 )
		{
			if( Static_Var_6 == 1 )
			{
				Static_Var_6 = 0;
				show door3b;
			}
		}
		if( healthpercent >= 75 )
		{
			if( Static_Var_5 == 1 )
			{
				Static_Var_5 = 0;
				show door2b;
			}
		}
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from body;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

activatescr()
{
	if( TRUE )
	{
		move door1b to z-axis [5.000000] speed [3.500000];
		move door2b to z-axis [5.000000] speed [3.500000];
		move door3b to z-axis [5.000000] speed [3.500000];
		move plate to y-axis [10.000000] speed [10.000000];
		sleep 200;
	}
	if( TRUE )
	{
		turn door1b to x-axis <40.000000> speed <15.000000>;
		turn door2b to x-axis <40.000000> speed <15.000000>;
		turn door3b to x-axis <40.000000> speed <15.000000>;
		sleep 300;
	}
	if( TRUE )
	{
		move tower to z-axis [-8.000000] speed [3.500000];
		sleep 500;
	}
	if( TRUE )
	{
		wait-for-move plate along y-axis;
		turn top to z-axis <180.000000> speed <200.000000>;
		move plate to y-axis [-10.000000] speed [10.000000];
		wait-for-move plate along y-axis;
		dont-cache top;
	}
	sleep 26;
}

deactivatescr()
{
	if( TRUE )
	{
		cache top;
		move plate to y-axis [10.000000] speed [13.000000];
		wait-for-move plate along y-axis;
		turn top to z-axis <0.000000> speed <200.000000>;
	}
	if( TRUE )
	{
		turn door1b to x-axis <0.000000> speed <25.000000>;
		turn door2b to x-axis <0.000000> speed <25.000000>;
		turn door3b to x-axis <0.000000> speed <25.000000>;
		sleep 300;
	}
	if( TRUE )
	{
		move door1b to z-axis [0.000000] speed [3.500000];
		move door2b to z-axis [0.000000] speed [3.500000];
		move door3b to z-axis [0.000000] speed [3.500000];
		move tower to z-axis [0.000000] speed [4.000000];
		sleep 300;
	}
	if( TRUE )
	{
		move plate to y-axis [0.000000] speed [10.000000];
	}
	sleep 26;
}

OpenYard()
{
	set YARD_OPEN to 1;
	while( !get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 1;
	}
	set BUGGER_OFF to 0;
}

CloseYard()
{
	set YARD_OPEN to 0;
	while( get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 0;
	}
	set BUGGER_OFF to 0;
}

Go()
{
	call-script activatescr();
	call-script OpenYard();
	set ARMORED to 0;
	set INBUILDSTANCE to 1;
}

Stop()
{
	set INBUILDSTANCE to 0;
	set ARMORED to 1;
	call-script CloseYard();
	call-script deactivatescr();
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	cache body;
	dont-cache spray1;
	dont-cache spray2;
	dont-cache pad;
	dont-cache door1b;
	dont-cache door2b;
	dont-cache door3b;
	dont-cache tower;
	turn door2a to y-axis <107.000000> now;
	turn door3a to y-axis <-107.000000> now;
	spray = base;
	unitviewer = FALSE;
	set ARMORED to 1;
	call-script InitState();
	start-script SmokeUnit();
}

QueryNanoPiece(piecenum)
{
	if( spray == 0 )
	{
		piecenum = spray1;
	}
	if( spray == 1 )
	{
		piecenum = spray2;
	}
	spray = !spray;
}

Demo()
{
	unitviewer = TRUE;
}

Activate()
{
	signal SIG_ACTIVATE;
	start-script RequestState(0);
}

Deactivate()
{
	signal SIG_ACTIVATE;
	set-signal-mask SIG_ACTIVATE;
	if( !unitviewer )
	{
		sleep 5000;
	}
	set-signal-mask 0;
	start-script RequestState(1);
}

StartBuilding()
{
	spin pad around y-axis speed <30.000000>;
}

StopBuilding()
{
	stop-spin pad around y-axis;
}

QueryBuildInfo(piecenum)
{
	piecenum = pad;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type NOHEATCLOUD;
		explode door2b type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type NOHEATCLOUD;
		explode door1b type NOHEATCLOUD | SHATTER;
		explode body type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
		explode door2b type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
		return (corpsetype);
	}
	corpsetype = 3;
	explode base type NOHEATCLOUD;
	explode door3a type NOHEATCLOUD | SHATTER;
	explode body type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	explode pad type NOHEATCLOUD;
	return (corpsetype);
}
