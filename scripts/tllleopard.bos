#define TA
#include "sfxtype.h"
#include "exptype.h"



piece base, body, turret, sleeve, mainsleeve, barrel1a, barrel1b, flare, flare1, flare2,
	  flare3, flare4, flare5, flare6, flare7, flare8, flare9, flare10;


static-var  missile, restore_delay, onoff, waiting, high, low;					
static-var  statechg_DesiredState, statechg_StateChanging;

// Signal definitions:
#define SIG_AIM 		2
#define SIG_AIM_2 		4
#define SIG_AIM_3 		8
#define SIG_ACTIVATE	16

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

/*
Activate()
{
	signal SIG_ACTIVATE;
	set-signal-mask SIG_ACTIVATE;
	set-signal-mask 0;
	onoff = 1;
	waiting = 1;
	sleep 100;
	turn mainsleeve to x-axis <-80.000000> speed <25.000000>;
	wait-for-turn mainsleeve around x-axis;
	sleep 100;
	waiting = 0;	
}

Deactivate()
{
	signal SIG_ACTIVATE;
	set-signal-mask SIG_ACTIVATE;
	set-signal-mask 0;
	onoff = 0;
	waiting = 1;
	sleep 100;
	turn mainsleeve to x-axis <0.000000> speed <25.000000>;
	wait-for-turn mainsleeve around x-axis;
	sleep 100;
	waiting = 0;
	
}
*/
activatescr()
{
	if( TRUE )
	{
		turn mainsleeve to x-axis <-75.000000> speed <25.000000>;
		wait-for-turn mainsleeve around x-axis;
		sleep 150;
	}
	
	return (0);
}

deactivatescr()
{
	if( TRUE )
	{
		turn mainsleeve to x-axis <0.000000> speed <25.000000>;
		wait-for-turn mainsleeve around x-axis;
		sleep 150;		
	}
}

Go()
{
	call-script activatescr();
	waiting = 1;	
}

Stop()
{
	waiting = 0;
	call-script deactivatescr();
}


InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}


Create()
{
	missile = 0;
	waiting = 0;
	onoff = 0;
	waiting = 0;
	restore_delay = 5000;
	
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 1000;
	}
	
	call-script InitState();
	start-script RequestState(0);
	start-script SmokeUnit();
}

RestoreAfterDelay2()
{
	sleep restore_delay;
	set-signal-mask 0;
	turn turret to y-axis <0.000000> speed <45.000000>;
	turn sleeve to x-axis <0.000000> speed <15.000000>;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	return (1);
}

FirePrimary()
{
	emit-sfx 1024 + 0 from flare;
	move barrel1b to z-axis [-2.000000] speed [500.000000];
	sleep 250;
	move barrel1b to z-axis [0.000000] speed [1.000000];
}

AimFromPrimary(piecenum)
{
	piecenum = body;
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}

AimTertiary(heading, pitch)
{
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;
	
	turn turret to y-axis heading speed <60.000000>;
	wait-for-turn turret around y-axis;
	turn sleeve to x-axis <0.000000> - pitch speed <30.000000>;
	wait-for-turn sleeve around x-axis;
	start-script RestoreAfterDelay2();
	return (1);
}

Shot3()
{
	++missile;
	if( missile == 10 )
	{
		missile = 0;
	}
}

QueryTertiary(piecenum)
{
	if( missile == 0 )
	{
		piecenum = flare1;
	}
	if( missile == 1 )
	{
		piecenum = flare2;
	}
	if( missile == 2 )
	{
		piecenum = flare3;
	}
	if( missile == 3 )
	{
		piecenum = flare4;
	}
	if( missile == 4 )
	{
		piecenum = flare5;
	}
	if( missile == 5 )
	{
		piecenum = flare6;
	}
	if( missile == 6 )
	{
		piecenum = flare7;
	}
	if( missile == 7 )
	{
		piecenum = flare8;
	}
	if( missile == 8 )
	{
		piecenum = flare9;
	}
	if( missile == 9 )
	{
		piecenum = flare10;
	}
}

AimFromTertiary(piecenum)
{
	piecenum = turret;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode body type NOHEATCLOUD;
		explode sleeve type NOHEATCLOUD;
		explode base type NOHEATCLOUD;
		explode turret type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode body type FALL | NOHEATCLOUD;
		explode sleeve type FALL | NOHEATCLOUD;
		explode base type NOHEATCLOUD;
		explode turret type FALL | NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode body type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
		explode sleeve type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
		explode base type NOHEATCLOUD;
		explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
		return (corpsetype);
	}
	corpsetype = 3;
	explode body type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode sleeve type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode base type NOHEATCLOUD;
	explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	return (corpsetype);
}



