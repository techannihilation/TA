#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, ground, turret1, canon1, barrel1, flare1, turret2, flare2,
       torpille, tube1, tube2;

static-var  Static_Var_1, torpedo;

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_2			4
#define SIG_AIM_3			8


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

HitByWeapon(anglex, anglez)
{
	turn base to z-axis anglez speed <105.000000>;
	turn base to x-axis anglex speed <105.000000>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <30.000000>;
	turn base to x-axis <0.000000> speed <30.000000>;
}

RockUnit(anglex, anglez)
{
	turn base to x-axis anglex speed <50.000000>;
	turn base to z-axis anglez speed <50.000000>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <20.000000>;
	turn base to x-axis <0.000000> speed <20.000000>;
}

Create()
{
	torpedo = 0;
	start-script SmokeUnit();
}

RestoreAfterDelay1()
{
	sleep 3000;
	turn turret1 to y-axis <0.000000> speed <35.000000>;
	turn canon1 to x-axis <0.000000> speed <15.000000>;
}

RestoreAfterDelay2()
{
	sleep 3000;
	turn turret2 to y-axis <0.000000> speed <35.000000>;
	turn turret2 to x-axis <0.000000> speed <15.000000>;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret1 to y-axis heading speed <50.000000>;
	turn canon1 to x-axis <0.000000> - pitch speed <25.000000>;
	wait-for-turn turret1 around y-axis;
	wait-for-turn canon1 around x-axis;
	start-script RestoreAfterDelay1();
	return (1);
}

AimSecondary(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	turn turret2 to y-axis heading speed <150.000000>;
	turn turret2 to x-axis <0.000000> - pitch speed <50.000000>;
	wait-for-turn turret2 around y-axis;
	wait-for-turn turret2 around x-axis;
	start-script RestoreAfterDelay2();
	return (1);
}

AimTertiary(heading, pitch)
{
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;
	return (1);
}

FirePrimary()
{
	show flare1;
	move barrel1 to z-axis [-3.000000] now;
	sleep 150;
	hide flare1;
	wait-for-move barrel1 along z-axis;
	move barrel1 to z-axis [0.000000] speed [6.000000];
}

FireSecondary()
{
	emit-sfx 1024 + 0 from flare2;
	sleep 150;
}

FireTertiary()
{
	++torpedo;
	if (torpedo == 2)
	{
		torpedo = 0;
	}
}

QueryPrimary(piecenum)
{
	piecenum = flare1;
}

AimFromPrimary(piecenum)
{
	piecenum = turret1;
}

QuerySecondary(piecenum)
{
	piecenum = flare2;
}

AimFromSecondary(piecenum)
{
	piecenum = turret2;
}

QueryTertiary(piecenum)
{
	if (torpedo == 0)
	{
		piecenum = tube1;
	}
	if (torpedo == 1)
	{
		piecenum = tube2;
	}
}

AimFromTertiary(piecenum)
{
	piecenum = torpille;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide flare1;
	hide flare2;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type NOHEATCLOUD;
		explode ground type NOHEATCLOUD;
		explode turret1 type NOHEATCLOUD;
		explode canon1 type NOHEATCLOUD;
		explode barrel1 type NOHEATCLOUD;
		explode flare1 type NOHEATCLOUD;
		explode turret2 type NOHEATCLOUD;
		explode flare2 type NOHEATCLOUD;
		explode torpille type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type NOHEATCLOUD;
		explode ground type NOHEATCLOUD | SHATTER;
		explode turret1 type NOHEATCLOUD | SHATTER;
		explode canon1 type NOHEATCLOUD | FALL;
		explode barrel1 type NOHEATCLOUD | FALL;
		explode flare1 type NOHEATCLOUD;
		explode turret2 type NOHEATCLOUD | FALL;
		explode flare2 type NOHEATCLOUD;
		explode torpille type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type NOHEATCLOUD;
		explode ground type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
		explode turret1 type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
		explode canon1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode barrel1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode flare1 type NOHEATCLOUD;
		explode turret2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode flare2 type NOHEATCLOUD;
		explode torpille type NOHEATCLOUD;
		return (corpsetype);
	}
	corpsetype = 3;
	explode base type NOHEATCLOUD;
	explode ground type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	explode turret1 type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	explode canon1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode barrel1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode flare1 type NOHEATCLOUD;
	explode turret2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode flare2 type NOHEATCLOUD;
	explode torpille type NOHEATCLOUD;
	return (corpsetype);
}
