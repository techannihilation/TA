#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, turret, barrel, flare, smoky1, smoky2;

static-var  Static_Var_1;

// Signal definitions
#define SIG_AIM				2


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	start-script SmokeUnit();
}

RestoreAfterDelay()
{
	set-signal-mask SIG_AIM;
	sleep 10000;
	turn turret to y-axis <0.000000> speed <20.000000>;
}

BelchSmoke()
{
	emit-sfx 256 | 1 from smoky1;
	emit-sfx 256 | 2 from smoky2;
	sleep 230;
	emit-sfx 256 | 1 from smoky2;
	emit-sfx 256 | 2 from smoky1;
	sleep 115;
	emit-sfx 256 | 1 from smoky1;
	sleep 115;
	emit-sfx 256 | 1 from smoky1;
	emit-sfx 256 | 2 from smoky2;
	sleep 230;
	emit-sfx 256 | 1 from smoky2;
	emit-sfx 256 | 2 from smoky1;
	sleep 230;
	emit-sfx 256 | 2 from smoky1;
	emit-sfx 256 | 2 from smoky2;
	sleep 230;
	emit-sfx 256 | 1 from smoky2;
	emit-sfx 256 | 2 from smoky1;
	sleep 115;
	emit-sfx 256 | 2 from smoky1;
	sleep 115;
	emit-sfx 256 | 1 from smoky1;
	emit-sfx 256 | 1 from smoky2;
	sleep 230;
	emit-sfx 256 | 1 from smoky2;
	emit-sfx 256 | 2 from smoky1;
	emit-sfx 256 | 2 from smoky2;
	sleep 230;
	emit-sfx 256 | 2 from smoky1;
	emit-sfx 256 | 1 from smoky2;
	sleep 170;
	emit-sfx 256 | 1 from smoky2;
	sleep 60;
	emit-sfx 256 | 1 from smoky1;
	sleep 230;
	emit-sfx 256 | 1 from smoky1;
	emit-sfx 256 | 2 from smoky2;
	sleep 230;
	emit-sfx 256 | 1 from smoky2;
	emit-sfx 256 | 2 from smoky1;
	sleep 115;
	emit-sfx 256 | 1 from smoky1;
	sleep 115;
	emit-sfx 256 | 1 from smoky1;
	emit-sfx 256 | 2 from smoky2;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <25.000000>;
	wait-for-turn turret around y-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	move barrel to z-axis [-3.000000] speed [500.000000];
	emit-sfx 1024 + 0 from flare;
	sleep 50;
	move barrel to z-axis [0.000000] speed [1.250000];
	start-script BelchSmoke();
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type NOHEATCLOUD;
		explode turret type NOHEATCLOUD;
		explode barrel type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type NOHEATCLOUD | SHATTER;
		explode turret type NOHEATCLOUD | SHATTER;
		explode barrel type NOHEATCLOUD | SHATTER;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode turret type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode barrel type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		return (corpsetype);
	}
	corpsetype = 3;
	explode base type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode turret type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode barrel type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode flare type NOHEATCLOUD;
	explode smoky1 type NOHEATCLOUD;
	explode smoky2 type NOHEATCLOUD;
	return (corpsetype);
}
