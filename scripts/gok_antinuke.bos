#define TA          // This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, ceil, pillar, silo, core, circle, shelter, udoor,
       ddoor, ldoor, rdoor, rocket1, decor, decor1, decor2, decor3, decor4;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4, Static_Var_5,
            Static_Var_6;

SmokeUnit(healthpercent, sleeptime, smoketype)
{
    while( get BUILD_PERCENT_LEFT )
    {
        sleep 400;
    }
    spin silo around y-axis speed <2.0>;
    while( TRUE )
    {
        healthpercent = get HEALTH;
        if( healthpercent < 66 )
        {
            smoketype = 256 | 2;
            if( Rand( 1, 66 ) < healthpercent )
            {
                smoketype = 256 | 1;
            }
            emit-sfx smoketype from ceil;
        }
        sleeptime = healthpercent * 50;
        if( sleeptime < 200 )
        {
            sleeptime = 200;
        }
        sleep sleeptime;
    }
}

RequestState(requestedstate)
{
    if( Static_Var_4 )
    {
        return;
    }
    Static_Var_4 = 1;
    if( requestedstate == 0 )
    {
        show rocket1;
        move silo to y-axis [0.0] speed [20.0];
        spin silo around y-axis speed <0>;
        wait-for-move silo along y-axis;            
        turn udoor to x-axis <-90.> speed <250.>;
        turn ddoor to x-axis <90.> speed <250.>;
        turn ldoor to z-axis <90.> speed <250.>;
        turn rdoor to z-axis <-90.> speed <250.>;
        wait-for-turn udoor around x-axis;
        wait-for-turn ddoor around x-axis;
        wait-for-turn ldoor around z-axis;
        wait-for-turn rdoor around z-axis;
        Static_Var_1 = 1;
    }
    else
    {
        Static_Var_1 = 0;
        turn udoor to x-axis <0.> speed <45.>;
        turn ddoor to x-axis <0.> speed <45.>;
        turn ldoor to z-axis <0.> speed <45.>;
        turn rdoor to z-axis <0.> speed <45.>;
        wait-for-turn udoor around x-axis;
        wait-for-turn ddoor around x-axis;
        wait-for-turn ldoor around z-axis;
        wait-for-turn rdoor around z-axis;
        move silo to y-axis [-10.0] speed [1.0];
        wait-for-move silo along y-axis;
        spin silo around y-axis speed <1.5>;
    }
    Static_Var_4 = 0;
}

Create()
{
    Static_Var_1 = 0;
    Static_Var_2 = 12;
    Static_Var_3 = 1;
    Static_Var_4 = 0;
    move silo to y-axis [-10.0] now;
    start-script SmokeUnit();
}

Activate()
{
    start-script RequestState(0);
}

Deactivate()
{
    start-script RequestState(1);
}

RestoreAfterDelay()
{
    sleep 2500;
    set-signal-mask 0;
    call-script RequestState(1);
}

AimPrimary(heading, pitch)
{
    start-script RequestState(0);
    sleep 10;
    signal 2;
    set-signal-mask 2;
    start-script RestoreAfterDelay();
    return (1);
}

FirePrimary()
{
    hide rocket1;
    sleep 50;
}

QueryPrimary(piecenum)
{
    piecenum = rocket1;
}

AimFromPrimary(piecenum)
{
    piecenum = silo;
}

SweetSpot(piecenum)
{
    piecenum = base;
}

Killed(severity, corpsetype)
{
    explode decor1 type SHATTER | NOHEATCLOUD;
    explode decor2 type SHATTER | NOHEATCLOUD;
    explode decor3 type SHATTER | NOHEATCLOUD;
    explode decor4 type SHATTER | NOHEATCLOUD;
    if( severity <= 25 )
    {
        corpsetype = 1;
        explode base type NOHEATCLOUD | SHATTER;
        explode udoor type NOHEATCLOUD | SHATTER;
        explode ddoor type NOHEATCLOUD | SHATTER;
        explode ldoor type NOHEATCLOUD | SHATTER;
        explode rdoor type FALL | EXPLODE_ON_HIT | NOHEATCLOUD;
        return (corpsetype);
    }
    if( severity <= 50 )
    {
        corpsetype = 2;
        explode base type SHATTER | NOHEATCLOUD;    
        explode udoor type SHATTER | NOHEATCLOUD;
        explode ddoor type SHATTER | NOHEATCLOUD;
        explode ldoor type FALL | EXPLODE_ON_HIT | NOHEATCLOUD;
        explode rdoor type FALL | EXPLODE_ON_HIT | NOHEATCLOUD;
        return (corpsetype);
    }
    corpsetype = 3;
    explode base type SHATTER | EXPLODE_ON_HIT | NOHEATCLOUD;
    explode udoor type FALL | EXPLODE_ON_HIT | NOHEATCLOUD;
    explode ddoor type FALL | EXPLODE_ON_HIT | NOHEATCLOUD;
    explode ldoor type FALL | EXPLODE_ON_HIT | NOHEATCLOUD;
    explode rdoor type FALL | EXPLODE_ON_HIT | NOHEATCLOUD;
    return (corpsetype);
}
