#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, socle1, socle2, gate1, gate2, gate3, gate4,
		flare1a, turret1a, sleeves1a, gun1a,
		flare2a, turret2a, sleeves2a, gun2a,
		flare1b, turret1b, sleeves1b, gun1b,
		flare2b, turret2b, sleeves2b, gun2b;

static-var  statechg_DesiredState, statechg_StateChanging, cstate,
			sleeves_1a, sleeves_2a, sleeves_1b, sleeves_2b, restore_delay;

// Signal definitions
#define SIG_ACTIVATE			2
#define SIG_AIM_1				4
#define SIG_AIM_2				8
#define SIG_AIM_3				16
#define SIG_AIM_4				32

activatescr()
{
	move gate1 to x-axis [56] speed [20.0];
	move gate2 to x-axis [-56] speed [20.0];
	move gate3 to x-axis [56] speed [20.0];
	move gate4 to x-axis [-56] speed [20.0];
	sleep 2000;
}

deactivatescr()
{
	move gate1 to x-axis [0] speed [20.0];
	move gate2 to x-axis [0] speed [20.0];
	move gate3 to x-axis [0] speed [20.0];
	move gate4 to x-axis [0] speed [20.0];
	sleep 2000;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 258;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 257;
			}
			emit-sfx smoketype from socle1;
			emit-sfx smoketype from socle2;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

OpenYard()
{
	set YARD_OPEN to 1;
	while( !get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 1;
	}
	set BUGGER_OFF to 0;
}

CloseYard()
{
	set YARD_OPEN to 0;
	while( get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 0;
	}
	set BUGGER_OFF to 0;
}

Go()
{

	call-script activatescr();
	call-script OpenYard();
}

Stop()
{
	call-script CloseYard();
	call-script deactivatescr();
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != cstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			cstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			cstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	cstate = 1;
	set ARMORED to 1;
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	sleeves_1a = 1;
	sleeves_1b = 1;
	sleeves_2a = 1;
	sleeves_2b = 1;
	restore_delay = 1000;
	start-script SmokeUnit();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

RestoreAfterDelay1a()
{
	sleep 500;
	spin gun1a around z-axis speed <500.0> accelerate <-100.0>;
	sleep 350;
	spin gun1a around z-axis speed <350.0> accelerate <-75.0>;
	sleep 250;
	spin gun1a around z-axis speed <100.0> accelerate <-50.0>;
	sleep 200;
	spin gun1a around z-axis speed <0.0> accelerate <-25.0>;	
}
RestoreAfterDelay2a()
{
	sleep 500;
	spin gun2a around z-axis speed <500.0> accelerate <-100.0>;
	sleep 350;
	spin gun2a around z-axis speed <350.0> accelerate <-75.0>;
	sleep 250;
	spin gun2a around z-axis speed <100.0> accelerate <-50.0>;
	sleep 200;
	spin gun2a around z-axis speed <0.0> accelerate <-25.0>;	
}
RestoreAfterDelay1b()
{
	sleep 500;
	spin gun1b around z-axis speed <500.0> accelerate <-100.0>;
	sleep 350;
	spin gun1b around z-axis speed <350.0> accelerate <-75.0>;
	sleep 250;
	spin gun1b around z-axis speed <100.0> accelerate <-50.0>;
	sleep 200;
	spin gun1b around z-axis speed <0.0> accelerate <-25.0>;	
}
RestoreAfterDelay2b()
{
	sleep 500;
	spin gun2b around z-axis speed <500.0> accelerate <-100.0>;
	sleep 350;
	spin gun2b around z-axis speed <350.0> accelerate <-75.0>;
	sleep 250;
	spin gun2b around z-axis speed <100.0> accelerate <-50.0>;
	sleep 200;
	spin gun2b around z-axis speed <0.0> accelerate <-25.0>;	
}

AimWeapon1(heading, pitch)
{
	signal SIG_AIM_1;
	set-signal-mask SIG_AIM_1;
	turn turret1a to y-axis heading speed <90.0>;
	turn sleeves1a to x-axis <0.000000> - pitch speed <90.0>;
	wait-for-turn turret1a around y-axis;
	wait-for-turn sleeves1a around x-axis;
	start-script RestoreAfterDelay1a();
	return (1);
}

QueryWeapon1(piecenum)
{
	piecenum = flare1a;
}

AimFromWeapon1(piecenum)
{
	piecenum = sleeves1a;
}

FireWeapon1()
{
	spin gun1a around z-axis speed <750.0>;
}


AimWeapon2(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	turn turret2a to y-axis heading speed <90.0>;
	turn sleeves2a to x-axis <0.000000> - pitch speed <90.0>;
	wait-for-turn turret2a around y-axis;
	wait-for-turn sleeves2a around x-axis;
	start-script RestoreAfterDelay2a();
	return (1);
}

QueryWeapon2(piecenum)
{
	piecenum = flare2a;
}

AimFromWeapon2(piecenum)
{
	piecenum = sleeves2a;
}

FireWeapon2()
{
	spin gun2a around z-axis speed <750.0>;
}


AimWeapon3(heading, pitch)
{
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;
	turn turret1b to y-axis heading speed <90.0>;
	turn sleeves1b to x-axis <0.000000> - pitch speed <90.0>;
	wait-for-turn turret1b around y-axis;
	wait-for-turn sleeves1b around x-axis;
	start-script RestoreAfterDelay1b();
	return (1);
}

QueryWeapon3(piecenum)
{
	piecenum = flare1b;
}

AimFromWeapon3(piecenum)
{
	piecenum = sleeves1b;
}

FireWeapon3()
{
	spin gun1b around z-axis speed <750.0>;
}


AimWeapon4(heading, pitch)
{
	signal SIG_AIM_4;
	set-signal-mask SIG_AIM_4;
	turn turret2b to y-axis heading speed <90.0>;
	turn sleeves2b to x-axis <0.000000> - pitch speed <90.0>;
	wait-for-turn turret2b around y-axis;
	wait-for-turn sleeves2b around x-axis;
	start-script RestoreAfterDelay2b();
	return (1);
}

QueryWeapon4(piecenum)
{
	piecenum = flare2b;
}

AimFromWeapon4(piecenum)
{
	piecenum = sleeves2b;
}

FireWeapon4()
{
	spin gun2b around z-axis speed <750.0>;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
		corpsetype = 1;
		explode socle2 type NOHEATCLOUD;
		explode socle1 type NOHEATCLOUD;
		explode gate1 type NOHEATCLOUD;
		explode gate2 type NOHEATCLOUD;
		explode turret1a type NOHEATCLOUD;
		explode turret2a type NOHEATCLOUD;
		explode turret2b type NOHEATCLOUD;
		explode turret1b type NOHEATCLOUD;
		return (corpsetype);
}
