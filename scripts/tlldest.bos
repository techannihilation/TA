#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, turret1,  barrel1, flare1, barrel3, flare3, 
	   barrel4, flare4, turret2, missiles, mis1, mis2,
       mis3, mis4, mis5, mis6, mis7, mis8, wake1, wake2, turret3, sleeva,
       barrel5, barrel6, flarea, flareb, sleeve2,
       turretaa1, sleeveaa1, barrelaa1, barrelaa2, flareaa2,  flareaa1,
       turretaa2, sleeveaa2, barrelaa3, barrelaa4, flareaa3,  flareaa4;
       
       
static-var  restore_delay, gun_1, gun_2, gun_3, gun_4, gun_5, gun_6;

// Signal definitions
#define SIG_MOVE			2
#define SIG_AIM				4
#define SIG_AIM_2			8
#define SIG_AIM_3			16
#define SIG_AIM_4			32
#define SIG_AIM_5			64
#define SIG_AIM_6			128

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	var Func_Var_4;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			Func_Var_4 = Rand( 1, 3 );
			if( Func_Var_4 == 1 )
			{
				emit-sfx smoketype from base;
			}
			if( Func_Var_4 == 2 )
			{
				emit-sfx smoketype from turret1;
			}
			if( Func_Var_4 == 3 )
			{
				emit-sfx smoketype from turret2;
			}
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

RestoreAfterDelay()
{
	sleep restore_delay;
	turn turret3 to y-axis <0.000000> speed <35.000000>;
	turn sleeva to x-axis <0.000000> speed <15.000000>;
}

RestoreAfterDelay2()
{
	sleep restore_delay;
	turn turret2 to y-axis <0.000000> speed <55.000000>;
	turn sleeve2 to x-axis <0.000000> speed <25.000000>;
}

RestoreAfterDelay4()
{
	sleep restore_delay;
	turn turretaa1 to y-axis <0.000000> speed <60.000000>;
	turn sleeveaa1 to x-axis <-90.000000> speed <75.000000>;
}

RestoreAfterDelay5()
{
	sleep restore_delay;
	turn turretaa2 to y-axis <0.000000> speed <60.000000>;
	turn sleeveaa2 to x-axis <-90.000000> speed <75.000000>;
}

RestoreAfterDelay6()
{
	sleep restore_delay;
	turn turret1 to y-axis <0.000000> speed <20.000000>;
}


Create()
{
	restore_delay = 8000;
	gun_1 = 0;
	gun_2 = 0;
	gun_3 = 0;
	gun_4 = 0;
	gun_5 = 0;
	gun_6 = 0;
	hide flare1;
	hide flare3;
	hide flare4;
	hide flarea;
	hide flareb;
	hide flareaa1;
	hide flareaa2;
	hide flareaa3;
	hide flareaa4;
	start-script SmokeUnit();
}

RestoreAfterDelay1()
{
	sleep restore_delay;
	turn turret1 to y-axis <0.000000> speed <55.000000>;
	//turn sleeve1 to x-axis <0.000000> speed <25.000000>;
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 5;
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		emit-sfx 2 from wake2;
		emit-sfx 2 from wake1;
		sleep 200;
	}
}

StopMoving()
{
	signal SIG_MOVE;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret3 to y-axis heading speed <30.000000>;
	turn sleeva to x-axis <0.000000> - pitch speed <15.000000>;
	wait-for-turn turret3 around y-axis;
	wait-for-turn sleeva around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	if( gun_1 == 0 )
	{
		move barrel5 to z-axis [-1.000000] speed [500.000000];
		emit-sfx 1024 + 1 from flareb;
		sleep 150;
		move barrel5 to z-axis [0.000000] speed [3.000000];
		gun_1 = 1;
		return (0);
	}
	if( gun_1 == 1 )
	{
		move barrel6 to z-axis [-1.000000] speed [500.000000];
		emit-sfx 1024 + 1 from flarea;
		sleep 150;
		move barrel6 to z-axis [0.000000] speed [3.000000];
		gun_1 = 0;
		return (0);
	}
}

AimFromPrimary(piecenum)
{
	piecenum = turret3;
}

QueryPrimary(piecenum)
{
	if( gun_1 == 0 )
	{
		piecenum = flareb;
	}
	if( gun_1 == 1 )
	{
		piecenum = flarea;
	}
}

AimSecondary(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	turn turret1 to y-axis heading speed <50.000000>;
	wait-for-turn turret1 around y-axis;
	start-script RestoreAfterDelay6();
	return (1);
}

FireSecondary()
{
	emit-sfx 1024 + 0 from flare1;
}

AimFromSecondary(piecenum)
{
	piecenum = turret1;
}

QuerySecondary(piecenum)
{
	piecenum = flare1;
}


AimFromTertiary(piecenum)
{
	piecenum = missiles;
}

AimTertiary(heading, pitch)
{
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;
	return (1);
}

FireTertiary()
{
	if( gun_3 == 9 )
	{
		gun_3 = turret1;
	}
	++gun_3;
}

QueryTertiary(piecenum)
{
	if( gun_3 == 1 )
	{
		piecenum = mis1;
	}
	if( gun_3 == 2 )
	{
		piecenum = mis2;
	}
	if( gun_3 == 3 )
	{
		piecenum = mis3;
	}
	if( gun_3 == 4 )
	{
		piecenum = mis4;
	}
	if( gun_3 == 5 )
	{
		piecenum = mis5;
	}
	if( gun_3 == 6 )
	{
		piecenum = mis6;
	}
	if( gun_3 == 7 )
	{
		piecenum = mis7;
	}
	if( gun_3 == 8 )
	{
		piecenum = mis8;
	}
	if( gun_3 == 9 )
	{
		piecenum = mis1;
	}
}

AimWeapon4(heading, pitch)
{
	signal SIG_AIM_4;
	set-signal-mask SIG_AIM_4;
	turn turret2 to y-axis heading speed <80.000000>;
	turn sleeve2 to x-axis <0.000000> - pitch speed <55.000000>;
	wait-for-turn turret2 around y-axis;
	wait-for-turn sleeve2 around x-axis;
	start-script RestoreAfterDelay2();
	return (1);
}

FireWeapon4()
{
	if( gun_4 == 0 )
	{
		move barrel3 to z-axis [-1.000000] speed [500.000000];
		emit-sfx 1024 + 1 from flare3;
		sleep 150;
		move barrel3 to z-axis [0.000000] speed [3.000000];
		gun_4 = 1;
		return (0);
	}
	if( gun_4 == 1 )
	{
		move barrel4 to z-axis [-1.000000] speed [500.000000];
		emit-sfx 1024 + 1 from flare4;
		sleep 150;
		move barrel4 to z-axis [0.000000] speed [3.000000];
		gun_4 = 0;
		return (0);
	}
}

AimFromWeapon4(piecenum)
{
	piecenum = turret2;
}

QueryWeapon4(piecenum)
{
	if( gun_4 == 0 )
	{
		piecenum = flare3;
	}
	if( gun_4 == 1 )
	{
		piecenum = flare4;
	}
}


AimWeapon5(heading, pitch)
{
	signal SIG_AIM_5;
	set-signal-mask SIG_AIM_5;
	turn turretaa1 to y-axis heading speed <300.000000>;
	turn sleeveaa1 to x-axis <0.000000> - pitch speed <150.000000>;
	wait-for-turn turretaa1 around y-axis;
	wait-for-turn sleeveaa1 around x-axis;
	start-script RestoreAfterDelay4();
	return (1);
}


FireWeapon5()
{
	if( gun_5 == 0 )
	{
		move barrelaa1 to z-axis [-1.000000] speed [500.000000];
		show flareaa1;
		sleep 200;
		hide flareaa1;
		move barrelaa1 to z-axis [0.000000] speed [5.000000];
		gun_5 = 0;
		return (0);
	}
	if( gun_5 == 1 )
	{
		move barrelaa2 to z-axis [-1.000000] speed [500.000000];
		show flareaa2;
		sleep 200;
		hide flareaa2;
		move barrelaa2 to z-axis [0.000000] speed [5.000000];
		gun_5 = 1;
		return (0);
	}
}


AimFromWeapon5(piecenum)
{
	piecenum = turretaa1;
}


QueryWeapon5(piecenum)
{
	if( gun_5 == 0 )
	{
		piecenum = flareaa1;
		return (0);
	}
	if( gun_5 == 1 )
	{
		piecenum = flareaa2;
		return (0);
	}
}

////////////////


AimWeapon6(heading, pitch)
{
	signal SIG_AIM_6;
	set-signal-mask SIG_AIM_6;
	turn turretaa2 to y-axis heading speed <300.000000>;
	turn sleeveaa2 to x-axis <0.000000> - pitch speed <150.000000>;
	wait-for-turn turretaa2 around y-axis;
	wait-for-turn sleeveaa2 around x-axis;
	start-script RestoreAfterDelay5();
	return (1);
}


FireWeapon6()
{
	if( gun_6 == 0 )
	{
		move barrelaa3 to z-axis [-1.000000] speed [500.000000];
		show flareaa3;
		sleep 200;
		hide flareaa3;
		move barrelaa3 to z-axis [0.000000] speed [5.000000];
		gun_6 = 1;
		return (0);
	}
	if( gun_6 == 1 )
	{
		move barrelaa4 to z-axis [-1.000000] speed [500.000000];
		show flareaa4;
		sleep 200;
		hide flareaa4;
		move barrelaa4 to z-axis [0.000000] speed [5.000000];
		gun_6 = 0;
		return (0);
	}
}


AimFromWeapon6(piecenum)
{
	piecenum = turretaa2;
}


QueryWeapon6(piecenum)
{
	if( gun_6 == 0 )
	{
		piecenum = flareaa3;
		return (0);
	}
	if( gun_6 == 1 )
	{
		piecenum = flareaa4;
		return (0);
	}
}

Killed(severity, corpsetype)
{
	hide flare1;
	hide flare3;
	hide flare4;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type NOHEATCLOUD |BITMAPONLY | BITMAP5;
		explode turret1 type NOHEATCLOUD |BITMAPONLY | BITMAP3;
		explode barrel1 type NOHEATCLOUD |FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		//explode barrel2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode barrel3 type NOHEATCLOUD |FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode barrel4 type NOHEATCLOUD |FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode turret2 type NOHEATCLOUD |BITMAPONLY | BITMAP3;
		//explode sleeves2 type NOHEATCLOUD | BITMAPONLY | BITMAP3;
		//explode barrel7 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		//explode barrel8 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		//explode barrel9 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		//explode barrel10 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type NOHEATCLOUD |SHATTER | BITMAP5;
		explode turret1 type NOHEATCLOUD |SHATTER | BITMAP4;
		explode barrel1 type NOHEATCLOUD |FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		//explode barrel2 type NOHEATCLOUD |FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode barrel3 type NOHEATCLOUD |FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode barrel4 type NOHEATCLOUD |FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode turret2 type NOHEATCLOUD |SHATTER | BITMAP4;
		//explode sleeves2 type NOHEATCLOUD | BITMAPONLY | BITMAP4;
		//explode barrel7 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		//explode barrel8 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		//explode barrel9 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		//explode barrel10 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode turret1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode barrel1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		//explode barrel2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode barrel3 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode barrel4 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode turret2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		//explode sleeves2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		//explode barrel7 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		//explode barrel8 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		//explode barrel9 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		//explode barrel10 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		return (corpsetype);
	}
	corpsetype = 3;
	explode base type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode turret1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode barrel1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	//explode barrel2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode barrel3 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode barrel4 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode turret2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	//explode sleeves2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	//explode barrel7 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	//explode barrel8 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	//explode barrel9 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	//explode barrel10 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	return (corpsetype);
}
