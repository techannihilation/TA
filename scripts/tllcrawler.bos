#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, turret, sleeve, barrel1, barrel2, flare1, flare2,
       flare3, flare4, flare5, missile1, missile2, missile3, leg1, leg2,
       leg3, leg4;

static-var  bMoving, gun_0, gun_1;

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_2			4
#define SIG_AIM_3			8


walkscr()
{
	while( bMoving )
	{
		if( bMoving )
		{
			turn leg1 to y-axis <40.000000> speed <30.000000>;
			turn leg1 to z-axis <10.000000> speed <30.000000>;
			turn leg2 to z-axis <10.000000> speed <30.000000>;
			turn leg3 to y-axis <-60.000000> speed <30.000000>;
			turn leg3 to z-axis <-10.000000> speed <30.000000>;
			turn leg4 to z-axis <10.000000> speed <30.000000>;
			turn leg4 to y-axis <0.000000> speed <30.000000>;
			turn body to x-axis <1.000000> speed <10.000000>;
			turn body to z-axis <1.000000> speed <10.000000>;
			sleep 300;
		}
		if( bMoving )
		{
			turn leg1 to z-axis <0.000000> speed <30.000000>;
			turn leg2 to y-axis <90.000000> speed <30.000000>;
			turn leg2 to z-axis <10.000000> speed <30.000000>;
			turn leg3 to y-axis <0.000000> speed <30.000000>;
			turn leg3 to z-axis <0.000000> speed <30.000000>;
			turn leg4 to y-axis <35.000000> speed <40.000000>;
			turn leg4 to z-axis <0.000000> speed <30.000000>;
			turn body to x-axis <0.000000> speed <10.000000>;
			turn body to y-axis <1.000000> speed <10.000000>;
			sleep 300;
		}
		if( bMoving )
		{
			turn leg1 to y-axis <0.000000> speed <30.000000>;
			turn leg1 to z-axis <10.000000> speed <30.000000>;
			turn leg2 to y-axis <0.000000> speed <30.000000>;
			turn leg2 to z-axis <0.000000> speed <30.000000>;
			turn leg3 to y-axis <0.000000> speed <30.000000>;
			turn leg3 to z-axis <-10.000000> speed <30.000000>;
			turn leg4 to y-axis <-35.000000> speed <30.000000>;
			turn leg4 to z-axis <10.000000> speed <30.000000>;
			turn body to x-axis <-1.000000> speed <10.000000>;
			turn body to z-axis <-1.000000> speed <10.000000>;
			sleep 300;
		}
		turn leg1 to y-axis <-10.000000> speed <30.000000>;
		turn leg1 to z-axis <0.000000> speed <30.000000>;
		turn leg2 to y-axis <-60.000000> speed <30.000000>;
		turn leg2 to z-axis <0.000000> speed <30.000000>;
		turn leg3 to y-axis <-60.000000> speed <30.000000>;
		turn leg3 to z-axis <-11.000000> speed <30.000000>;
		turn leg4 to y-axis <-70.000000> speed <30.000000>;
		turn leg4 to z-axis <0.000000> speed <30.000000>;
		turn body to x-axis <0.000000> speed <10.000000>;
		turn body to y-axis <-1.000000> speed <10.000000>;
		sleep 300;
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

MotionControl(Func_Var_1)
{
	while( TRUE )
	{
		Func_Var_1 = bMoving;
		if( Func_Var_1 )
		{
			call-script walkscr();
		}
		if( !Func_Var_1 )
		{
			sleep 100;
			turn leg1 to y-axis <0.000000> speed <35.000000>;
			turn leg1 to z-axis <0.000000> speed <25.000000>;
			turn leg2 to y-axis <0.000000> speed <35.000000>;
			turn leg2 to z-axis <0.000000> speed <25.000000>;
			turn leg3 to y-axis <0.000000> speed <35.000000>;
			turn leg3 to z-axis <0.000000> speed <25.000000>;
			turn leg4 to y-axis <0.000000> speed <35.000000>;
			turn leg4 to z-axis <0.000000> speed <25.000000>;
			sleep 100;
		}
	}
}

Create()
{
	dont-cache turret;
	gun_1 = 0;
	gun_0 = 0;
	bMoving = FALSE;
	start-script MotionControl();
	start-script SmokeUnit();
}

StartMoving()
{
	bMoving = TRUE;
}

StopMoving()
{
	bMoving = FALSE;
}

RestoreAfterDelay()
{
	sleep 4000;
	turn turret to y-axis <0.000000> speed <70.000000>;
	turn sleeve to x-axis <0.000000> speed <50.000000>;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <70.000000>;
	turn sleeve to x-axis <0.000000> - pitch speed <50.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeve around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	
	if(gun_0 == 0) 
	{
		move barrel1 to z-axis [-1.000000] now;
		sleep 150;
		move barrel1 to z-axis [0.000000] speed [3.000000];
		wait-for-turn sleeve around z-axis;
	}
	if(gun_0 == 1) 
	{
		move barrel2 to z-axis [-1.000000] now;
		sleep 150;
		move barrel2 to z-axis [0.000000] speed [3.000000];
		wait-for-turn sleeve around z-axis;
	}	
	++gun_0;
	if(gun_0 == 2) 
	{
		gun_0 = 0;
	}
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

QueryPrimary(piecenum)
{
	if(gun_0 == 0) 
	{
		piecenum = flare1;
	}
	if(gun_0 == 1) 
	{
		piecenum = flare2;
	}
	

}

AimTertiary(heading, pitch)
{
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;
	return (1);
}

AimFromTertiary(piecenum)
{
	piecenum = turret;
}

FireTertiary()
{
	++gun_1;
	if(gun_1 == 3) 
	{
		gun_1 = 0;
	}
	
}

QueryTertiary(piecenum)
{
	if(gun_1 == 0) 
	{
		piecenum = flare3;
	}
	if(gun_1 == 1) 
	{
		piecenum = flare4;
	}
	if(gun_1 == 2) 
	{
		piecenum = flare5;
	}
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide flare1;
	hide flare2;
	hide flare3;
	hide flare4;
	hide flare5;

	if( severity <= 25 )
	{
		corpsetype = 1;
		explode body type NOHEATCLOUD;
		explode turret type NOHEATCLOUD;
		explode sleeve type NOHEATCLOUD;
		explode barrel1 type NOHEATCLOUD;
		explode barrel2 type NOHEATCLOUD;
		explode leg1 type NOHEATCLOUD;
		explode leg3 type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode body type NOHEATCLOUD;
		explode turret type NOHEATCLOUD | FALL;
		explode sleeve type NOHEATCLOUD | FALL;
		explode barrel1 type NOHEATCLOUD | FALL;
		explode barrel2 type NOHEATCLOUD | FALL;
		explode leg1 type NOHEATCLOUD | FALL;
		explode leg3 type NOHEATCLOUD | FALL;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode body type NOHEATCLOUD;
		explode turret type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode sleeve type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode barrel1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode barrel2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode leg1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode leg3 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		return (corpsetype);
	}
	corpsetype = 3;
	explode body type NOHEATCLOUD;
	explode turret type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode sleeve type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode barrel1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode barrel2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode leg1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode leg3 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	return (corpsetype);
}
