#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, turret, sides, leg1, leg2, leg3, leg4, leg5, leg6,
       rocketaim, rocketfire1, rocketfire2, rocketfire3, rocketfire4, 
       flare1, flare2, flare3, flare4;

static-var  bMoving, bAiming, gun_1, msl_1, restore_delay, speed_legs;

// Signal definitions
#define SIG_AIM_1		2
#define SIG_AIM_2		4
#define SIG_MOVE		8

walk() 
{
	
	while( bMoving )
	{
	
	if( bMoving )
	{
		turn leg1 to y-axis <43.005495> speed <1.0> * speed_legs;
		turn leg1 to y-axis <0.000000> speed <1.0> * speed_legs;
		turn leg1 to z-axis <0.000000> speed <1.0> * speed_legs;
		turn leg1 to z-axis <0.000000> speed <1.0> * speed_legs;
		turn leg2 to z-axis <0.000000> speed <1.0> * speed_legs;
		turn leg2 to z-axis <31.005495> speed <1.0> * speed_legs;
		turn leg3 to y-axis <34.005495> speed <1.0> * speed_legs;
		turn leg3 to y-axis <34.005495> speed <1.0> * speed_legs;
		turn leg3 to z-axis <31.005495> speed <1.0> * speed_legs;
		turn leg3 to z-axis <0.000000> speed <1.0> * speed_legs;
		turn leg4 to y-axis <-40.005495> speed <1.0> * speed_legs;
		turn leg4 to y-axis <-40.005495> speed <1.0> * speed_legs;
		turn leg4 to z-axis <-31.005495> speed <1.0> * speed_legs;
		turn leg4 to z-axis <0.000000> speed <1.0> * speed_legs;
		turn leg5 to y-axis <-37.005495> speed <1.0> * speed_legs;
		turn leg5 to y-axis <0.000000> speed <1.0> * speed_legs;
		turn leg5 to z-axis <0.000000> speed <1.0> * speed_legs;
		turn leg5 to z-axis <0.000000> speed <1.0> * speed_legs;
		turn leg6 to y-axis <0.000000> speed <1.0> * speed_legs;
		turn leg6 to y-axis <-30.005495> speed <1.0> * speed_legs;
		turn leg6 to z-axis <-45.005495> speed <1.0> * speed_legs;
		sleep 200;
	}
	if( bMoving )
	{
		turn leg1 to z-axis <31.005495> speed <1.0> * speed_legs;
		turn leg2 to y-axis <34.005495> speed <1.0> * speed_legs;
		turn leg2 to z-axis <31.005495> speed <1.0> * speed_legs;
		turn leg3 to y-axis <0.000000> speed <1.0> * speed_legs;
		turn leg3 to z-axis <0.000000> speed <1.0> * speed_legs;
		turn leg4 to y-axis <0.000000> speed <1.0> * speed_legs;
		turn leg5 to z-axis <-31.005495> speed <1.0> * speed_legs;
		turn leg6 to z-axis <2.000000> speed <1.0> * speed_legs;
		sleep 200;
	}
	if( bMoving )
	{
		turn leg1 to y-axis <55.005495> speed <1.0> * speed_legs;
		turn leg1 to z-axis <31.005495> speed <1.0> * speed_legs;
		turn leg2 to y-axis <34.005495> speed <1.0> * speed_legs;
		turn leg2 to z-axis <0.000000> speed <1.0> * speed_legs;
		turn leg3 to z-axis <31.005495> speed <1.0> * speed_legs;
		turn leg4 to y-axis <0.000000> speed <1.0> * speed_legs;
		turn leg4 to z-axis <-31.005495> speed <1.0> * speed_legs;
		turn leg5 to y-axis <-31.005495> speed <1.0> * speed_legs;
		turn leg5 to z-axis <-31.005495> speed <1.0> * speed_legs;
		turn leg6 to y-axis <3.000000> speed <1.0> * speed_legs;
		sleep 200;
	}
		turn leg1 to y-axis <43.005495> speed <1.0> * speed_legs;
		turn leg1 to z-axis <0.000000> speed <1.0> * speed_legs;
		turn leg2 to y-axis <0.000000> speed <1.0> * speed_legs;
		turn leg2 to z-axis <0.000000> speed <1.0> * speed_legs;
		turn leg3 to y-axis <34.005495> speed <1.0> * speed_legs;
		turn leg3 to z-axis <31.005495> speed <1.0> * speed_legs;
		turn leg4 to y-axis <-40.005495> speed <1.0> * speed_legs;
		turn leg4 to z-axis <-31.005495> speed <1.0> * speed_legs;
		turn leg5 to y-axis <-37.005495> speed <1.0> * speed_legs;
		turn leg5 to z-axis <0.000000> speed <1.0> * speed_legs;
		turn leg6 to y-axis <0.000000> speed <1.0> * speed_legs;
		turn leg6 to z-axis <-45.005495> speed <1.0> * speed_legs;
		sleep 200;
	}
}


MotionControl(Func_Var_1)
{
	while( TRUE )
	{
		Func_Var_1 = bMoving;
		if( Func_Var_1 )
		{
			call-script walk();
		}
		if( !Func_Var_1 )
		{
			sleep 100;
			turn leg1 to y-axis <0.000000> speed <60.000000>;
			turn leg1 to z-axis <0.000000> speed <60.000000>;
			turn leg2 to y-axis <0.000000> speed <60.000000>;
			turn leg2 to z-axis <0.000000> speed <60.000000>;
			turn leg3 to y-axis <0.000000> speed <60.000000>;
			turn leg3 to z-axis <0.000000> speed <60.000000>;
			turn leg4 to y-axis <0.000000> speed <60.000000>;
			turn leg4 to z-axis <0.000000> speed <60.000000>;
			turn leg5 to y-axis <0.000000> speed <60.000000>;
			turn leg5 to z-axis <0.000000> speed <60.000000>;
			turn leg6 to y-axis <0.000000> speed <60.000000>;
			turn leg6 to z-axis <0.000000> speed <60.000000>;
		}
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	
	start-script MotionControl();
	
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	gun_1 = 0;
	msl_1 = 0;
	speed_legs = 20;
	restore_delay = 4000;
	bMoving = FALSE;
	bAiming = FALSE;
	start-script SmokeUnit();
}

StartMoving()
{
	bMoving = TRUE;
}

StopMoving()
{
	bMoving = FALSE;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	turn turret to y-axis <0.000000> speed <50.000000>;
	turn turret to x-axis <0.000000> speed <50.000000>;
}


AimFromPrimary(piecenum)
{
	piecenum = turret;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM_1;
	set-signal-mask SIG_AIM_1;
	bAiming = TRUE;
	turn turret to y-axis heading speed <75.000000>;
	turn turret to x-axis <0.000000> - pitch speed <50.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn turret around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

QueryPrimary(piecenum)
{
	if( gun_1 == 0 )
	{
		piecenum = flare1;
	}
	if( gun_1 == 1 )
	{
		piecenum = flare2;
	}
	if( gun_1 == 2 )
	{
		piecenum = flare3;
	}
	if( gun_1 == 3 )
	{
		piecenum = flare4;
	}	
}

FirePrimary()
{
	++gun_1;
	if( gun_1 == 4 )
	{
		gun_1 = 0;
	}
}

AimFromSecondary(piecenum)
{
	piecenum = rocketaim;
}

AimSecondary(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	return (1);
}

QuerySecondary(piecenum)
{
	if( msl_1 == 0 )
	{
		piecenum = rocketfire1;
	}
	if( msl_1 == 1 )
	{
		piecenum = rocketfire2;
	}
	if( msl_1 == 2 )
	{
		piecenum = rocketfire3;
	}
	if( msl_1 == 3 )
	{
		piecenum = rocketfire4;
	}
}

FireSecondary()
{
	++msl_1;
	if( msl_1 >= 4 )
	{
		msl_1 = 0;
	}
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode body type NOHEATCLOUD;
		explode leg1 type NOHEATCLOUD;
		explode leg2 type NOHEATCLOUD;
		explode leg3 type NOHEATCLOUD;
		explode leg4 type NOHEATCLOUD;
		explode leg5 type NOHEATCLOUD;
		explode leg6 type NOHEATCLOUD;
		explode turret type NOHEATCLOUD;
		explode sides type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode body type NOHEATCLOUD;
		explode leg1 type NOHEATCLOUD | FALL;
		explode leg2 type NOHEATCLOUD | FALL;
		explode leg3 type NOHEATCLOUD | FALL;
		explode leg4 type NOHEATCLOUD | FALL;
		explode leg5 type NOHEATCLOUD | FALL;
		explode leg6 type NOHEATCLOUD | FALL;
		explode turret type NOHEATCLOUD | FALL;
		explode sides type NOHEATCLOUD | FALL;
		return (corpsetype);
	}
	corpsetype = 3;
	explode body type NOHEATCLOUD;
	explode leg1 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
	explode leg2 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
	explode leg3 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
	explode leg4 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
	explode leg5 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
	explode leg6 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
	explode turret type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
	explode sides type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
	return (corpsetype);
}
