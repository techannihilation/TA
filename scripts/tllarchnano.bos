#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, segment1, segment2, segment3, segment4, nano, legs, rupleg1, rupleg2, rupleg3, lupleg1, lupleg2, lupleg3,
       lleg3, lleg2, lleg1, rleg3, rleg2, rleg1, curl1, curl2, curl3, curl4 ;

static-var  bMoving, lathe, statechg_DesiredState, statechg_StateChanging;

#define SIG_AIM		2
#define SIG_R		4


walk()
{
	if( bMoving )
	{
		turn rupleg1 to y-axis <27.423077> speed <100.000000>;
		turn rupleg1 to y-axis <7.000000> speed <100.000000>;
		turn rupleg2 to y-axis <-13.351648> speed <100.000000>;
		turn rupleg2 to z-axis <0.000000> speed <100.000000>;
		turn rupleg2 to z-axis <27.005495> speed <100.000000>;
		turn rupleg3 to y-axis <27.774725> speed <100.000000>;
		turn rupleg3 to y-axis <7.000000> speed <100.000000>;
		turn lupleg1 to y-axis <21.434066> speed <100.000000>;
		turn lupleg1 to z-axis <0.000000> speed <100.000000>;
		turn lupleg1 to z-axis <-24.005495> speed <100.000000>;
		turn lupleg2 to y-axis <-14.412088> speed <100.000000>;
		turn lupleg2 to y-axis <0.000000> speed <100.000000>;
		turn lupleg2 to z-axis <-7.379121> speed <100.000000>;
		turn lupleg2 to z-axis <0.000000> speed <100.000000>;
		turn lupleg3 to y-axis <13.351648> speed <100.000000>;
		turn lupleg3 to z-axis <0.000000> speed <100.000000>;
		turn lupleg3 to z-axis <-45.010989> speed <100.000000>;
		turn lleg3 to z-axis <0.000000> speed <100.000000>;
		turn lleg3 to z-axis <35.005495> speed <100.000000>;
		turn lleg2 to z-axis <0.000000> speed <100.000000>;
		turn lleg2 to z-axis <-11.000000> speed <100.000000>;
		turn lleg1 to z-axis <0.000000> speed <100.000000>;
		turn lleg1 to z-axis <11.000000> speed <100.000000>;
		turn rleg3 to z-axis <0.000000> speed <100.000000>;
		turn rleg3 to z-axis <8.000000> speed <100.000000>;
		turn rleg2 to z-axis <0.000000> speed <100.000000>;
		turn rleg2 to z-axis <-34.005495> speed <100.000000>;
		turn rleg1 to z-axis <0.000000> speed <100.000000>;
		turn rleg1 to z-axis <9.000000> speed <100.000000>;
		sleep 50;
	}
	if( bMoving )
	{
		turn rupleg1 to y-axis <-13.000000> speed <100.000000>;
		turn rupleg2 to y-axis <8.000000> speed <100.000000>;
		turn rupleg2 to z-axis <54.010989> speed <100.000000>;
		turn rupleg3 to y-axis <-14.000000> speed <100.000000>;
		turn lupleg1 to y-axis <1.000000> speed <100.000000>;
		turn lupleg1 to z-axis <-64.010989> speed <100.000000>;
		turn lupleg2 to y-axis <20.000000> speed <100.000000>;
		turn lupleg3 to y-axis <-10.000000> speed <100.000000>;
		turn lupleg3 to z-axis <-75.016484> speed <100.000000>;
		turn lleg3 to z-axis <63.010989> speed <100.000000>;
		turn lleg2 to z-axis <0.000000> speed <100.000000>;
		turn lleg1 to z-axis <66.010989> speed <100.000000>;
		turn rleg3 to z-axis <0.000000> speed <100.000000>;
		turn rleg2 to z-axis <-63.010989> speed <100.000000>;
		turn rleg1 to z-axis <0.000000> speed <100.000000>;
		sleep 50;
	}
	if( bMoving )
	{
		turn rupleg1 to y-axis <-20.000000> speed <100.000000>;
		turn rupleg2 to y-axis <17.000000> speed <100.000000>;
		turn rupleg2 to z-axis <8.000000> speed <100.000000>;
		turn rupleg3 to y-axis <-20.000000> speed <100.000000>;
		turn lupleg1 to y-axis <-10.000000> speed <100.000000>;
		turn lupleg1 to z-axis <-14.000000> speed <100.000000>;
		turn lupleg2 to y-axis <31.005495> speed <100.000000>;
		turn lupleg3 to y-axis <-15.000000> speed <100.000000>;
		turn lupleg3 to z-axis <-10.000000> speed <100.000000>;
		turn lleg3 to z-axis <17.000000> speed <100.000000>;
		turn lleg1 to z-axis <10.000000> speed <100.000000>;
		turn rleg2 to z-axis <-9.000000> speed <100.000000>;
		sleep 50;
	}
	if( bMoving )
	{
		turn rupleg1 to y-axis <-13.000000> speed <100.000000>;
		turn rupleg1 to z-axis <39.005495> speed <100.000000>;
		turn rupleg2 to y-axis <11.000000> speed <100.000000>;
		turn rupleg2 to z-axis <-2.000000> speed <100.000000>;
		turn rupleg3 to y-axis <-3.000000> speed <100.000000>;
		turn rupleg3 to z-axis <28.005495> speed <100.000000>;
		turn lupleg1 to y-axis <0.000000> speed <100.000000>;
		turn lupleg1 to z-axis <2.000000> speed <100.000000>;
		turn lupleg2 to y-axis <19.000000> speed <100.000000>;
		turn lupleg2 to z-axis <-40.005495> speed <100.000000>;
		turn lupleg3 to y-axis <-7.000000> speed <100.000000>;
		turn lupleg3 to z-axis <4.000000> speed <100.000000>;
		turn lleg3 to z-axis <0.000000> speed <100.000000>;
		turn lleg2 to z-axis <32.005495> speed <100.000000>;
		turn lleg1 to z-axis <0.000000> speed <100.000000>;
		turn rleg3 to z-axis <-17.000000> speed <100.000000>;
		turn rleg2 to z-axis <0.000000> speed <100.000000>;
		turn rleg1 to z-axis <-19.000000> speed <100.000000>;
		sleep 50;
	}
	if( bMoving )
	{
		turn rupleg1 to y-axis <8.000000> speed <100.000000>;
		turn rupleg1 to z-axis <52.010989> speed <100.000000>;
		turn rupleg2 to y-axis <0.000000> speed <100.000000>;
		turn rupleg3 to y-axis <15.000000> speed <100.000000>;
		turn rupleg3 to z-axis <48.010989> speed <100.000000>;
		turn lupleg1 to y-axis <9.000000> speed <100.000000>;
		turn lupleg2 to y-axis <3.000000> speed <100.000000>;
		turn lupleg2 to z-axis <-68.016484> speed <100.000000>;
		turn lupleg3 to y-axis <1.000000> speed <100.000000>;
		turn lleg3 to z-axis <-10.000000> speed <100.000000>;
		turn lleg2 to z-axis <64.010989> speed <100.000000>;
		turn lleg1 to z-axis <-5.000000> speed <100.000000>;
		turn rleg3 to z-axis <-52.010989> speed <100.000000>;
		turn rleg2 to z-axis <3.000000> speed <100.000000>;
		turn rleg1 to z-axis <-50.010989> speed <100.000000>;
		sleep 50;
	}
	if( bMoving )
	{
		turn rupleg1 to y-axis <16.000000> speed <100.000000>;
		turn rupleg1 to z-axis <39.005495> speed <100.000000>;
		turn rupleg2 to y-axis <-11.000000> speed <100.000000>;
		turn rupleg3 to y-axis <24.005495> speed <100.000000>;
		turn rupleg3 to z-axis <28.005495> speed <100.000000>;
		turn lupleg1 to y-axis <20.000000> speed <100.000000>;
		turn lupleg2 to y-axis <-3.000000> speed <100.000000>;
		turn lupleg2 to z-axis <-40.005495> speed <100.000000>;
		turn lupleg3 to y-axis <18.000000> speed <100.000000>;
		turn lleg3 to z-axis <0.000000> speed <100.000000>;
		turn lleg2 to z-axis <37.005495> speed <100.000000>;
		turn lleg1 to z-axis <0.000000> speed <100.000000>;
		turn rleg3 to z-axis <-17.000000> speed <100.000000>;
		turn rleg2 to z-axis <0.000000> speed <100.000000>;
		turn rleg1 to z-axis <-23.005495> speed <100.000000>;
		sleep 50;
	}
	sleep 50;
}

MotionControl(Func_Var_1)
{
	while( TRUE )
	{
		Func_Var_1 = bMoving;
		if( Func_Var_1 )
		{
			call-script walk();
		}
		if( !Func_Var_1 )
		{
			sleep 100;
		}
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	
	start-script MotionControl();
	
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from body;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Go()
{
	set INBUILDSTANCE to 1;
	turn curl1 to x-axis <0> speed <40.000000>;
	turn curl2 to x-axis <0> speed <60.000000>;
	turn curl3 to x-axis <0> speed <80.000000>;
	turn curl4 to x-axis <0> speed <100.000000>;
	wait-for-turn curl1 around x-axis;
	turn segment4 to y-axis lathe speed <80.000000>;
}

Stop()
{
	set INBUILDSTANCE to 0;
	turn segment4 to y-axis <0> speed <80.000000>;
	wait-for-turn segment4 around y-axis;
	turn curl4 to x-axis <-33> speed <100.000000>;
	turn curl3 to x-axis <-53> speed <80.000000>;
	turn curl2 to x-axis <-33> speed <60.000000>;
	turn curl1 to x-axis <-33> speed <40.000000>;
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}



Create()
{
	turn curl4 to x-axis <-33.000000> now;
	turn curl3 to x-axis <-53.000000> now;
	turn curl2 to x-axis <-33.000000> now;
	turn curl1 to x-axis <-33.000000> now;
	bMoving = 0;
	lathe = 0;
	call-script InitState();
	start-script SmokeUnit();
}

StartBuilding(Func_Var_1)
{
	lathe = Func_Var_1;
	sleep rand(25,250);
	start-script RequestState(0);
}

StopBuilding()
{
	start-script RequestState(1);
}

TargetHeading(Func_Var_1)
{
	lathe = 0-Func_Var_1;
}

QueryNanoPiece(piecenum)
{
	piecenum = nano;
}

StartMoving()
{
	bMoving = 1;
}

StopMoving()
{
	bMoving = 0;
}

SweetSpot(piecenum)
{
	piecenum = body;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode body type  NOHEATCLOUD ;
		explode lleg1 type  NOHEATCLOUD ;
		explode lleg2 type  NOHEATCLOUD ;
		explode lleg3 type  NOHEATCLOUD ;
		explode lupleg1 type  NOHEATCLOUD ;
		explode lupleg2 type  NOHEATCLOUD ;
		explode lupleg3 type  NOHEATCLOUD ;
		explode rleg1 type  NOHEATCLOUD ;
		explode rleg2 type  NOHEATCLOUD ;
		explode rleg3 type  NOHEATCLOUD ;
		explode rupleg1 type  NOHEATCLOUD ;
		explode rupleg2 type  NOHEATCLOUD ;
		explode rupleg3 type  NOHEATCLOUD ;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode body type  NOHEATCLOUD ;
		explode lleg1 type FALL | NOHEATCLOUD ;
		explode lleg2 type FALL | NOHEATCLOUD ;
		explode lleg3 type FALL | NOHEATCLOUD ;
		explode lupleg1 type FALL | NOHEATCLOUD ;
		explode lupleg2 type FALL | NOHEATCLOUD ;
		explode lupleg3 type FALL | NOHEATCLOUD ;
		explode rleg1 type FALL | NOHEATCLOUD ;
		explode rleg2 type FALL | NOHEATCLOUD ;
		explode rleg3 type FALL | NOHEATCLOUD ;
		explode rupleg1 type FALL | NOHEATCLOUD ;
		explode rupleg2 type FALL | NOHEATCLOUD ;
		explode rupleg3 type FALL | NOHEATCLOUD ;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode body type  NOHEATCLOUD ;
		explode lleg1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | NOHEATCLOUD ;
		explode lleg2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | NOHEATCLOUD ;
		explode lleg3 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | NOHEATCLOUD ;
		explode lupleg1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | NOHEATCLOUD ;
		explode lupleg2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | NOHEATCLOUD ;
		explode lupleg3 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | NOHEATCLOUD ;
		explode rleg1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | NOHEATCLOUD ;
		explode rleg2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | NOHEATCLOUD ;
		explode rleg3 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | NOHEATCLOUD ;
		explode rupleg1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | NOHEATCLOUD ;
		explode rupleg2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | NOHEATCLOUD ;
		explode rupleg3 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | NOHEATCLOUD ;
		return (corpsetype);
	}
	corpsetype = 3;
	explode body type  NOHEATCLOUD ;
	explode lleg1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | NOHEATCLOUD ;
	explode lleg2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | NOHEATCLOUD ;
	explode lleg3 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | NOHEATCLOUD ;
	explode lupleg1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | NOHEATCLOUD ;
	explode lupleg2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | NOHEATCLOUD ;
	explode lupleg3 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | NOHEATCLOUD ;
	explode rleg1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | NOHEATCLOUD ;
	explode rleg2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | NOHEATCLOUD ;
	explode rleg3 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | NOHEATCLOUD ;
	explode rupleg1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | NOHEATCLOUD ;
	explode rupleg2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | NOHEATCLOUD ;
	explode rupleg3 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | NOHEATCLOUD ;
	return (corpsetype);	
}
