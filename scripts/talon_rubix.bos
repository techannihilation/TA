#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  flare1, flare2, flare3, flare4, base, body, turret, sleeve,
       barrel1, barrel2, barrel3, barrel4;

static-var  Static_Var_1;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	hide flare1;
	hide flare3;
	hide flare2;
	hide flare4;
	dont-shade base;
	dont-shade body;
	dont-cache flare1;
	dont-cache flare2;
	dont-cache flare3;
	dont-cache flare4;
	dont-shade turret;
	dont-shade sleeve;
	dont-shade barrel1;
	dont-shade barrel2;
	dont-shade barrel3;
	dont-shade barrel4;
	dont-shade flare1;
	dont-shade flare2;
	dont-shade flare3;
	dont-shade flare4;
	Static_Var_1 = 0;
	start-script SmokeUnit();
	turn sleeve to x-axis <-90.> now;
}

RestoreAfterDelay()
{
	sleep 6000;
	turn sleeve to x-axis <-90.> speed <200.>;
	turn turret to y-axis <0.> speed <150.>;
	wait-for-turn sleeve around x-axis;
	wait-for-turn turret around y-axis;
	cache turret;
	cache sleeve;
	cache barrel1;
	cache barrel2;
	cache barrel3;
	cache barrel4;
}

AimPrimary(heading, pitch)
{
	signal 2;
	set-signal-mask 2;
	dont-cache turret;
	dont-cache sleeve;
	dont-cache barrel1;
	dont-cache barrel2;
	dont-cache barrel3;
	dont-cache barrel4;
	turn turret to y-axis heading speed <250.>;
	turn sleeve to x-axis <0.> - pitch speed <250.>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeve around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	if( Static_Var_1 == 0 )
	{
		emit-sfx 1025 from flare1;
		move barrel1 to z-axis [-3.] now;
		sleep 80;
		move barrel1 to z-axis [0.] speed [5.];
	}
	if( Static_Var_1 == 1 )
	{
		emit-sfx 1025 from flare2;
		move barrel2 to z-axis [-3.] now;
		sleep 80;
		move barrel2 to z-axis [0.] speed [5.];
	}
	if( Static_Var_1 == 2 )
	{
		emit-sfx 1025 from flare3;
		move barrel3 to z-axis [-3.] now;
		sleep 80;
		move barrel3 to z-axis [0.] speed [5.];
	}
	if( Static_Var_1 == 3 )
	{
		emit-sfx 1025 from flare4;
		move barrel4 to z-axis [-3.] now;
		sleep 80;
		move barrel4 to z-axis [0.] speed [5.];
	}
	++Static_Var_1;
	if( Static_Var_1 == 4 )
	{
		Static_Var_1 = 0;
	}
}

QueryPrimary(piecenum)
{
	if( Static_Var_1 == 0 )
	{
		piecenum = flare1;
	}
	if( Static_Var_1 == 1 )
	{
		piecenum = flare2;
	}
	if( Static_Var_1 == 2 )
	{
		piecenum = flare3;
	}
	if( Static_Var_1 == 3 )
	{
		piecenum = flare4;
	}
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide flare1;
	hide flare2;
	hide flare3;
	hide flare4;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode barrel1 type NOHEATCLOUD;
		explode barrel3 type NOHEATCLOUD;
		explode barrel2 type NOHEATCLOUD;
		explode barrel4 type NOHEATCLOUD;
		explode base type NOHEATCLOUD;
		explode sleeve type NOHEATCLOUD;
		explode turret type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode barrel1 type SHATTER | NOHEATCLOUD;
		explode barrel3 type SHATTER | NOHEATCLOUD;
		explode barrel2 type FALL | NOHEATCLOUD;
		explode barrel4 type FALL | NOHEATCLOUD;
		explode base type NOHEATCLOUD;
		explode sleeve type SHATTER | NOHEATCLOUD;
		explode turret type SHATTER | NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode barrel1 type SHATTER | NOHEATCLOUD;
		explode barrel3 type SHATTER | NOHEATCLOUD;
		explode barrel2 type FALL | NOHEATCLOUD;
		explode barrel4 type FALL | NOHEATCLOUD;
		explode base type NOHEATCLOUD;
		explode sleeve type SHATTER | NOHEATCLOUD;
		explode turret type SHATTER | NOHEATCLOUD;
		return (corpsetype);
	}
	corpsetype = 3;
	explode barrel1 type SHATTER | NOHEATCLOUD;
	explode barrel3 type SHATTER | NOHEATCLOUD;
	explode barrel2 type FALL | NOHEATCLOUD;
	explode barrel4 type FALL | NOHEATCLOUD;
	explode base type NOHEATCLOUD;
	explode sleeve type SHATTER | NOHEATCLOUD;
	explode turret type SHATTER | NOHEATCLOUD;
	return (corpsetype);
}
