#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, leg1, leg2, leg3, leg4, leg5, leg6, body,
       lift, platform, nano, nanoemit, door1, door2;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4, Static_Var_5,
            Static_Var_6;


walk2()
{
	while( Static_Var_3 )
	{
		if( Static_Var_3 )
		{
			turn leg1 to y-axis <43.> speed <40.>;
			turn leg1 to y-axis <0.> speed <40.>;
			turn leg1 to z-axis <0.> speed <40.>;
			turn leg1 to z-axis <0.> speed <40.>;
			turn leg2 to z-axis <0.> speed <40.>;
			turn leg2 to z-axis <31.> speed <40.>;
			turn leg3 to y-axis <34.> speed <40.>;
			turn leg3 to y-axis <34.> speed <40.>;
			turn leg3 to z-axis <31.> speed <40.>;
			turn leg3 to z-axis <0.> speed <40.>;
			turn leg4 to y-axis <-40.> speed <40.>;
			turn leg4 to y-axis <-40.> speed <40.>;
			turn leg4 to z-axis <-31.> speed <40.>;
			turn leg4 to z-axis <0.> speed <40.>;
			turn leg5 to y-axis <-37.> speed <40.>;
			turn leg5 to y-axis <0.> speed <40.>;
			turn leg5 to z-axis <0.> speed <40.>;
			turn leg5 to z-axis <0.> speed <40.>;
			turn leg6 to y-axis <0.> speed <40.>;
			turn leg6 to y-axis <-30.> speed <40.>;
			turn leg6 to z-axis <-45.> speed <40.>;
			sleep 200;
		}
		if( Static_Var_3 )
		{
			turn leg1 to z-axis <31.> speed <40.>;
			turn leg2 to y-axis <34.> speed <40.>;
			turn leg2 to z-axis <31.> speed <40.>;
			turn leg3 to y-axis <0.> speed <40.>;
			turn leg3 to z-axis <0.> speed <40.>;
			turn leg4 to y-axis <0.> speed <40.>;
			turn leg5 to z-axis <-31.> speed <40.>;
			turn leg6 to z-axis <2.> speed <40.>;
			sleep 200;
		}
		if( Static_Var_3 )
		{
			turn leg1 to y-axis <55.> speed <40.>;
			turn leg1 to z-axis <31.> speed <40.>;
			turn leg2 to y-axis <34.> speed <40.>;
			turn leg2 to z-axis <0.> speed <40.>;
			turn leg3 to z-axis <31.> speed <40.>;
			turn leg4 to y-axis <0.> speed <40.>;
			turn leg4 to z-axis <-31.> speed <40.>;
			turn leg5 to y-axis <-31.> speed <40.>;
			turn leg5 to z-axis <-31.> speed <40.>;
			turn leg6 to y-axis <3.> speed <40.>;
			sleep 200;
		}
		turn leg1 to y-axis <43.> speed <40.>;
		turn leg1 to z-axis <0.> speed <40.>;
		turn leg2 to y-axis <0.> speed <40.>;
		turn leg2 to z-axis <0.> speed <40.>;
		turn leg3 to y-axis <34.> speed <40.>;
		turn leg3 to z-axis <31.> speed <40.>;
		turn leg4 to y-axis <-40.> speed <40.>;
		turn leg4 to z-axis <-31.> speed <40.>;
		turn leg5 to y-axis <-37.> speed <40.>;
		turn leg5 to z-axis <0.> speed <40.>;
		turn leg6 to y-axis <0.> speed <40.>;
		turn leg6 to z-axis <-45.> speed <40.>;
		sleep 200;
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

MotionControl(Func_Var_1)
{
	while( TRUE )
	{
		Func_Var_1 = Static_Var_3;
		if( Func_Var_1 )
		{
			call-script walk2();
		}
		if( !Func_Var_1 )
		{
			sleep 100;
			turn leg1 to y-axis <0.> speed <100.>;
			turn leg1 to z-axis <0.> speed <100.>;
			turn leg2 to y-axis <0.> speed <100.>;
			turn leg2 to z-axis <0.> speed <100.>;
			turn leg3 to y-axis <0.> speed <100.>;
			turn leg3 to z-axis <0.> speed <100.>;
			turn leg4 to y-axis <0.> speed <100.>;
			turn leg4 to z-axis <0.> speed <100.>;
			turn leg5 to y-axis <0.> speed <100.>;
			turn leg5 to z-axis <0.> speed <100.>;
			turn leg6 to y-axis <0.> speed <100.>;
			turn leg6 to z-axis <0.> speed <100.>;
		}
	}
}

Go()
{
	turn door2 to z-axis <160.> speed <100.>;
	turn door1 to z-axis <-160.> speed <100.>;
	wait-for-turn door2 around z-axis;
	turn door2 to z-axis <230.> speed <100.>;
	turn door1 to z-axis <-230.> speed <100.>;
	wait-for-turn door2 around z-axis;
	move lift to y-axis [2.5] speed [2.];
	wait-for-move lift along y-axis;
	move platform to y-axis [1.25] speed [1.];
	wait-for-move platform along y-axis;
	turn platform to y-axis Static_Var_1 speed <160.>;
	wait-for-turn platform around y-axis;
	set INBUILDSTANCE to 1;
}

Stop()
{
	set INBUILDSTANCE to 0;
	turn platform to y-axis <0.> speed <160.>;
	wait-for-turn platform around y-axis;
	move platform to y-axis [0.] speed [1.];
	wait-for-move platform along y-axis;
	move lift to y-axis [0.] speed [2.];
	wait-for-move lift along y-axis;
	turn door2 to z-axis <160.> speed <100.>;
	turn door1 to z-axis <-160.> speed <100.>;
	wait-for-turn door2 around z-axis;
	turn door2 to z-axis <0.> speed <100.>;
	turn door1 to z-axis <0.> speed <100.>;
	wait-for-turn door2 around z-axis;
}

InitState()
{
	Static_Var_5 = 1;
	Static_Var_6 = 0;
}

RequestState(requestedstate, currentstate)
{
	if( Static_Var_6 )
	{
		Static_Var_5 = requestedstate;
		return (0);
	}
	Static_Var_6 = 1;
	currentstate = Static_Var_5;
	Static_Var_5 = requestedstate;
	while( Static_Var_5 != currentstate )
	{
		if( Static_Var_5 == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( Static_Var_5 == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	Static_Var_6 = 0;
}

Create()
{
	Static_Var_3 = 0;
	Static_Var_1 = 0;
	Static_Var_2 = 0;
	call-script InitState();
	start-script SmokeUnit();
	start-script MotionControl();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

StartBuilding(Func_Var_1)
{
	Static_Var_1 = Func_Var_1;
	start-script RequestState(0);
}

StopBuilding()
{
	start-script RequestState(1);
}

StartMoving()
{
	Static_Var_3 = 1;
}

StopMoving()
{
	Static_Var_3 = 0;
}

QueryNanoPiece(piecenum)
{
	piecenum = nanoemit;
}

TargetHeading(Func_Var_1)
{
	Static_Var_1 = 0 - Func_Var_1;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type NOHEATCLOUD;
		explode nano type NOHEATCLOUD;
		explode leg1 type NOHEATCLOUD;
		explode leg2 type NOHEATCLOUD;
		explode leg3 type NOHEATCLOUD;
		explode leg4 type NOHEATCLOUD;
		explode leg5 type NOHEATCLOUD;
		explode leg6 type NOHEATCLOUD;
		explode body type NOHEATCLOUD;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type NOHEATCLOUD ;
		explode nano type FALL | NOHEATCLOUD ;
		explode leg1 type FALL | NOHEATCLOUD ;
		explode leg2 type FALL | NOHEATCLOUD ;
		explode leg3 type FALL | NOHEATCLOUD ;
		explode leg4 type FALL | NOHEATCLOUD ;
		explode leg5 type FALL | NOHEATCLOUD ;
		explode leg6 type FALL | NOHEATCLOUD ;
		explode body type SHATTER | NOHEATCLOUD ;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type NOHEATCLOUD ;
		explode nano type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD ;
		explode leg1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD ;
		explode leg2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD ;
		explode leg3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD ;
		explode leg4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD ;
		explode leg5 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD ;
		explode leg6 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD ;
		explode body type SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD ;
		return (0);
	}
	corpsetype = 3;
	explode base type NOHEATCLOUD ;
	explode nano type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD ;
	explode leg1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD ;
	explode leg2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD ;
	explode leg3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD ;
	explode leg4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD ;
	explode leg5 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD ;
	explode leg6 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD ;
	explode body type SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
}
