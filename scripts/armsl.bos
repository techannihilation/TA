#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, link, arm1, arm2, arm3, arm4, thrust1, thrust2,
       thrust3, thrust4;

static-var  Static_Var_1, unitviewer, statechg_DesiredState, statechg_StateChanging;


pickupscr()
{
	if( TRUE )
	{
		turn arm1 to y-axis <0.000000> now;
		turn arm1 to y-axis <54.736264> speed <70.000000>;
		turn arm2 to y-axis <0.000000> now;
		turn arm2 to y-axis <-52.302198> speed <70.000000>;
		turn arm3 to y-axis <0.000000> now;
		turn arm3 to y-axis <-54.736264> speed <70.000000>;
		turn arm4 to y-axis <0.000000> now;
		turn arm4 to y-axis <54.126374> speed <70.000000>;
		sleep 1326;
	}
	sleep 11;
}

dropoffscr()
{
	if( TRUE )
	{
		turn arm1 to y-axis <54.736264> now;
		turn arm1 to y-axis <0.000000> speed <70.000000>;
		turn arm2 to y-axis <-52.302198> now;
		turn arm2 to y-axis <0.000000> speed <70.000000>;
		turn arm3 to y-axis <-54.736264> now;
		turn arm3 to y-axis <0.000000> speed <70.000000>;
		turn arm4 to y-axis <54.126374> now;
		turn arm4 to y-axis <0.000000> speed <70.000000>;
		sleep 1325;
	}
	sleep 15;
}

HitByWeapon(anglex, anglez)
{
	turn base to z-axis anglez speed <105.016484>;
	turn base to x-axis anglex speed <105.016484>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <30.005495>;
	turn base to x-axis <0.000000> speed <30.005495>;
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script pickupscr();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script dropoffscr();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	unitviewer = FALSE;
	Static_Var_1 = 0;
	call-script InitState();
	start-script SmokeUnit();
}

Demo()
{
	unitviewer = TRUE;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

QueryTransport(Func_Var_1, Func_Var_2)
{
	Func_Var_1 = 1;
}

BeginTransport(Func_Var_1)
{
	move link to y-axis [0.000000] - Func_Var_1 now;
	start-script RequestState(0);
}

EndTransport()
{
	start-script RequestState(1);
}

Activate()
{
	if( unitviewer )
	{
		start-script RequestState(0);
	}
}

Deactivate()
{
	if( unitviewer )
	{
		start-script RequestState(1);
	}
}

ProcessFlames()
{
	while( TRUE )
	{
		if( Static_Var_1 == 1 OR Static_Var_1 == 2 )
		{
			emit-sfx 0 from thrust1;
			emit-sfx 0 from thrust2;
			emit-sfx 0 from thrust3;
			emit-sfx 0 from thrust4;
		}
		sleep 67;
	}
}

StopMoving()
{
	signal 8;
	Static_Var_1 = 0;
}

MoveRate1()
{
	signal 8;
	set-signal-mask 8;
	//start-script ProcessFlames();
	Static_Var_1 = 1;
}

MoveRate2()
{
	signal 8;
	set-signal-mask 8;
	//start-script ProcessFlames();
	Static_Var_1 = 2;
}

MoveRate3()
{
	signal 8;
	set-signal-mask 8;
	//start-script ProcessFlames();
	Static_Var_1 = 3;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode arm1 type NOHEATCLOUD;
		explode arm2 type NOHEATCLOUD;
		explode arm3 type NOHEATCLOUD;
		explode base type NOHEATCLOUD;
		explode link type NOHEATCLOUD;
		explode thrust1 type NOHEATCLOUD;
		explode thrust2 type NOHEATCLOUD;
		explode thrust3 type NOHEATCLOUD;
		explode thrust4 type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode arm1 type NOHEATCLOUD | SHATTER;
		explode arm2 type NOHEATCLOUD;
		explode arm3 type NOHEATCLOUD;
		explode base type NOHEATCLOUD;
		explode link type NOHEATCLOUD | FALL;
		explode thrust1 type NOHEATCLOUD | FALL;
		explode thrust2 type NOHEATCLOUD | FALL;
		explode thrust3 type NOHEATCLOUD | FALL;
		explode thrust4 type NOHEATCLOUD | FALL;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode arm1 type NOHEATCLOUD | SHATTER;
		explode arm2 type NOHEATCLOUD;
		explode arm3 type NOHEATCLOUD;
		explode base type NOHEATCLOUD;
		explode link type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode thrust1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode thrust2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode thrust3 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode thrust4 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		return (corpsetype);
	}
	corpsetype = 3;
	explode arm1 type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	explode arm2 type NOHEATCLOUD;
	explode arm3 type NOHEATCLOUD;
	explode base type NOHEATCLOUD;
	explode link type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode thrust1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode thrust2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode thrust3 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode thrust4 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	return (corpsetype);
}
