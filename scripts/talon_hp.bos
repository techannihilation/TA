#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  beam1, beam2, beam3, beam4, base, body, pier1, pier2,
       pier3, pier4, side1, side2,
       pad, block1, block2, nano1a, nano1b, nano2a, nano2b, padsee;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4;


RestoreAfterDelay()
{
	sleep 5000;
}

activatescr()
{
	if( TRUE )
	{
		set ARMORED to 0;
	}
	if( TRUE )
	{
		dont-cache pier1;
		dont-cache pier2;
		dont-cache pier3;
		dont-cache pier4;
		set ARMORED to 0;
	}
	if( TRUE )
	{
		move pier1 to z-axis [-9.6] speed [10.];
		move pier3 to z-axis [9.6] speed [10.];
		move pier2 to z-axis [9.6] speed [10.];
		move pier4 to z-axis [-9.6] speed [10.];
		wait-for-move pier3 along x-axis;
	}
	if( TRUE )
	{
		cache pier1;
		cache pier2;
		cache pier3;
		cache pier4;
	}
	if( TRUE )
	{
		dont-cache side2;
		dont-cache side1;
		dont-cache block1;
		dont-cache block2;
		dont-cache nano1a;
		dont-cache nano2a;
		dont-cache nano1b;
		dont-cache nano2b;
	}
	if( TRUE )
	{
		sleep 500;
		move side2 to x-axis [9.6] speed [10.];
		move side1 to x-axis [-9.6] speed [10.];
		wait-for-move side2 along x-axis;
	}
	if( TRUE )
	{
		move nano2a to x-axis [-2.4] speed [10.];
		move nano2b to x-axis [-2.4] speed [10.];
		move nano1a to x-axis [2.4] speed [10.];
		move nano1b to x-axis [2.4] speed [10.];
		wait-for-move nano1a along x-axis;
	}
	if( TRUE )
	{
		cache side2;
		cache side1;
		cache block1;
		cache block2;
		cache nano1a;
		cache nano2a;
		cache nano1b;
		cache nano2b;
	}
	if( TRUE )
	{
		sleep 300;
	}
}

deactivatescr()
{
	if( TRUE )
	{
		dont-cache side2;
		dont-cache side1;
		dont-cache block1;
		dont-cache block2;
		dont-cache nano1a;
		dont-cache nano2a;
		dont-cache nano1b;
		dont-cache nano2b;
	}
	if( TRUE )
	{
		move nano2a to x-axis [0.] speed [10.];
		move nano2b to x-axis [0.] speed [10.];
		move nano1a to x-axis [0.] speed [10.];
		move nano1b to x-axis [0.] speed [10.];
		wait-for-move nano1a along x-axis;
	}
	if( TRUE )
	{
		move side2 to x-axis [0.] speed [10.];
		move side1 to x-axis [0.] speed [10.];
		wait-for-move side2 along x-axis;
	}
	if( TRUE )
	{
		cache side2;
		cache side1;
		cache block1;
		cache block2;
		cache nano1a;
		cache nano2a;
		cache nano1b;
		cache nano2b;
	}
	if( TRUE )
	{
		dont-cache pier1;
		dont-cache pier2;
		dont-cache pier3;
		dont-cache pier4;
	}
	if( TRUE )
	{
		move pier1 to z-axis [0.] speed [10.];
		move pier3 to z-axis [0.] speed [10.];
		move pier2 to z-axis [0.] speed [10.];
		move pier4 to z-axis [0.] speed [10.];
		wait-for-move pier3 along z-axis;
	}
	if( TRUE )
	{
		cache pier1;
		cache pier2;
		cache pier3;
		cache pier4;
	}
	if( TRUE )
	{
		set ARMORED to 1;
		sleep 300;
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 258;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 257;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

OpenYard()
{
	set YARD_OPEN to 1;
	while( !get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 1;
	}
	set BUGGER_OFF to 0;
}

CloseYard()
{
	set YARD_OPEN to 0;
	while( get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 0;
	}
	set BUGGER_OFF to 0;
}

Go()
{
	call-script activatescr();
	call-script OpenYard();
	set INBUILDSTANCE to 1;
}

Stop()
{
	sleep 3000;
	set INBUILDSTANCE to 0;
	call-script CloseYard();
	start-script deactivatescr();
}

InitState()
{
	Static_Var_3 = 1;
	Static_Var_4 = 0;
}

RequestState(requestedstate, currentstate)
{
	if( Static_Var_4 )
	{
		Static_Var_3 = requestedstate;
		return (0);
	}
	Static_Var_4 = 1;
	currentstate = Static_Var_3;
	Static_Var_3 = requestedstate;
	while( Static_Var_3 != currentstate )
	{
		if( Static_Var_3 == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( Static_Var_3 == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	Static_Var_4 = 0;
}

Create()
{
	Static_Var_1 = 1;
	call-script InitState();
	start-script SmokeUnit();
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 1000;
	}
}

QueryNanoPiece(piecenum)
{
	if( Static_Var_1 == 1 )
	{
		piecenum = beam1;
	}
	if( Static_Var_1 == 2 )
	{
		piecenum = beam2;
	}
	if( Static_Var_1 == 3 )
	{
		piecenum = beam3;
	}
	if( Static_Var_1 == 4 )
	{
		piecenum = beam4;
	}
	++Static_Var_1;
	if( Static_Var_1 == 5 )
	{
		Static_Var_1 = 1;
	}
}

Activate()
{
	signal 2;
	start-script RequestState(0);
}

Deactivate()
{
	signal 2;
	set-signal-mask 2;
	set-signal-mask 0;
	start-script RequestState(1);
}

StartBuilding()
{
}

StopBuilding()
{
}

QueryBuildInfo(piecenum)
{
	piecenum = pad;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode pad type FALL | NOHEATCLOUD;
		explode nano1a type NOHEATCLOUD ;
		explode nano2a type NOHEATCLOUD;
		explode nano1b type NOHEATCLOUD ;
		explode nano2b type NOHEATCLOUD;
		explode beam1 type FALL | SMOKE | EXPLODE_ON_HIT | NOHEATCLOUD ;
		explode beam2 type FALL | SMOKE | EXPLODE_ON_HIT | NOHEATCLOUD;
		explode beam3 type FALL | SMOKE | EXPLODE_ON_HIT | NOHEATCLOUD ;
		explode beam4 type FALL | SMOKE | EXPLODE_ON_HIT | NOHEATCLOUD;
		explode side2 type SHATTER | NOHEATCLOUD;
		explode side1 type SHATTER | NOHEATCLOUD;
		explode pier1 type SHATTER | NOHEATCLOUD ;
		explode pier2 type SHATTER | NOHEATCLOUD;
		explode pier3 type SHATTER | SMOKE | NOHEATCLOUD;
		explode pier4 type SHATTER | SMOKE | NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
				explode pad type FALL | EXPLODE_ON_HIT | NOHEATCLOUD;
		explode nano1a type FALL | SMOKE | EXPLODE_ON_HIT | NOHEATCLOUD ;
		explode nano2a type FALL | SMOKE | EXPLODE_ON_HIT | NOHEATCLOUD;
		explode nano1b type FALL | SMOKE | EXPLODE_ON_HIT | NOHEATCLOUD ;
		explode nano2b type FALL | SMOKE | EXPLODE_ON_HIT | NOHEATCLOUD;
		explode beam1 type FALL | SMOKE | EXPLODE_ON_HIT | NOHEATCLOUD ;
		explode beam2 type FALL | SMOKE | EXPLODE_ON_HIT | NOHEATCLOUD;
		explode beam3 type FALL | SMOKE | EXPLODE_ON_HIT | NOHEATCLOUD ;
		explode beam4 type FALL | SMOKE | EXPLODE_ON_HIT | NOHEATCLOUD;
		explode side2 type SHATTER | NOHEATCLOUD;
		explode side1 type SHATTER | NOHEATCLOUD;
		explode pier1 type SHATTER | NOHEATCLOUD ;
		explode pier2 type SHATTER | NOHEATCLOUD;
		explode pier3 type SHATTER | SMOKE | NOHEATCLOUD;
		explode pier4 type SHATTER | SMOKE | NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode pad type FALL | EXPLODE_ON_HIT | NOHEATCLOUD;
		explode nano1a type FALL | SMOKE | EXPLODE_ON_HIT | NOHEATCLOUD ;
		explode nano2a type FALL | SMOKE | EXPLODE_ON_HIT | NOHEATCLOUD;
		explode nano1b type FALL | SMOKE | EXPLODE_ON_HIT | NOHEATCLOUD ;
		explode nano2b type FALL | SMOKE | EXPLODE_ON_HIT | NOHEATCLOUD;
		explode beam1 type FALL | SMOKE | EXPLODE_ON_HIT | NOHEATCLOUD ;
		explode beam2 type FALL | SMOKE | EXPLODE_ON_HIT | NOHEATCLOUD;
		explode beam3 type FALL | SMOKE | EXPLODE_ON_HIT | NOHEATCLOUD ;
		explode beam4 type FALL | SMOKE | EXPLODE_ON_HIT | NOHEATCLOUD;
		explode side2 type SHATTER | NOHEATCLOUD;
		explode side1 type SHATTER | NOHEATCLOUD;
		explode pier1 type SHATTER | NOHEATCLOUD ;
		explode pier2 type SHATTER | NOHEATCLOUD;
		explode pier3 type SHATTER | SMOKE | NOHEATCLOUD;
		explode pier4 type SHATTER | SMOKE | NOHEATCLOUD;
		return (corpsetype);
	}

}
