#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, gun, door1, door2, door3, door4, stand, turret,
       barrel, flare;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4, Static_Var_5,
            Static_Var_6;


activatescr()
{
	if( TRUE )
	{
		turn door2 to z-axis <0.> speed <222.>;
		turn door4 to z-axis <0.> speed <222.>;
		turn door3 to x-axis <0.> speed <222.>;
		turn door1 to x-axis <0.> speed <222.>;
		move turret to y-axis [0.] speed [66.];
		wait-for-turn door1 around x-axis;
		turn gun to x-axis <-90.> speed <222.>;
		wait-for-turn gun around x-axis;
		wait-for-move turret along y-axis;
		sleep 10;
	}
	sleep 25;
}

deactivatescr()
{
	if( TRUE )
	{
		move turret to y-axis [-3.] speed [8.];
		turn gun to x-axis <-90.> speed <288.>;
		turn turret to y-axis <0.> speed <288.>;
		wait-for-turn gun around x-axis;
		wait-for-move turret along y-axis;
		wait-for-turn turret around y-axis;
		turn door2 to z-axis <-90.> speed <288.>;
		turn door4 to z-axis <90.> speed <288.>;
		turn door3 to x-axis <90.> speed <288.>;
		turn door1 to x-axis <-90.> speed <288.>;
		wait-for-turn door1 around x-axis;
		sleep 320;
	}
	sleep 17;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Go()
{
	if( !Static_Var_1 )
	{
		call-script activatescr();
	}
	Static_Var_1 = 1;
	set ARMORED to 0;
}

Stop()
{
	set ARMORED to 1;
	Static_Var_1 = 0;
	call-script deactivatescr();
}

InitState()
{
	Static_Var_3 = 1;
	Static_Var_4 = 0;
}

RequestState(requestedstate, currentstate)
{
	if( Static_Var_4 )
	{
		Static_Var_3 = requestedstate;
		return (0);
	}
	Static_Var_4 = 1;
	currentstate = Static_Var_3;
	Static_Var_3 = requestedstate;
	while( Static_Var_3 != currentstate )
	{
		if( Static_Var_3 == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( Static_Var_3 == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	Static_Var_4 = 0;
}

RestoreAfterDelay()
{
	sleep 1000;
	spin barrel around z-axis speed <0.> accelerate <-10.>;
	Static_Var_5 = 100;
	sleep 1000;
	set-signal-mask 0;
	start-script RequestState(1);
}

Create()
{
	Static_Var_5 = 100;
	Static_Var_6 = 0;
	hide flare;
	dont-cache flare;
	Static_Var_1 = 1;
	start-script SmokeUnit();
	call-script InitState();
	start-script RequestState(0);
	set-signal-mask 2;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 1000;
	}
	start-script RestoreAfterDelay();
}

SetMaxReloadTime(Func_Var_1)
{
	Static_Var_2 = Func_Var_1 * 2;
}

AimPrimary(heading, pitch)
{
	start-script RequestState(0);
	signal 2;
	set-signal-mask 2;
	while( !Static_Var_1 )
	{
		sleep 250;
	}
	if( Static_Var_5 > 0 )
	{
		turn turret to y-axis heading speed <40000.> / Static_Var_5;
		turn gun to x-axis <0.> - pitch speed <40000.> / Static_Var_5;
		wait-for-turn turret around y-axis;
		wait-for-turn gun around x-axis;
	}
	if( Static_Var_5 <= 0 )
	{
		turn turret to y-axis heading now;
		turn gun to x-axis <0.> - pitch now;
	}
	while( Static_Var_6 )
	{
		sleep 1;
	}
	start-script RestoreAfterDelay();
	return (1);
}

flarez()
{
	signal 4;
	set-signal-mask 4;
	show flare;
	sleep 75;
	hide flare;
	move gun to z-axis [-1.] now;
	move gun to z-axis [0.] speed [6.];
}

FirePrimary()
{
	Static_Var_6 = 1;
	start-script flarez();
	if( Static_Var_5 > 0 )
	{
		spin barrel around z-axis speed <600.> - Static_Var_5 * <1.>;
	}
	sleep Static_Var_5;
	Static_Var_5 = Static_Var_5 - 2;
	Static_Var_6 = 0;
}

AimFromPrimary(piecenum)
{
	piecenum = gun;
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}

SweetSpot(piecenum)
{
	piecenum = base;
}
Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode barrel type NOHEATCLOUD;
		explode base type NOHEATCLOUD;
		explode door1 type NOHEATCLOUD;
		explode door2 type NOHEATCLOUD;
		explode door3 type NOHEATCLOUD;
		explode door4 type NOHEATCLOUD;
		explode gun type NOHEATCLOUD;
		explode stand type NOHEATCLOUD ;
		explode turret type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode barrel type NOHEATCLOUD | FALL;
		explode base type NOHEATCLOUD | FALL;
		explode door1 type NOHEATCLOUD | FALL;
		explode door2 type NOHEATCLOUD | FALL;
		explode door3 type NOHEATCLOUD | FALL;
		explode door4 type NOHEATCLOUD | FALL;
		explode gun type NOHEATCLOUD | FALL;
		explode stand type NOHEATCLOUD | FALL;
		explode turret type NOHEATCLOUD | FALL;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode barrel type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;;
		explode base type NOHEATCLOUD;
		explode door1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode door2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode door3 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode door4 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode gun type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode stand type NOHEATCLOUD | FALL ;
		explode turret type NOHEATCLOUD | FALL ;
		return (corpsetype);
	}
		corpsetype = 3;
		explode barrel type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;;
		explode base type NOHEATCLOUD;
		explode door1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode door2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode door3 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode door4 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode gun type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode stand type NOHEATCLOUD | FALL ;
		explode turret type NOHEATCLOUD | FALL ;
		return (corpsetype);	
}
