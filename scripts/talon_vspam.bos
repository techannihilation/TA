#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece body, cover1, cover2, cover3, rack, wheel1, wheel2, base, nano, beam ;

static-var  gun_1, bmoving, baiming, restore_delay, statechg_DesiredState, statechg_StateChanging;

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Go()
{
	if( TRUE )
	{
		move rack to y-axis <10.000000> speed <15.000000>;
		wait-for-turn rack around y-axis;
		
		sleep 50;
		
		move nano to z-axis <-5.000000> speed <30.000000>;
		wait-for-turn nano around y-axis;
		
	}
	sleep 50;
	set INBUILDSTANCE to 1;
}

Stop()
{
	set INBUILDSTANCE to 0;
	if( TRUE )
	{
		move nano to z-axis <5.000000> speed <30.000000>;
		wait-for-turn nano around y-axis;
		
		sleep 50;
		
		move rack to y-axis <-10.000000> speed <15.000000>;
		wait-for-turn rack around y-axis;
		
	}
	sleep 50;
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}


Create()
{
	restore_delay = 3000;
	start-script SmokeUnit();
	call-script InitState();

}

QueryNanoPiece(piecenum)
{
	piecenum = beam;
}


SweetSpot(piecenum)
{
	piecenum = base;
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

StartBuilding(Func_Var_1)
{
	start-script RequestState(0);
}

StopBuilding()
{
	start-script RequestState(1);
}

StartMoving()
{
	spin wheel1 around x-axis speed <220> accelerate <10>;
	spin wheel2 around x-axis speed <225> accelerate <10>;
}

StopMoving()
{
	spin wheel1 around x-axis speed <0> accelerate <10>;
	spin wheel2 around x-axis speed <0> accelerate <10>;
}





Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
	
		explode body type BITMAPONLY | BITMAP2;
		explode base type BITMAPONLY | BITMAP3;
	
		explode cover1 type SHATTER | EXPLODE_ON_HIT | BITMAP1;
		explode wheel1 type SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode wheel2 type SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
	
		explode body type BITMAPONLY | BITMAP2;
		explode base type BITMAPONLY | BITMAP3;
	
		explode cover1 type SHATTER | EXPLODE_ON_HIT | BITMAP1;
		explode wheel1 type SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode wheel2 type SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
	
		explode body type BITMAPONLY | BITMAP2;
		explode base type BITMAPONLY | BITMAP3;
	
		explode cover1 type SHATTER | EXPLODE_ON_HIT | BITMAP1;
		explode wheel1 type SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode wheel2 type SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		return (0);
	}
	corpsetype = 3;

	explode body type BITMAPONLY | BITMAP2;
	explode base type BITMAPONLY | BITMAP3;

	explode cover1 type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode wheel1 type SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode wheel2 type SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
}
