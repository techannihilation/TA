#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, pelvis, torso, jet1, jet2,
       lshoulder, larm, lcannon, launcher, rocketfire,
       rshoulder, rarm, rcannon,
       remit1, remit2, remit3, remit4,       
       lemit1, lemit2, lemit3, lemit4, 
       lupleg, llowleg, lfoot, lftoe, lleftoe, lrightoe, rupleg, rlowleg,
       rfoot, rftoe, rleftoe, rrightoe, lbtoe1, lbtoe2, rbtoe1, rbtoe2;

static-var  gun_1, bMoving, bAiming, bJumping, Static_Var_4, Static_Var_5,
            Static_Var_6, gun_3, Static_Var_8, Main_Gun_Heading, Main_Gun_Pitching,
            unitviewer, Static_Var_12, Static_Var_13;

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_2			4
#define SIG_MOVE			8


JumpControl(Func_Var_1)
{
	bJumping = Func_Var_1;
}

Jumping()
{
	while( TRUE )
	{
		if( bJumping < 80 )
		{
			emit-sfx 1024 + 0 from jet1;
			emit-sfx 1024 + 0 from jet2;
			sleep 444;
		}
		sleep 1200;
	}
	sleep 1200;
}

BeginJump()
{
	bMoving = FALSE;
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	start-script Jumping();
}

EndJump()
{

}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	var Func_Var_4;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			Func_Var_4 = Rand( 1, 4 );
			if( Func_Var_4 == 1 )
			{
				emit-sfx smoketype from base;
			}
			if( Func_Var_4 == 2 )
			{
				emit-sfx smoketype from larm;
			}
			if( Func_Var_4 == 3 )
			{
				emit-sfx smoketype from launcher;
			}
			if( Func_Var_4 == 4 )
			{
				emit-sfx smoketype from rcannon;
			}
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

StartMoving()
{
	set-signal-mask SIG_MOVE;
	bMoving = TRUE;
	while( bMoving )
	{
		if( !Static_Var_13 )
		{
			turn rupleg to x-axis <-40.000000> speed <52.500000>;
			turn rlowleg to x-axis <0.000000> speed <26.247253>;
		}
		turn rfoot to x-axis <10.000000> speed <30.000000>;
		turn lupleg to x-axis <30.000000> speed <22.500000>;
		turn lbtoe1 to x-axis <-10.000000> speed <8.000000>;
		turn lbtoe2 to x-axis <-7.000000> speed <5.593407>;
		if( Static_Var_13 )
		{
			turn rupleg to x-axis <-40.000000> speed <27.500000>;
			turn llowleg to x-axis <20.000000> speed <15.000000>;
			Static_Var_13 = 0;
		}
		if( !Static_Var_13 )
		{
			if( !bAiming )
			{
				move torso to y-axis [1.500000] speed [2.500000];
				turn torso to z-axis <2.500000> speed <1.000000>;
				turn torso to y-axis <6.000000> speed <10.000000>;
				turn larm to x-axis <-22.000000> speed <14.000000>;
				turn rarm to x-axis <18.000000> speed <14.000000>;
				move torso to x-axis [0.200000] speed [0.100000];
				turn lcannon to y-axis <4.000000> speed <2.500000>;
				turn rcannon to y-axis <-4.000000> speed <2.500000>;
				move lshoulder to y-axis [0.500000] speed [1.000000];
				move rshoulder to y-axis [-0.250000] speed [0.500000];
				move launcher to y-axis [0.400000] speed [0.900000];
			}
		}
		turn llowleg to x-axis <20.000000> speed <22.500000>;
		turn lftoe to x-axis <-20.000000> speed <15.000000>;
		turn lrightoe to x-axis <-15.000000> speed <11.247253>;
		turn lleftoe to x-axis <-15.000000> speed <11.247253>;
		turn lrightoe to y-axis <15.000000> speed <11.000000>;
		turn lleftoe to y-axis <-15.000000> speed <11.000000>;
		turn lfoot to x-axis <-30.000000> speed <22.500000>;
		sleep 1250;
		if( !bAiming )
		{
			move torso to y-axis [0.000000] speed [1.000000];
			move lshoulder to y-axis [0.000000] speed [0.450000];
			move rshoulder to y-axis [0.000000] speed [0.219977];
			move launcher to y-axis [0.000000] speed [0.500000];
		}
		turn rupleg to x-axis <0.000000> speed <68.000000>;
		turn rlowleg to x-axis <-10.000000> speed <17.000000>;
		turn rfoot to x-axis <0.000000> speed <51.093407>;
		turn rftoe to x-axis <0.000000> speed <91.000000>;
		turn rleftoe to x-axis <0.000000> speed <82.000000>;
		turn rrightoe to x-axis <0.000000> speed <82.000000>;
		turn rbtoe1 to x-axis <0.000000> speed <60.000000>;
		turn rbtoe2 to x-axis <0.000000> speed <40.000000>;
		turn llowleg to x-axis <35.000000> speed <24.890110>;
		turn lftoe to x-axis <50.000000> speed <110.000000>;
		turn lrightoe to x-axis <45.000000> speed <100.000000>;
		turn lleftoe to x-axis <45.000000> speed <100.000000>;
		turn lrightoe to y-axis <0.000000> speed <23.000000>;
		turn lleftoe to y-axis <0.000000> speed <23.000000>;
		turn lfoot to x-axis <20.000000> speed <40.000000>;
		turn lbtoe1 to x-axis <-30.000000> speed <45.000000>;
		turn lbtoe2 to x-axis <-20.000000> speed <30.000000>;
		sleep 550;
		if( !bAiming )
		{
			move torso to y-axis [1.500000] speed [2.500000];
			turn torso to z-axis <-2.500000> speed <1.000000>;
			turn torso to y-axis <-6.000000> speed <10.000000>;
			turn larm to x-axis <18.000000> speed <14.000000>;
			turn rarm to x-axis <-22.000000> speed <14.000000>;
			turn lcannon to y-axis <-4.000000> speed <2.500000>;
			turn rcannon to y-axis <4.000000> speed <2.500000>;
			move lshoulder to y-axis [0.500000] speed [1.000000];
			move rshoulder to y-axis [-0.250000] speed [0.500000];
		}
		turn rupleg to x-axis <30.000000> speed <22.500000>;
		turn rlowleg to x-axis <20.000000> speed <22.500000>;
		turn rftoe to x-axis <-20.000000> speed <15.000000>;
		turn rrightoe to x-axis <-15.000000> speed <11.247253>;
		turn rleftoe to x-axis <-15.000000> speed <11.247253>;
		turn rrightoe to y-axis <15.000000> speed <11.000000>;
		turn rleftoe to y-axis <-15.000000> speed <11.000000>;
		turn rfoot to x-axis <-30.000000> speed <22.500000>;
		turn rbtoe1 to x-axis <-10.000000> speed <8.000000>;
		turn rbtoe2 to x-axis <-7.000000> speed <5.593407>;
		turn lupleg to x-axis <-40.000000> speed <52.500000>;
		turn llowleg to x-axis <0.000000> speed <26.247253>;
		turn lfoot to x-axis <10.000000> speed <30.000000>;
		sleep 1250;
		if( !bAiming )
		{
			move torso to y-axis [0.000000] speed [1.000000];
			move lshoulder to y-axis [0.000000] speed [0.450000];
			move rshoulder to y-axis [0.000000] speed [0.219977];
		}
		turn lupleg to x-axis <0.000000> speed <68.000000>;
		turn llowleg to x-axis <-10.000000> speed <17.000000>;
		turn lftoe to x-axis <0.000000> speed <82.000000>;
		turn lfoot to x-axis <0.000000> speed <51.093407>;
		turn lleftoe to x-axis <0.000000> speed <91.000000>;
		turn lrightoe to x-axis <0.000000> speed <91.000000>;
		turn lbtoe1 to x-axis <0.000000> speed <60.000000>;
		turn lbtoe2 to x-axis <0.000000> speed <40.000000>;
		turn rlowleg to x-axis <35.000000> speed <24.890110>;
		turn rftoe to x-axis <50.000000> speed <110.000000>;
		turn rrightoe to x-axis <45.000000> speed <100.000000>;
		turn rleftoe to x-axis <45.000000> speed <100.000000>;
		turn rrightoe to y-axis <0.000000> speed <23.000000>;
		turn rleftoe to y-axis <0.000000> speed <23.000000>;
		turn rfoot to x-axis <20.000000> speed <40.000000>;
		turn rbtoe1 to x-axis <-30.000000> speed <45.000000>;
		turn rbtoe2 to x-axis <-20.000000> speed <30.000000>;
		sleep 550;
	}
}

StopMoving()
{
	signal SIG_MOVE;
	bMoving = FALSE;
	Static_Var_13 = 1;
	if( !bAiming )
	{
		turn torso to y-axis <0.000000> speed <40.000000>;
	}
	if( !Static_Var_4 )
	{
		turn larm to x-axis <0.000000> speed <50.000000>;
		turn rarm to x-axis <0.000000> speed <50.000000>;
		turn lcannon to y-axis <0.000000> speed <20.000000>;
		turn rcannon to y-axis <0.000000> speed <20.000000>;
	}
	turn lupleg to x-axis <0.000000> speed <100.000000>;
	turn llowleg to x-axis <0.000000> speed <100.000000>;
	turn lfoot to x-axis <0.000000> speed <90.000000>;
	turn lbtoe1 to x-axis <0.000000> speed <90.000000>;
	turn lbtoe2 to x-axis <0.000000> speed <80.000000>;
	turn lftoe to x-axis <0.000000> speed <60.000000>;
	turn lleftoe to x-axis <0.000000> speed <60.000000>;
	turn lrightoe to x-axis <0.000000> speed <60.000000>;
	turn lleftoe to y-axis <0.000000> speed <45.000000>;
	turn lrightoe to y-axis <0.000000> speed <45.000000>;
	turn rupleg to x-axis <0.000000> speed <100.000000>;
	turn rlowleg to x-axis <0.000000> speed <100.000000>;
	turn rfoot to x-axis <0.000000> speed <90.000000>;
	turn rftoe to x-axis <0.000000> speed <60.000000>;
	turn rleftoe to x-axis <0.000000> speed <60.000000>;
	turn rrightoe to x-axis <0.000000> speed <60.000000>;
	turn rleftoe to y-axis <0.000000> speed <45.000000>;
	turn rrightoe to y-axis <0.000000> speed <45.000000>;
	turn rbtoe1 to x-axis <0.000000> speed <90.000000>;
	turn rbtoe2 to x-axis <0.000000> speed <80.000000>;
	turn torso to z-axis <0.000000> speed <8.000000>;
	move torso to y-axis [0.000000] speed [4.000000];
	move torso to x-axis [0.000000] speed [1.200000];
	move lshoulder to y-axis [0.000000] speed [3.000000];
	move rshoulder to y-axis [0.000000] speed [3.000000];
}

RestorePrimary()
{
	set-signal-mask SIG_AIM;
	sleep 6000;
	Main_Gun_Heading = 0;
	Main_Gun_Pitching = 0;
	turn torso to y-axis <0.000000> speed <50.000000>;
	turn larm to x-axis <0.000000> speed <40.000000>;
	turn rarm to x-axis <0.000000> speed <40.000000>;
	turn lcannon to y-axis <0.000000> speed <65.000000>;
	turn rcannon to y-axis <0.000000> speed <65.000000>;
	wait-for-turn torso around y-axis;
	wait-for-turn rarm around x-axis;
	wait-for-turn rcannon around y-axis;
	Static_Var_4 = 0;
	if( bAiming == 1 )
	{
		if( Static_Var_5 == 0 AND Static_Var_6 == 0 )
		{
			bAiming = FALSE;
			return (0);
		}
	}
}

RestoreSecondary()
{
	set-signal-mask SIG_AIM_2;
	sleep 4000;
	Static_Var_6 = 0;
	turn launcher to y-axis <0.000000> speed <105.000000>;
	turn launcher to x-axis <0.000000> speed <105.000000>;
}

Demo()
{
	unitviewer = TRUE;
}

Create()
{
	

	Static_Var_8 = 0;
	Static_Var_4 = 0;
	Static_Var_5 = 0;
	Static_Var_6 = 0;

	Main_Gun_Heading = 0;
	Main_Gun_Pitching = 0;
	
	Static_Var_12 = 0;
	Static_Var_13 = 1;
	
	
	gun_1 = 1;
	bMoving = FALSE;
	bAiming = FALSE;
	unitviewer = FALSE;
	start-script SmokeUnit();
}

QueryPrimary(piecenum)
{
	if( gun_1 == 1 )
	{
		piecenum = remit1;
		return (0);
	}
	if( gun_1 == 2 )
	{
		piecenum = lemit1;
		return (0);
	}
	if( gun_1 == 3 )
	{
		piecenum = remit2;
		return (0);
	}
	if( gun_1 == 4 )
	{
		piecenum = lemit2;
		return (0);
	}
	if( gun_1 == 5 )
	{
		piecenum = remit3;
		return (0);
	}
	if( gun_1 == 6 )
	{
		piecenum = lemit3;
		return (0);
	}
	if( gun_1 == 7 )
	{
		piecenum = remit4;
		return (0);
	}
	if( gun_1 == 8 )
	{
		piecenum = lemit4;
		return (0);
	}
}

AimFromPrimary(piecenum)
{
	piecenum = torso;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	bAiming = TRUE;
	Static_Var_4 = 1;
	Main_Gun_Heading = heading;
	Main_Gun_Pitching = 0 - pitch;
	
	turn torso to y-axis heading speed <100.000000>;
	turn larm to x-axis <0.000000> - pitch speed <80.000000>;
	turn rarm to x-axis <0.000000> - pitch speed <80.000000>;
	
	Main_Gun_Pitching = 0 - pitch;
	
	if( Main_Gun_Pitching <= -32768 )
	{
		turn rcannon to y-axis Main_Gun_Pitching speed <80.000000>;
		turn lcannon to y-axis <0.000000> - Main_Gun_Pitching speed <90.000000>;
	}
	if( Main_Gun_Pitching > -32768 )
	{
		turn rcannon to y-axis <0.000000> speed <90.000000>;
		turn lcannon to y-axis <0.000000> speed <90.000000>;
	}
	wait-for-turn torso around y-axis;
	wait-for-turn lshoulder around x-axis;
	wait-for-turn rshoulder around x-axis;
	wait-for-turn rcannon around x-axis;
	wait-for-turn lcannon around x-axis;
	start-script RestorePrimary();
	return (1);
}

FirePrimary()
{
	++gun_1;
	
	if( gun_1 == 9 )
	{
		gun_1 = 1;
	}
}

QuerySecondary(piecenum)
{
	piecenum = rocketfire;
}

AimFromSecondary(piecenum)
{
	piecenum = launcher;
}

AimSecondary(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	if( !Static_Var_4 )
	{
		turn larm to x-axis <0.000000> speed <50.000000>;
		turn rarm to x-axis <0.000000> speed <50.000000>;
		move lshoulder to y-axis [0.000000] speed [3.000000];
		move rshoulder to y-axis [0.000000] speed [3.000000];
		turn lcannon to y-axis <0.000000> speed <20.000000>;
		turn rcannon to y-axis <0.000000> speed <20.000000>;
	}

	bAiming = TRUE;
	if( !unitviewer )
	{
		turn launcher to y-axis heading - Main_Gun_Heading speed <200.000000>;
		turn launcher to x-axis <0.000000> - pitch - Main_Gun_Pitching speed <150.000000>;
	}
	if( unitviewer )
	{
		turn launcher to y-axis heading speed <200.000000>;
		turn launcher to x-axis <0.000000> - pitch speed <150.000000>;
	}
	wait-for-turn launcher around y-axis;
	wait-for-turn launcher around x-axis;
	start-script RestoreSecondary();
	return (1);
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode pelvis type NOHEATCLOUD;
		explode rcannon type NOHEATCLOUD | SHATTER;
		explode lshoulder type NOHEATCLOUD | SHATTER;
		explode rarm type NOHEATCLOUD | SHATTER;
		explode torso type NOHEATCLOUD;
		explode larm type NOHEATCLOUD;
		explode lcannon type NOHEATCLOUD;
		explode launcher type NOHEATCLOUD;
		explode rocketfire type NOHEATCLOUD;
		explode rshoulder type NOHEATCLOUD;
		explode lupleg type NOHEATCLOUD;
		explode llowleg type NOHEATCLOUD;
		explode lfoot type NOHEATCLOUD;
		explode lftoe type NOHEATCLOUD;
		explode lleftoe type NOHEATCLOUD;
		explode lrightoe type NOHEATCLOUD;
		explode rupleg type NOHEATCLOUD;
		explode rlowleg type NOHEATCLOUD;
		explode rfoot type NOHEATCLOUD;
		explode rftoe type NOHEATCLOUD;
		explode rleftoe type NOHEATCLOUD;
		explode rrightoe type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode pelvis type NOHEATCLOUD | SHATTER;
		explode torso type NOHEATCLOUD | SHATTER;
		explode larm type NOHEATCLOUD | SHATTER;
		explode lcannon type NOHEATCLOUD | SHATTER;
		explode launcher type NOHEATCLOUD | SHATTER;
		explode rocketfire type NOHEATCLOUD | SHATTER;
		explode rshoulder type NOHEATCLOUD | SHATTER;
		explode rcannon type NOHEATCLOUD | SHATTER;
		explode lshoulder type NOHEATCLOUD | SHATTER;
		explode rarm type NOHEATCLOUD | SHATTER;
		explode lupleg type NOHEATCLOUD | SHATTER;
		explode llowleg type NOHEATCLOUD | SHATTER;
		explode lfoot type NOHEATCLOUD | SHATTER;
		explode lftoe type NOHEATCLOUD | SHATTER;
		explode lleftoe type NOHEATCLOUD | SHATTER;
		explode lrightoe type NOHEATCLOUD | SHATTER;
		explode rupleg type NOHEATCLOUD | SHATTER;
		explode rlowleg type NOHEATCLOUD | SHATTER;
		explode rfoot type NOHEATCLOUD | SHATTER;
		explode rftoe type NOHEATCLOUD | SHATTER;
		explode rleftoe type NOHEATCLOUD | SHATTER;
		explode rrightoe type NOHEATCLOUD | SHATTER;
		return (corpsetype);
	}
	corpsetype = 3;
	explode pelvis type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode torso type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode lshoulder type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode larm type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode lcannon type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode launcher type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode rocketfire type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode rshoulder type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode rarm type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode rcannon type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode lupleg type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode llowleg type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode lfoot type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode lftoe type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode lleftoe type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode lrightoe type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode rupleg type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode rlowleg type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode rfoot type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode rftoe type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode rleftoe type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode rrightoe type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	return (corpsetype);
}
