#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, p, body, lights01, lights02, rotor;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4, Static_Var_5,
            Static_Var_6, statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_ACTIVATE			2


HitByWeapon(anglex, anglez)
{
	var Func_Var_3;
	Func_Var_3 = get HEALTH;
	if( Func_Var_3 <= 60 )
	{
		if( Static_Var_4 == 0 )
		{
			Static_Var_4 = 1;
			hide p;
			explode p type NOHEATCLOUD | FALL | SHATTER | SMOKE;
		}
	}
	if( Func_Var_3 <= 50 )
	{
		if( Static_Var_5 == 0 )
		{
			Static_Var_5 = 1;
			hide p;
			explode p type NOHEATCLOUD | FALL | SHATTER | SMOKE;
		}
	}
	if( Func_Var_3 <= 35 )
	{
		if( Static_Var_6 == 0 )
		{
			Static_Var_6 = 1;
			hide p;
			explode p type NOHEATCLOUD | FALL | SHATTER | SMOKE;
		}
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	Static_Var_4 = 0;
	Static_Var_5 = 0;
	Static_Var_6 = 0;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent >= 40 )
		{
			if( Static_Var_6 == 1 )
			{
				Static_Var_6 = 0;
				show p;
			}
		}
		if( healthpercent >= 60 )
		{
			if( Static_Var_5 == 1 )
			{
				Static_Var_5 = 0;
				show p;
			}
		}
		if( healthpercent >= 75 )
		{
			if( Static_Var_4 == 1 )
			{
				Static_Var_4 = 0;
				show p;
			}
		}
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from body;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Go()
{
	dont-cache lights01;
	dont-cache lights02;
	spin rotor around y-axis speed Static_Var_1 accelerate Static_Var_2;
}

Stop()
{
	cache lights01;
	cache lights02;
	stop-spin rotor around x-axis decelerate Static_Var_3;
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	Static_Var_1 = 0;
	Static_Var_2 = 45;
	Static_Var_3 = 182;
	dont-shade rotor;
	dont-cache rotor;
	dont-shade lights01;
	dont-shade lights02;
	call-script InitState();
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	start-script SmokeUnit();
}

Activate()
{
	start-script RequestState(0);
	signal SIG_ACTIVATE;
	set-signal-mask SIG_ACTIVATE;
}

Deactivate()
{
	start-script RequestState(1);
	signal SIG_ACTIVATE;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

SetSpeed(Func_Var_1)
{
	Static_Var_1 = Func_Var_1 * 20;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode rotor type NOHEATCLOUD;
		explode body type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode rotor type NOHEATCLOUD | SHATTER;
		explode body type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode body type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
		explode rotor type NOHEATCLOUD;
		return (corpsetype);
	}
	corpsetype = 3;
	explode body type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	explode rotor type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	return (corpsetype);
}
