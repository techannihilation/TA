#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  rflare, lflare, body, turret, feetparent, FLFoot, FRFoot, RLFoot,
       RRFoot, rightchunk, leftchunk, faceguard, Lgun, Rgun, Rbarrel, Lbarrel,
       hips, knobs, Lgun2, Rgun2, Rbarrel2, Lbarrel2, rflare2, lflare2;

static-var  bMoving, bAiming, Static_Var_3, restore_delay, gun_1;

// Signal definitions
#define SIG_AIM				4


walklegs()
{
	if( bMoving )
	{
		move FLFoot to z-axis [-0] speed 1.5 * [5.000000];
		move RLFoot to z-axis [-1.6] speed 1.5 * [7.500000];
		move FRFoot to z-axis [0] speed 1.5 * [12.5];
		move FRFoot to y-axis [0] speed 1.5 * [12.5];
		turn FRFoot to x-axis <0.000000> speed 1.5 * <109.5000000>;
		turn RRFoot to x-axis <22.000000> speed 1.5 * <136.000000>;
		turn rightchunk to x-axis <9.000000> speed 1.5 * <55.000000>;
		turn body to z-axis <-2> speed <30>;
		sleep 80;
	}
	if( bMoving )
	{
		move FLFoot to z-axis [1.2] speed 1.5 * [27.500000];
		move FLFoot to y-axis [0.4] speed 1.5 * [27.500000];
		move RLFoot to z-axis [-1.6] speed 1.5 * [12.500000];
		turn FLFoot to x-axis <-16> speed 1.5 * <78.000000>;
		turn leftchunk to x-axis <-4> speed 1.5 * <34.000000>;
		move FRFoot to z-axis [0] speed 1.5 * [12.5];
		move RRFoot to z-axis [0] speed 1.5 * [20.000000];
		turn RRFoot to x-axis <28.005495> speed 1.5 * <38.000000>;
		turn rightchunk to x-axis <10.000000> speed 1.5 * <6.000000>;
		turn body to z-axis <-1> speed <30>;
		sleep 80;
	}
	if( bMoving )
	{
		move FLFoot to z-axis [3.1] speed 1.5 * [20.000000];
		move FLFoot to y-axis [0.8] speed 1.5 * [20.000000];
		move RLFoot to z-axis [-1.2] speed 1.5 * [12.5000000];
		turn FLFoot to x-axis <-32> speed 1.5 * <105.000000>;
		turn leftchunk to x-axis <-8.000000> speed 1.5 * <34.000000>;
		move FRFoot to z-axis [0] speed 1.5 * [12.5];
		move RRFoot to z-axis [0] speed 1.5 * [17.500000];
		turn RRFoot to x-axis <10.000000> speed 1.5 * <112.000000>;
		turn rightchunk to x-axis <2.000000> speed 1.5 * <46.000000>;
		turn body to z-axis <0> speed <30>;
		sleep 80;
	}
	if( bMoving )
	{
		move RLFoot to z-axis [-2.469982] speed 1.5 * [12.5000000];
		turn FLFoot to x-axis <-18.000000> speed 1.5 * <69.000000>;
		turn leftchunk to x-axis <-9.000000> speed 1.5 * <27.000000>;
		move FRFoot to z-axis [0] speed 1.5 * [12.5];
		move RRFoot to z-axis [0.359997] speed 1.5 * [12.500000];
		turn RRFoot to x-axis <0.000000> speed 1.5 * <64.000000>;
		turn rightchunk to x-axis <-2.000000> speed 1.5 * <32.000000>;
		turn body to z-axis <0> speed <30>;
		sleep 80;
	}
	if( bMoving )
	{
		move RLFoot to z-axis [-3.229998] speed 1.5 * [12.5000000];
		turn FLFoot to x-axis <0.000000> speed 1.5 * <109.000000>;
		move FRFoot to z-axis [0] speed 1.5 * [12.5];
		move RRFoot to z-axis [-0.429998] speed 1.5 * [10.000000];
		turn body to z-axis <1> speed <30>;
		sleep 80;
	}
	if( bMoving )
	{
		move FLFoot to z-axis [0] speed 1.5 * [12.5];
		move FLFoot to y-axis [0] speed 1.5 * [12.5];
		turn FLFoot to x-axis <0.000000> speed 1.5 * <109.5000000>;
		turn RLFoot to x-axis <22.000000> speed 1.5 * <136.000000>;
		turn leftchunk to x-axis <9.000000> speed 1.5 * <55.000000>;
		move FRFoot to z-axis [-0] speed 1.5 * [5.000000];
		move RRFoot to z-axis [-1.6] speed 1.5 * [7.500000];
		turn body to z-axis <2> speed <30>;
		sleep 80;
	}
	if( bMoving )
	{
		move FLFoot to z-axis [0] speed 1.5 * [12.5];
		move RLFoot to z-axis [0] speed 1.5 * [20.000000];
		turn RLFoot to x-axis <28.005495> speed 1.5 * <38.000000>;
		turn leftchunk to x-axis <10.000000> speed 1.5 * <6.000000>;
		move FRFoot to z-axis [1.4] speed 1.5 * [27.500000];
		move FRFoot to y-axis [.4] speed 1.5 * [27.500000];
		move RRFoot to z-axis [-1.6] speed 1.5 * [12.500000];
		turn FRFoot to x-axis <-16> speed 1.5 * <78.000000>;
		turn rightchunk to x-axis <-4> speed 1.5 * <34.000000>;
		turn body to z-axis <1> speed <30>;
		sleep 80;
	}
	if( bMoving )
	{
		move FLFoot to z-axis [0] speed 1.5 * [12.5];
		move RLFoot to z-axis [0] speed 1.5 * [17.500000];
		turn RLFoot to x-axis <10.000000> speed 1.5 * <112.000000>;
		turn leftchunk to x-axis <2.000000> speed 1.5 * <46.000000>;
		move FRFoot to z-axis [3.2] speed 1.5 * [20.000000];
		move FRFoot to y-axis [0.8] speed 1.5 * [20.000000];
		move RRFoot to z-axis [-1.6] speed 1.5 * [12.5000000];
		turn FRFoot to x-axis <-32> speed 1.5 * <105.000000>;
		turn rightchunk to x-axis <-8.000000> speed 1.5 * <34.000000>;
		turn body to z-axis <0> speed <30>;
		sleep 80;
	}
	if( bMoving )
	{
		move FLFoot to z-axis [0] speed 1.5 * [12.5];
		move RLFoot to z-axis [0.359997] speed 1.5 * [12.500000];
		turn RLFoot to x-axis <0.000000> speed 1.5 * <64.000000>;
		turn leftchunk to x-axis <-2.000000> speed 1.5 * <32.000000>;
		move RRFoot to z-axis [-2.469982] speed 1.5 * [12.5000000];
		turn FRFoot to x-axis <-18.000000> speed 1.5 * <69.000000>;
		turn rightchunk to x-axis <-9.000000> speed 1.5 * <27.000000>;
		turn body to z-axis <0> speed <30>;
		sleep 80;
	}
	if( bMoving )
	{
		move FLFoot to z-axis [0] speed 1.5 * [12.5];
		move RLFoot to z-axis [-0.429998] speed 1.5 * [10.000000];
		move RRFoot to z-axis [-3.229998] speed 1.5 * [12.5000000];
		turn FRFoot to x-axis <0.000000> speed 1.5 * <109.000000>;
		turn body to z-axis <-1> speed <30>;
		sleep 80;
	}
	sleep 1;
	return (0);
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from body;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

MotionControl(moving, aiming, justmoved)
{
	justmoved = TRUE;
	while( TRUE )
	{
		moving = bMoving;
		aiming = bAiming;
		if( moving )
		{
			call-script walklegs();
			justmoved = TRUE;
		}
		if( !moving )
		{
			if( justmoved )
			{
				move RRfoot to z-axis [0] speed [12.5];
				move RLfoot to z-axis [0] speed [12.5];
				move FRfoot to z-axis [0] speed [12.5];
				move FLfoot to z-axis [0] speed [12.5];
				move FRfoot to y-axis [0] speed [12.5];
				move FLfoot to y-axis [0] speed [12.5];
				turn body to z-axis <0> speed <30>;
				turn rightchunk to x-axis <0.000000> speed 1.5 * <150.000000>;
				turn RRFoot to x-axis <0.000000> speed 1.5 * <150.000000>;
				turn FRFoot to x-axis <0.000000> speed 1.5 * <150.000000>;
				turn leftchunk to x-axis <0.000000> speed 1.5 * <150.000000>;
				turn RLFoot to x-axis <0.000000> speed 1.5 * <150.000000>;
				turn FLFoot to x-axis <0.000000> speed 1.5 * <150.000000>;
				justmoved = FALSE;
			}
			sleep 100;
		}
	}
}

Create()
{
	bMoving = FALSE;
	bAiming = FALSE;
	Static_Var_3 = 1;
	gun_1 = 0;
	hide rflare;
	hide lflare;
	hide rflare2;
	hide lflare2;
	restore_delay = 3000;
	start-script MotionControl();
	start-script SmokeUnit();
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

StartMoving()
{
	bMoving = TRUE;
}

StopMoving()
{
	bMoving = FALSE;
}

SweetSpot(piecenum)
{
	piecenum = body;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	turn turret to y-axis <0.000000> speed <90.000000>;
	turn Rgun to x-axis <0.000000> speed <45.000000>;
	turn Lgun to x-axis <0.000000> speed <45.000000>;
	turn Rgun2 to x-axis <0.000000> speed <45.000000>;
	turn Lgun2 to x-axis <0.000000> speed <45.000000>;
	bAiming = FALSE;
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

QueryPrimary(piecenum)
{
	if( gun_1 == 0 )
	{
		piecenum = rflare;
	}
	if( gun_1 == 1 )
	{
		piecenum = lflare;
	}
	if( gun_1 == 2 )
	{
		piecenum = rflare2;
	}
	if( gun_1 == 3 )
	{
		piecenum = lflare2;
	}
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	bAiming = TRUE;
	turn turret to y-axis heading speed <140.000000>;
	turn Rgun to x-axis <0.000000> - pitch speed <35.000000>;
	turn Lgun to x-axis <0.000000> - pitch speed <35.000000>;
	turn Rgun2 to x-axis <0.000000> - pitch speed <35.000000>;
	turn Lgun2 to x-axis <0.000000> - pitch speed <35.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn Rgun around x-axis;
	wait-for-turn Lgun around x-axis;
	wait-for-turn Rgun2 around x-axis;
	wait-for-turn Lgun2 around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

Shot1()
{
	if( gun_1 == 0 )
	{
		//No recoil for laser type weapons in techa
		//move Rgun to z-axis [-2] now;
		//move Rgun to z-axis [0] speed [5];
		emit-sfx 1024 + 0 from rflare;
		sleep 150;
	}
	if( gun_1 == 1 )
	{
		//move Lgun to z-axis [-2] now;
		//move Lgun to z-axis [0] speed [5];
		emit-sfx 1024 + 0 from lflare;
		sleep 150;
	}
	if( gun_1 == 2 )
	{
		//move Rgun2 to z-axis [-2] now;
		//move Rgun2 to z-axis [0] speed [5];
		emit-sfx 1024 + 0 from rflare2;
		sleep 150;
	}
	if( gun_1 == 3 )
	{
		//move Lgun2 to z-axis [-2] now;
		//move Lgun2 to z-axis [0] speed [5];
		emit-sfx 1024 + 0 from lflare2;
		sleep 150;
	}
	++gun_1;
	if( gun_1 == 4 )
	{
		gun_1 = 0;
	}
}

Killed(severity, corpsetype)
{
	hide lflare;
	hide rflare;
	hide lflare2;
	hide rflare2;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode body type NOHEATCLOUD;
		explode FLFoot type NOHEATCLOUD;
		explode FRFoot type NOHEATCLOUD;
		explode knobs type NOHEATCLOUD;
		explode Lbarrel type NOHEATCLOUD;
		explode leftchunk type NOHEATCLOUD;
		explode lflare type NOHEATCLOUD;
		explode Lgun type NOHEATCLOUD;
		explode Rbarrel type NOHEATCLOUD;
		explode rflare type NOHEATCLOUD;
		explode Rgun type NOHEATCLOUD;
		explode rightchunk type NOHEATCLOUD;
		explode RLFoot type NOHEATCLOUD;
		explode RRFoot type NOHEATCLOUD;
		explode turret type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode body type NOHEATCLOUD;
		explode FLFoot type NOHEATCLOUD;
		explode FRFoot type NOHEATCLOUD;
		explode knobs type NOHEATCLOUD | FALL;
		explode Lbarrel type NOHEATCLOUD | FALL;
		explode leftchunk type NOHEATCLOUD;
		explode lflare type NOHEATCLOUD | FALL;
		explode Lgun type NOHEATCLOUD | FALL;
		explode Rbarrel type NOHEATCLOUD | FALL;
		explode rflare type NOHEATCLOUD | FALL;
		explode Rgun type NOHEATCLOUD | FALL;
		explode rightchunk type NOHEATCLOUD;
		explode RLFoot type NOHEATCLOUD;
		explode RRFoot type NOHEATCLOUD;
		explode turret type NOHEATCLOUD | FALL;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode body type NOHEATCLOUD | SHATTER;
		explode FLFoot type NOHEATCLOUD;
		explode FRFoot type NOHEATCLOUD;
		explode knobs type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode Lbarrel type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode leftchunk type NOHEATCLOUD;
		explode lflare type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode Lgun type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode Rbarrel type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode rflare type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode Rgun type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode rightchunk type NOHEATCLOUD;
		explode RLFoot type NOHEATCLOUD;
		explode RRFoot type NOHEATCLOUD;
		explode turret type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		return (corpsetype);
	}
	corpsetype = 3;
	explode body type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	explode FLFoot type NOHEATCLOUD;
	explode FRFoot type NOHEATCLOUD;
	explode knobs type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode Lbarrel type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode leftchunk type NOHEATCLOUD;
	explode lflare type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode Lgun type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode Rbarrel type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode rflare type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode Rgun type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode rightchunk type NOHEATCLOUD;
	explode RLFoot type NOHEATCLOUD;
	explode RRFoot type NOHEATCLOUD;
	explode turret type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	return (corpsetype);
}
