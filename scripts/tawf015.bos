#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  flare1, flare2, gun, base, thrusters, bigflare, lemit, remit,
       blemit, bremit;

static-var  gun_1, statechg_DesiredState, statechg_StateChanging, Static_Var_4;


activatescr()
{
	if( TRUE )
	{
		turn thrusters to x-axis <0.000000> speed <30.000000>;
		Static_Var_4 = 1;
	}
}

deactivatescr()
{
	if( TRUE )
	{
		turn thrusters to x-axis <-75.016484> speed <30.000000>;
		Static_Var_4 = 0;
	}
}

flames(Func_Var_1)
{
	Func_Var_1 = 0;
	while( TRUE )
	{
		while( Static_Var_4 )
		{
			emit-sfx 1024 + 2 from lemit;
			emit-sfx 1024 + 2 from remit;
			emit-sfx 1024 + 2 from blemit;
			emit-sfx 1024 + 2 from bremit;
			sleep 30;
		}
		sleep 300;
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	start-script flames();
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script activatescr();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script deactivatescr();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	turn thrusters to x-axis <-75.016484> speed <8000.000000>;
	hide flare1;
	hide flare2;
	hide bigflare;
	gun_1 = flare1;
	call-script InitState();
	start-script SmokeUnit();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

AimPrimary()
{
	return (1);
}

AimSecondary()
{
	return (1);
}

QueryPrimary(piecenum)
{
	piecenum = gun_1;
}

FirePrimary()
{
	gun_1 = !gun_1;
	if( gun_1 == 0 )
	{
		emit-sfx 1024 + 1 from flare1;
		sleep 150;
		return (0);
	}
	if( gun_1 == 1 )
	{
		emit-sfx 1024 + 1 from flare2;
		sleep 150;
		return (0);
	}
}

QuerySecondary(piecenum)
{
	piecenum = bigflare;
}

FireSecondary()
{
	emit-sfx 1024 + 0 from bigflare;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide flare1;
	hide flare2;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type NOHEATCLOUD;
		explode flare1 type NOHEATCLOUD | FALL;
		explode flare2 type NOHEATCLOUD | FALL;
		explode gun type NOHEATCLOUD | SHATTER;
		explode thrusters type NOHEATCLOUD | SHATTER;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type NOHEATCLOUD;
		explode flare1 type NOHEATCLOUD | FALL;
		explode flare2 type NOHEATCLOUD | FALL;
		explode gun type NOHEATCLOUD | SHATTER;
		explode thrusters type NOHEATCLOUD | SHATTER;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type NOHEATCLOUD;
		explode flare1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode flare2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode gun type NOHEATCLOUD | SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode thrusters type NOHEATCLOUD | SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT;
		return (corpsetype);
	}
	corpsetype = 3;
	explode base type NOHEATCLOUD;
	explode flare1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode flare2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode gun type NOHEATCLOUD | SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode thrusters type NOHEATCLOUD | SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT;
	return (corpsetype);
}
