#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  w1, w2, w3, w4, w5, w6, w7, w8,
       w9, w10, w11, w12, wakes, base, stand, missile,
       door1, door2, body;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4, Static_Var_5,
            Static_Var_6;


WobbleUnit()
{
	while( TRUE )
	{
		if( Static_Var_4 )
		{
			move base to y-axis [2.] speed [3.];
		}
		else
		{
			move base to y-axis [-0.] speed [3.];
		}
		Static_Var_4 = !Static_Var_4;
		sleep 750;
	}
}

BankClerck(Func_Var_1, Func_Var_2, Func_Var_3)
{
	while( TRUE )
	{
		Func_Var_1 = get PIECE_XZ(base);
		Func_Var_3 = 0;
		if( get XZ_HYPOT(Func_Var_1 - Func_Var_2) >= 163840 )
		{
			Func_Var_3 = 0 - get XZ_ATAN(Func_Var_2 - Func_Var_1) * 80 / 40;
		}
		turn body to z-axis Func_Var_3 speed <30.>;
		Func_Var_2 = Func_Var_1;
		sleep 300;
	}
}

HitByWeapon(anglex, anglez)
{
	signal 32;
	set-signal-mask 32;
	turn body to z-axis <0.> * anglez speed <105.>;
	turn body to x-axis <0.> * anglex speed <105.>;
	wait-for-turn body around z-axis;
	wait-for-turn body around x-axis;
	turn body to z-axis <0.> speed <30.>;
	turn body to x-axis <0.> speed <30.>;
}

SetMaxReloadTime(Func_Var_1)
{
	Static_Var_2 = Func_Var_1;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 258;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 257;
			}
			emit-sfx smoketype from w1;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

StartMoving()
{
	signal 4;
	set-signal-mask 4;
}

StopMoving()
{
	signal 4;
}

waking()
{
	while( TRUE )
	{
		if( Static_Var_1 == 2 OR Static_Var_1 == 1 )
		{
			emit-sfx 3 from w1;
			emit-sfx 3 from w2;
			emit-sfx 3 from w3;
			emit-sfx 3 from w4;
			emit-sfx 3 from w5;
			emit-sfx 3 from w6;
			emit-sfx 3 from w7;
			emit-sfx 3 from w8;
			emit-sfx 3 from w9;
			emit-sfx 3 from w10;
			emit-sfx 3 from w11;
			emit-sfx 3 from w12;
			emit-sfx 5 from w1;
			emit-sfx 5 from w2;
			emit-sfx 5 from w3;
			emit-sfx 5 from w4;
			emit-sfx 5 from w5;
			emit-sfx 5 from w6;
			emit-sfx 5 from w7;
			emit-sfx 5 from w8;
			emit-sfx 5 from w9;
			emit-sfx 5 from w10;
			emit-sfx 5 from w11;
			emit-sfx 5 from w12;
		}
		sleep 325;
	}
}

setSFXoccupy(state)
{
	Static_Var_1 = state;
}

Create()
{
	start-script waking();
	start-script SmokeUnit();
	Static_Var_2 = 3000;
	start-script BankClerck();
	Static_Var_3 = 0;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 1;
	}
	start-script WobbleUnit();
}

RestorePrimary(Func_Var_1)
{
	sleep Static_Var_2;
	turn stand to x-axis <0.> speed <90.>;
	wait-for-turn stand around x-axis;
	move door1 to x-axis [0.] speed [1.];
	move door2 to x-axis [0.] speed [1.];
	wait-for-move door1 along x-axis;
	show missile;
	Static_Var_3 = 0;
}

AimPrimary(heading, pitch)
{
	signal 2;
	set-signal-mask 2;
	while( Static_Var_3 )
	{
		sleep 100;
	}
	show missile;
	move door1 to x-axis [1.] speed [1.];
	move door2 to x-axis [-1.] speed [1.];
	wait-for-move door1 along x-axis;
	turn stand to x-axis <-90.> speed <90.>;
	wait-for-turn stand around x-axis;
	start-script RestorePrimary();
	return (1);
}

FirePrimary()
{
	move base to y-axis [-2.] speed [2500.];
	Static_Var_3 = 1;
	hide missile;
	sleep 1000;
	turn stand to x-axis <0.> speed <90.>;
	wait-for-turn stand around x-axis;
	move door1 to x-axis [0.] speed [1.];
	move door2 to x-axis [0.] speed [1.];
	wait-for-move door1 along x-axis;
	show missile;
	sleep 1000;
	Static_Var_3 = 0;
}

QueryPrimary(piecenum)
{
	piecenum = missile;
}

AimFromPrimary(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode missile type NOHEATCLOUD;
		explode body type NOHEATCLOUD;
		explode door1 type NOHEATCLOUD;
		explode door2 type NOHEATCLOUD;
		explode stand type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode missile type FALL | NOHEATCLOUD;
		explode body type NOHEATCLOUD ;
		explode door1 type SHATTER | NOHEATCLOUD;
		explode door2 type SHATTER | NOHEATCLOUD;
		explode stand type SHATTER | NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode missile type FALL | NOHEATCLOUD ;
		explode body type NOHEATCLOUD ;
		explode door1 type SHATTER | NOHEATCLOUD ;
		explode door2 type SHATTER | EXPLODE_ON_HIT | NOHEATCLOUD;
		explode stand type SHATTER | EXPLODE_ON_HIT | NOHEATCLOUD;
		return (corpsetype);
	}
	corpsetype = 3;
	explode missile type FALL | NOHEATCLOUD ;
	explode body type NOHEATCLOUD ;
	explode door1 type SHATTER | NOHEATCLOUD ;
	explode door2 type SHATTER | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode stand type SHATTER | EXPLODE_ON_HIT | NOHEATCLOUD;
	return (corpsetype);
}
