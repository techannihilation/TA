#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, turret1, turret2, turret3, barrel1, barrel2, barrel3,
       flare1, flare2, flare3, p;

static-var  restore_delay, Static_Var_2;

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_2			4
#define SIG_AIM_3			8


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}



Create()
{
	hide flare1;
	hide flare2;
	hide flare3;
	start-script SmokeUnit();
}

RestoreAfterDelay2()
{
	set-signal-mask SIG_AIM_2;
	sleep 3000;
	turn turret2 to y-axis <0.000000> speed <50.000000>;
}

RestoreAfterDelay3()
{
	set-signal-mask SIG_AIM_3;
	sleep 3000;
	turn turret3 to y-axis <0.000000> speed <50.000000>;
}


AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	return (1);
}

FirePrimary()
{
	emit-sfx 1024 + 0 from flare1;
}

QueryPrimary(piecenum)
{
	piecenum = flare1;
}

AimSecondary(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM;
	turn turret2 to y-axis heading speed <50.000000>;
	wait-for-turn turret2 around y-axis;
	start-script RestoreAfterDelay2();
	return (1);
}

FireSecondary()
{
	emit-sfx 1024 + 0 from flare2;
}

AimFromSecondary(piecenum)
{
	piecenum = turret2;
}

QuerySecondary(piecenum)
{
	piecenum = flare2;
}

AimTertiary(heading, pitch)
{
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;
	turn turret3 to y-axis heading speed <50.000000>;
	wait-for-turn turret3 around y-axis;
	
	start-script RestoreAfterDelay3();
	return (1);
}

FireTertiary()
{
	emit-sfx 1024 + 0 from flare3;
}

AimFromTertiary(piecenum)
{
	piecenum = turret3;
}

QueryTertiary(piecenum)
{
	piecenum = flare3;
}

SweetSpot(piecenum)
{
	piecenum = body;
}

Killed(severity, corpsetype)
{
	hide flare1;
	explode base type NOHEATCLOUD;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode turret1 type NOHEATCLOUD;
		explode body type NOHEATCLOUD;
		explode turret2 type NOHEATCLOUD;
		explode turret3 type NOHEATCLOUD;
		
		return (corpsetype);
	}
	explode barrel2 type NOHEATCLOUD | FALL | SMOKE | EXPLODE_ON_HIT;
	if( severity <= 50 )
	{
		corpsetype = 2;
			explode body type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
			explode turret1 type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
			explode turret2 type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
			explode turret3 type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
			return (corpsetype);
	}
	corpsetype = 3;
	explode body type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	explode turret1 type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	explode turret2 type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	explode turret3 type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	
	return (corpsetype);
}
