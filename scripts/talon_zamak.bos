#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, fire, body, turret, w1, w2, w3, w4,
       w5, w6, w7, w8, w9, w10, w11, w12,
       w13, w14, w15, w16, w17, w18, w19, w20,
       w21, w22, w23, w24, wakes1, wakes2, sleeve, gun, depth,
       tri, aimpoint;

static-var  Static_Var_1, Static_Var_2;


RockOnWaves()
{
	while( TRUE )
	{
		turn base to x-axis <1.> speed <2.>;
		move base to y-axis [0.] speed [0.];
		wait-for-turn base around x-axis;
		turn base to x-axis <-1.> speed <2.>;
		move base to y-axis [-0.] speed [0.];
		wait-for-move base along y-axis;
		move base to y-axis [0.] speed [0.];
		wait-for-turn base around x-axis;
		turn base to x-axis <1.> speed <2.>;
		move base to y-axis [-0.] speed [0.];
		wait-for-move base along y-axis;
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from body;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	hide fire;
	Static_Var_2 = 3000;
	start-script SmokeUnit();
	start-script RockOnWaves();
}

SetMaxReloadTime(Func_Var_1)
{
	Static_Var_2 = Func_Var_1 * 2;
}

RestoreAfterDelay()
{
	sleep Static_Var_2;
	turn sleeve to x-axis <0.> speed <100.>;
	turn turret to y-axis <0.> speed <50.>;
}

StartMoving()
{
	signal 8;
	set-signal-mask 8;
	while( TRUE )
	{
		emit-sfx 3 from w1;
		emit-sfx 3 from w2;
		emit-sfx 3 from w3;
		emit-sfx 3 from w4;
		emit-sfx 3 from w5;
		emit-sfx 3 from w6;
		emit-sfx 3 from w7;
		emit-sfx 3 from w8;
		emit-sfx 3 from w9;
		emit-sfx 3 from w10;
		emit-sfx 3 from w11;
		emit-sfx 3 from w12;
		emit-sfx 3 from w13;
		emit-sfx 3 from w14;
		emit-sfx 3 from w15;
		emit-sfx 3 from w16;
		emit-sfx 3 from w17;
		emit-sfx 3 from w18;
		emit-sfx 3 from w19;
		emit-sfx 3 from w20;
		emit-sfx 3 from w21;
		emit-sfx 3 from w22;
		emit-sfx 3 from w23;
		emit-sfx 3 from w24;
		emit-sfx 5 from w1;
		emit-sfx 5 from w2;
		emit-sfx 5 from w3;
		emit-sfx 5 from w4;
		emit-sfx 5 from w5;
		emit-sfx 5 from w6;
		emit-sfx 5 from w7;
		emit-sfx 5 from w8;
		emit-sfx 5 from w9;
		emit-sfx 5 from w10;
		emit-sfx 5 from w11;
		emit-sfx 5 from w12;
		emit-sfx 5 from w13;
		emit-sfx 5 from w14;
		emit-sfx 5 from w15;
		emit-sfx 5 from w16;
		emit-sfx 5 from w17;
		emit-sfx 5 from w18;
		emit-sfx 5 from w19;
		emit-sfx 5 from w20;
		emit-sfx 5 from w21;
		emit-sfx 5 from w22;
		emit-sfx 5 from w23;
		emit-sfx 5 from w24;
		sleep 200;
	}
}

StopMoving()
{
	signal 8;
}

AimPrimary(heading, pitch)
{
	signal 2;
	set-signal-mask 2;
	turn turret to y-axis heading speed <120.>;
	turn sleeve to x-axis <0.> - pitch speed <80.>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeve around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	emit-sfx 1025 from fire;
	explode fire type NOHEATCLOUD;
	move gun to z-axis [-3.] now;
	move gun to z-axis [0.] speed [5.];
	show fire;
	sleep 150;
	hide fire;
	sleep 350;
}

AimFromPrimary(piecenum)
{
	piecenum = aimpoint;
}

QueryPrimary(piecenum)
{
	piecenum = fire;
}


AimSecondary(heading, pitch)
{
	signal 4;
	set-signal-mask 4;
	return (1);
}

FireSecondary()
{
	
}

AimFromSecondary(piecenum)
{
	piecenum = depth;
}

QuerySecondary(piecenum)
{
	piecenum = depth;
}

SweetSpot(piecenum)
{
	piecenum = body;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode body type NOHEATCLOUD;
		explode fire type NOHEATCLOUD;
		explode gun type NOHEATCLOUD;
		explode turret type NOHEATCLOUD;
		explode tri type SHATTER;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode body type NOHEATCLOUD | FALL;
		explode fire type NOHEATCLOUD | FALL;
		explode gun type NOHEATCLOUD | FALL;
		explode turret type NOHEATCLOUD | FALL;
		explode tri type SHATTER;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode body type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode fire type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode gun type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode turret type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode tri type SHATTER;
		return (corpsetype);
	}
	corpsetype = 3;
	explode body type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode fire type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode gun type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode turret type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode tri type SHATTER;
	return (corpsetype);
}
